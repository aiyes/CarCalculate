package com.chinalife.sz.cc.user.service.impl;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.chinalife.sz.cc.model.user.UserInfoDTO;
import com.chinalife.sz.cc.user.mapper.UserInfoMapper;
import com.chinalife.sz.cc.user.service.UserInfoService;
import com.prs.framework.core.exception.BusinessException;
import com.prs.framework.core.exception.BusinessServiceException;

/**
 * <p>Title: AccidentFormService</p>
 * <p>Description: 车险报价系统 </p>
 * <p>Company: 中国人寿财产保险股份有限公司深圳市分公司</p>
 * @author liangjihong@sz.chinalife-p.com.cn
 * @date 2016年8月1日
 * @version 1.0
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class UserInfoServiceImpl implements UserInfoService{
	@Resource
	private UserInfoMapper userInfoMapper;

	@Override
	public int addUserInfo(UserInfoDTO dto)   throws BusinessException {
		return userInfoMapper.addUserInfo(dto);
	}

	@Override
	public UserInfoDTO findUserInfoByUserCde(String userCde)  throws BusinessException {
		return userInfoMapper.findUserInfoByUserCde(userCde);
	}

	@Override
	public int updateUserInfo(UserInfoDTO dto)  throws BusinessException {
		return userInfoMapper.updateUserInfo(dto);
	}

	@Override
	public int delUserInfoByUserCde(String userCde,String updMan)  throws BusinessException {
		return userInfoMapper.delUserInfoByUserCde(userCde,updMan);
	}
	
	@Override
	public int userLogin(String userName, String password) throws BusinessServiceException {
		/*
		 * 0、登陆成功/1、登陆失败/2、超过登陆限制次数/3、其它错误 LAST_LOGIN_ERRDATE,LOGIN_ERR_COUNT
		 */
		/*int num = 1;
		String idCard = null;
		String polOrder = null;
		try {
			// 有正式数据时，在去除该注释,现在都走身份登录参数
			if(StringUtils.isEmpty(userName)) 
				return num;
			if(userName.length() == 18) {			// 18位默认为身份证登录
				idCard = userName;
			} else {				
				//InsuranceFormDTO insuranceFormDTO = insuranceFormMapper.findInsuranceFormIdCard(userName);
				if(insuranceFormDTO!=null) {
					idCard = insuranceFormDTO.getIdCard();
				} else {
					return num;
				}
			}
			if(StringUtils.isEmpty(idCard)) 
				return num;
		    List<InsuranceFormDTO> list = insuranceFormMapper.userNameLogin(idCard, polOrder);
		    if(list != null && !list.isEmpty()) {
		    	for (InsuranceFormDTO dto : list) {
			    	// 获取用户登录失败次数
			    	int loginErrCount = dto.getLoginErrCount();
			    	// 已经达到允许登录失败的最大次数
			    	if(Constants.PERMITLOGINCOUNT == loginErrCount) {
			    		// 获取用户达到最大登陆次数的时间
			    		Date lastLoginErrDate = dto.getLastLoginErrDate();
			    		long minusDate = DateUtil.minusEndDateToStartDate(new Date(), lastLoginErrDate);
			    		// 登陆间隔时间小于规定时间
			    		if(minusDate < Constants.INTERVALMINUTE) {	
			    			System.out.println("请" + Constants.INTERVALMINUTE + "分钟后再登陆!");
			    			num = 2;
			    		} else {	// 达到间隔时间后，登陆失败次数清0，视为第一次登陆
			    			// 此处用户密码处理，该系统无密码
			    			num = 0;
			    			dto.setLoginErrCount(0);
			    			insuranceFormMapper.updateInsuranceFormDTO(dto);
			    		}
			    	} else {		// 登陆失败次数小于最大的登陆次数,更新最后次登陆时间
			    		// 此处用户密码处理，该系统无密码   == 您已经连续登陆失败1次，你还有4次登陆机会
			    		num = 0;
			    		dto.setLastLoginErrDate(new Date());
			    		insuranceFormMapper.updateInsuranceFormDTO(dto);
			    	}					
				}
		    } else {			// 用户不存在
		    	return num;
		    }
		} catch (Exception e) {
			num = 3;			// 其它错误，例如查询用户返回多条
			throw new BusinessServiceException(e);
		}*/
		return 0;
	}	

}
