package com.chinalife.sz.carcalculate.webservice;

        

        /*
        *  VehicleModelQueryServiceV1XStub java implementation
        */


public class VehicleModelQueryServiceV1XStub extends org.apache.axis2.client.Stub
{
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();

    private static int counter = 0;

    private static synchronized String getUniqueSuffix(){
        // reset the counter if it is greater than 99999
        if (counter > 99999){
            counter = 0;
        }
        counter = counter + 1;
        return Long.toString(System.currentTimeMillis()) + "_" + counter;
    }


    private void populateAxisService() throws org.apache.axis2.AxisFault {

        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService("VehicleModelQueryServiceV1X" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[11];

        __operation = new org.apache.axis2.description.OutInAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "getCommonCheck"));
        _service.addOperation(__operation);




        _operations[0]=__operation;


        __operation = new org.apache.axis2.description.OutInAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "getVehicleModelQueryInterface"));
        _service.addOperation(__operation);




        _operations[1]=__operation;


        __operation = new org.apache.axis2.description.OutOnlyAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "setCommonCheck"));
        _service.addOperation(__operation);




        _operations[2]=__operation;


        __operation = new org.apache.axis2.description.OutOnlyAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "setResponsetool"));
        _service.addOperation(__operation);




        _operations[3]=__operation;


        __operation = new org.apache.axis2.description.OutInAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "getConvert"));
        _service.addOperation(__operation);




        _operations[4]=__operation;


        __operation = new org.apache.axis2.description.OutOnlyAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "setVehicleModelQueryInterface"));
        _service.addOperation(__operation);




        _operations[5]=__operation;


        __operation = new org.apache.axis2.description.OutOnlyAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "setRequesttool"));
        _service.addOperation(__operation);




        _operations[6]=__operation;


        __operation = new org.apache.axis2.description.OutInAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "queryCarModelList"));
        _service.addOperation(__operation);




        _operations[7]=__operation;


        __operation = new org.apache.axis2.description.OutInAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "getRequesttool"));
        _service.addOperation(__operation);




        _operations[8]=__operation;


        __operation = new org.apache.axis2.description.OutOnlyAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "setConvert"));
        _service.addOperation(__operation);




        _operations[9]=__operation;


        __operation = new org.apache.axis2.description.OutInAxisOperation();


        __operation.setName(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "getResponsetool"));
        _service.addOperation(__operation);




        _operations[10]=__operation;


    }

    //populates the faults
    private void populateFaults(){



    }

    /**
     *Constructor that takes in a configContext
     */

    public VehicleModelQueryServiceV1XStub(org.apache.axis2.context.ConfigurationContext configurationContext,
                                           String targetEndpoint)
            throws org.apache.axis2.AxisFault {
        this(configurationContext,targetEndpoint,false);
    }


    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public VehicleModelQueryServiceV1XStub(org.apache.axis2.context.ConfigurationContext configurationContext,
                                           String targetEndpoint, boolean useSeparateListener)
            throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);


        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

        //Set the soap version
        _serviceClient.getOptions().setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);


    }

    /**
     * Default Constructor
     */
    public VehicleModelQueryServiceV1XStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {

        this(configurationContext,"http://9.1.121.11:8003/webServiceCenter/services/VehicleModelQueryServiceV1X.VehicleModelQueryServiceV1XHttpSoap12Endpoint/" );

    }

    /**
     * Default Constructor
     */
    public VehicleModelQueryServiceV1XStub() throws org.apache.axis2.AxisFault {

        this("http://9.1.121.11:8003/webServiceCenter/services/VehicleModelQueryServiceV1X.VehicleModelQueryServiceV1XHttpSoap12Endpoint/" );

    }

    /**
     * Constructor taking the target endpoint
     */
    public VehicleModelQueryServiceV1XStub(String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }




    /**
     * Auto generated method signature
     *
     * @see VehicleModelQueryServiceV1X#getCommonCheck
     */



    public  GetCommonCheckResponse getCommonCheck(

    )


            throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try{
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions().setAction("urn:getCommonCheck");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



            addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();



            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            //Style is taken to be "document". No input parameters
            // according to the WS-Basic profile in this case we have to send an empty soap message
            org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
            env = factory.getDefaultEnvelope();

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);


            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                    org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


            Object object = fromOM(
                    _returnEnv.getBody().getFirstElement() ,
                    GetCommonCheckResponse.class,
                    getEnvelopeNamespaces(_returnEnv));


            return (GetCommonCheckResponse)object;

        }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getCommonCheck"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getCommonCheck"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getCommonCheck"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see VehicleModelQueryServiceV1X#startgetCommonCheck
     */
    public  void startgetCommonCheck(



            final VehicleModelQueryServiceV1XCallbackHandler callback)

            throws java.rmi.RemoteException{

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions().setAction("urn:getCommonCheck");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env=null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is taken to be "document". No input parameters
        // according to the WS-Basic profile in this case we have to send an empty soap message
        org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
        env = factory.getDefaultEnvelope();

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            GetCommonCheckResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetCommonCheck(
                            (GetCommonCheckResponse)object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetCommonCheck(e);
                }
            }

            public void onError(Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt!=null){
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getCommonCheck"))){
                            //make the fault by reflection
                            try{
                                String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getCommonCheck"));
                                Class exceptionClass = Class.forName(exceptionClassName);
                                Exception ex = (Exception) exceptionClass.newInstance();
                                //message class
                                String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getCommonCheck"));
                                Class messageClass = Class.forName(messageClassName);
                                Object messageObject = fromOM(faultElt,messageClass,null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new Class[]{messageClass});
                                m.invoke(ex,new Object[]{messageObject});


                                callback.receiveErrorgetCommonCheck(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch(ClassCastException e){
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            } catch (ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            } catch (NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            } catch (IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            } catch (InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetCommonCheck(f);
                            }
                        } else {
                            callback.receiveErrorgetCommonCheck(f);
                        }
                    } else {
                        callback.receiveErrorgetCommonCheck(f);
                    }
                } else {
                    callback.receiveErrorgetCommonCheck(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetCommonCheck(axisFault);
                }
            }
        });


        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     *
     * @see VehicleModelQueryServiceV1X#getVehicleModelQueryInterface
     */



    public  GetVehicleModelQueryInterfaceResponse getVehicleModelQueryInterface(

    )


            throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try{
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions().setAction("urn:getVehicleModelQueryInterface");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



            addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();



            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            //Style is taken to be "document". No input parameters
            // according to the WS-Basic profile in this case we have to send an empty soap message
            org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
            env = factory.getDefaultEnvelope();

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);


            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                    org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


            Object object = fromOM(
                    _returnEnv.getBody().getFirstElement() ,
                    GetVehicleModelQueryInterfaceResponse.class,
                    getEnvelopeNamespaces(_returnEnv));


            return (GetVehicleModelQueryInterfaceResponse)object;

        }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getVehicleModelQueryInterface"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getVehicleModelQueryInterface"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getVehicleModelQueryInterface"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see VehicleModelQueryServiceV1X#startgetVehicleModelQueryInterface
     */
    public  void startgetVehicleModelQueryInterface(



            final VehicleModelQueryServiceV1XCallbackHandler callback)

            throws java.rmi.RemoteException{

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions().setAction("urn:getVehicleModelQueryInterface");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env=null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is taken to be "document". No input parameters
        // according to the WS-Basic profile in this case we have to send an empty soap message
        org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
        env = factory.getDefaultEnvelope();

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            GetVehicleModelQueryInterfaceResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetVehicleModelQueryInterface(
                            (GetVehicleModelQueryInterfaceResponse)object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetVehicleModelQueryInterface(e);
                }
            }

            public void onError(Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt!=null){
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getVehicleModelQueryInterface"))){
                            //make the fault by reflection
                            try{
                                String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getVehicleModelQueryInterface"));
                                Class exceptionClass = Class.forName(exceptionClassName);
                                Exception ex = (Exception) exceptionClass.newInstance();
                                //message class
                                String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getVehicleModelQueryInterface"));
                                Class messageClass = Class.forName(messageClassName);
                                Object messageObject = fromOM(faultElt,messageClass,null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new Class[]{messageClass});
                                m.invoke(ex,new Object[]{messageObject});


                                callback.receiveErrorgetVehicleModelQueryInterface(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch(ClassCastException e){
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            } catch (ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            } catch (NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            } catch (IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            } catch (InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetVehicleModelQueryInterface(f);
                            }
                        } else {
                            callback.receiveErrorgetVehicleModelQueryInterface(f);
                        }
                    } else {
                        callback.receiveErrorgetVehicleModelQueryInterface(f);
                    }
                } else {
                    callback.receiveErrorgetVehicleModelQueryInterface(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetVehicleModelQueryInterface(axisFault);
                }
            }
        });


        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(
                    _callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);

    }


    /**
     * Auto generated method signature
     *
     */
    public void  setCommonCheck(
            SetCommonCheck setCommonCheck9

    ) throws java.rmi.RemoteException


    {
        org.apache.axis2.context.MessageContext _messageContext = null;


        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions().setAction("urn:setCommonCheck");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

        org.apache.axiom.soap.SOAPEnvelope env = null;
        _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is Doc.


        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                setCommonCheck9,
                optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setCommonCheck")),new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setCommonCheck"));


        //adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope

        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.execute(true);


        if (_messageContext.getTransportOut() != null) {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }

        return;
    }


    /**
     * Auto generated method signature
     *
     */
    public void  setResponsetool(
            SetResponsetool setResponsetool10

    ) throws java.rmi.RemoteException


    {
        org.apache.axis2.context.MessageContext _messageContext = null;


        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions().setAction("urn:setResponsetool");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

        org.apache.axiom.soap.SOAPEnvelope env = null;
        _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is Doc.


        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                setResponsetool10,
                optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setResponsetool")),new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setResponsetool"));


        //adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope

        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.execute(true);


        if (_messageContext.getTransportOut() != null) {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }

        return;
    }

    /**
     * Auto generated method signature
     *
     * @see VehicleModelQueryServiceV1X#getConvert
     */



    public  GetConvertResponse getConvert(

    )


            throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try{
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
            _operationClient.getOptions().setAction("urn:getConvert");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



            addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();



            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            //Style is taken to be "document". No input parameters
            // according to the WS-Basic profile in this case we have to send an empty soap message
            org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
            env = factory.getDefaultEnvelope();

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);


            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                    org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


            Object object = fromOM(
                    _returnEnv.getBody().getFirstElement() ,
                    GetConvertResponse.class,
                    getEnvelopeNamespaces(_returnEnv));


            return (GetConvertResponse)object;

        }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getConvert"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getConvert"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getConvert"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see VehicleModelQueryServiceV1X#startgetConvert
     */
    public  void startgetConvert(



            final VehicleModelQueryServiceV1XCallbackHandler callback)

            throws java.rmi.RemoteException{

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
        _operationClient.getOptions().setAction("urn:getConvert");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env=null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is taken to be "document". No input parameters
        // according to the WS-Basic profile in this case we have to send an empty soap message
        org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
        env = factory.getDefaultEnvelope();

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            GetConvertResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetConvert(
                            (GetConvertResponse)object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetConvert(e);
                }
            }

            public void onError(Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt!=null){
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getConvert"))){
                            //make the fault by reflection
                            try{
                                String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getConvert"));
                                Class exceptionClass = Class.forName(exceptionClassName);
                                Exception ex = (Exception) exceptionClass.newInstance();
                                //message class
                                String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getConvert"));
                                Class messageClass = Class.forName(messageClassName);
                                Object messageObject = fromOM(faultElt,messageClass,null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new Class[]{messageClass});
                                m.invoke(ex,new Object[]{messageObject});


                                callback.receiveErrorgetConvert(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch(ClassCastException e){
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            } catch (ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            } catch (NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            } catch (IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            } catch (InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetConvert(f);
                            }
                        } else {
                            callback.receiveErrorgetConvert(f);
                        }
                    } else {
                        callback.receiveErrorgetConvert(f);
                    }
                } else {
                    callback.receiveErrorgetConvert(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetConvert(axisFault);
                }
            }
        });


        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[4].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[4].setMessageReceiver(
                    _callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);

    }


    /**
     * Auto generated method signature
     *
     */
    public void  setVehicleModelQueryInterface(
            SetVehicleModelQueryInterface setVehicleModelQueryInterface13

    ) throws java.rmi.RemoteException


    {
        org.apache.axis2.context.MessageContext _messageContext = null;


        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
        _operationClient.getOptions().setAction("urn:setVehicleModelQueryInterface");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

        org.apache.axiom.soap.SOAPEnvelope env = null;
        _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is Doc.


        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                setVehicleModelQueryInterface13,
                optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setVehicleModelQueryInterface")),new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setVehicleModelQueryInterface"));


        //adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope

        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.execute(true);


        if (_messageContext.getTransportOut() != null) {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }

        return;
    }


    /**
     * Auto generated method signature
     *
     */
    public void  setRequesttool(
            SetRequesttool setRequesttool14

    ) throws java.rmi.RemoteException


    {
        org.apache.axis2.context.MessageContext _messageContext = null;


        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
        _operationClient.getOptions().setAction("urn:setRequesttool");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

        org.apache.axiom.soap.SOAPEnvelope env = null;
        _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is Doc.


        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                setRequesttool14,
                optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setRequesttool")),new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setRequesttool"));


        //adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope

        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.execute(true);


        if (_messageContext.getTransportOut() != null) {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }

        return;
    }

    /**
     * Auto generated method signature
     *
     * @see VehicleModelQueryServiceV1X#queryCarModelList
     * @param queryCarModelList15

     */



    public  QueryCarModelListResponse queryCarModelList(

            QueryCarModelList queryCarModelList15)


            throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try{
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
            _operationClient.getOptions().setAction("urn:queryCarModelList");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



            addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();



            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;


            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                    queryCarModelList15,
                    optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                            "queryCarModelList")), new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                            "queryCarModelList"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);


            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                    org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


            Object object = fromOM(
                    _returnEnv.getBody().getFirstElement() ,
                    QueryCarModelListResponse.class,
                    getEnvelopeNamespaces(_returnEnv));


            return (QueryCarModelListResponse)object;

        }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"queryCarModelList"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"queryCarModelList"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"queryCarModelList"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see VehicleModelQueryServiceV1X#startqueryCarModelList
     * @param queryCarModelList15

     */
    public  void startqueryCarModelList(

            QueryCarModelList queryCarModelList15,

            final VehicleModelQueryServiceV1XCallbackHandler callback)

            throws java.rmi.RemoteException{

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
        _operationClient.getOptions().setAction("urn:queryCarModelList");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env=null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is Doc.


        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                queryCarModelList15,
                optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "queryCarModelList")), new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "queryCarModelList"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            QueryCarModelListResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultqueryCarModelList(
                            (QueryCarModelListResponse)object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorqueryCarModelList(e);
                }
            }

            public void onError(Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt!=null){
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"queryCarModelList"))){
                            //make the fault by reflection
                            try{
                                String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"queryCarModelList"));
                                Class exceptionClass = Class.forName(exceptionClassName);
                                Exception ex = (Exception) exceptionClass.newInstance();
                                //message class
                                String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"queryCarModelList"));
                                Class messageClass = Class.forName(messageClassName);
                                Object messageObject = fromOM(faultElt,messageClass,null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new Class[]{messageClass});
                                m.invoke(ex,new Object[]{messageObject});


                                callback.receiveErrorqueryCarModelList(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch(ClassCastException e){
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            } catch (ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            } catch (NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            } catch (IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            } catch (InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorqueryCarModelList(f);
                            }
                        } else {
                            callback.receiveErrorqueryCarModelList(f);
                        }
                    } else {
                        callback.receiveErrorqueryCarModelList(f);
                    }
                } else {
                    callback.receiveErrorqueryCarModelList(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorqueryCarModelList(axisFault);
                }
            }
        });


        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[7].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[7].setMessageReceiver(
                    _callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);

    }

    /**
     * Auto generated method signature
     *
     * @see VehicleModelQueryServiceV1X#getRequesttool
     */



    public  GetRequesttoolResponse getRequesttool(

    )


            throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try{
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
            _operationClient.getOptions().setAction("urn:getRequesttool");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



            addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();



            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            //Style is taken to be "document". No input parameters
            // according to the WS-Basic profile in this case we have to send an empty soap message
            org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
            env = factory.getDefaultEnvelope();

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);


            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                    org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


            Object object = fromOM(
                    _returnEnv.getBody().getFirstElement() ,
                    GetRequesttoolResponse.class,
                    getEnvelopeNamespaces(_returnEnv));


            return (GetRequesttoolResponse)object;

        }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getRequesttool"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getRequesttool"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getRequesttool"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see VehicleModelQueryServiceV1X#startgetRequesttool
     */
    public  void startgetRequesttool(



            final VehicleModelQueryServiceV1XCallbackHandler callback)

            throws java.rmi.RemoteException{

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
        _operationClient.getOptions().setAction("urn:getRequesttool");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env=null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is taken to be "document". No input parameters
        // according to the WS-Basic profile in this case we have to send an empty soap message
        org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
        env = factory.getDefaultEnvelope();

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            GetRequesttoolResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetRequesttool(
                            (GetRequesttoolResponse)object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetRequesttool(e);
                }
            }

            public void onError(Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt!=null){
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getRequesttool"))){
                            //make the fault by reflection
                            try{
                                String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getRequesttool"));
                                Class exceptionClass = Class.forName(exceptionClassName);
                                Exception ex = (Exception) exceptionClass.newInstance();
                                //message class
                                String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getRequesttool"));
                                Class messageClass = Class.forName(messageClassName);
                                Object messageObject = fromOM(faultElt,messageClass,null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new Class[]{messageClass});
                                m.invoke(ex,new Object[]{messageObject});


                                callback.receiveErrorgetRequesttool(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch(ClassCastException e){
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            } catch (ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            } catch (NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            } catch (IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            } catch (InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetRequesttool(f);
                            }
                        } else {
                            callback.receiveErrorgetRequesttool(f);
                        }
                    } else {
                        callback.receiveErrorgetRequesttool(f);
                    }
                } else {
                    callback.receiveErrorgetRequesttool(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetRequesttool(axisFault);
                }
            }
        });


        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[8].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[8].setMessageReceiver(
                    _callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);

    }


    /**
     * Auto generated method signature
     *
     */
    public void  setConvert(
            SetConvert setConvert19

    ) throws java.rmi.RemoteException


    {
        org.apache.axis2.context.MessageContext _messageContext = null;


        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
        _operationClient.getOptions().setAction("urn:setConvert");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

        org.apache.axiom.soap.SOAPEnvelope env = null;
        _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is Doc.


        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                setConvert19,
                optimizeContent(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setConvert")),new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "setConvert"));


        //adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope

        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.execute(true);


        if (_messageContext.getTransportOut() != null) {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }

        return;
    }

    /**
     * Auto generated method signature
     *
     * @see VehicleModelQueryServiceV1X#getResponsetool
     */



    public  GetResponsetoolResponse getResponsetool(

    )


            throws java.rmi.RemoteException

    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try{
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
            _operationClient.getOptions().setAction("urn:getResponsetool");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



            addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();



            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            //Style is taken to be "document". No input parameters
            // according to the WS-Basic profile in this case we have to send an empty soap message
            org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
            env = factory.getDefaultEnvelope();

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);


            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                    org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


            Object object = fromOM(
                    _returnEnv.getBody().getFirstElement() ,
                    GetResponsetoolResponse.class,
                    getEnvelopeNamespaces(_returnEnv));


            return (GetResponsetoolResponse)object;

        }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getResponsetool"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getResponsetool"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getResponsetool"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see VehicleModelQueryServiceV1X#startgetResponsetool
     */
    public  void startgetResponsetool(



            final VehicleModelQueryServiceV1XCallbackHandler callback)

            throws java.rmi.RemoteException{

        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
        _operationClient.getOptions().setAction("urn:getResponsetool");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



        addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env=null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


        //Style is taken to be "document". No input parameters
        // according to the WS-Basic profile in this case we have to send an empty soap message
        org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
        env = factory.getDefaultEnvelope();

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                try {
                    org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                    Object object = fromOM(resultEnv.getBody().getFirstElement(),
                            GetResponsetoolResponse.class,
                            getEnvelopeNamespaces(resultEnv));
                    callback.receiveResultgetResponsetool(
                            (GetResponsetoolResponse)object);

                } catch (org.apache.axis2.AxisFault e) {
                    callback.receiveErrorgetResponsetool(e);
                }
            }

            public void onError(Exception error) {
                if (error instanceof org.apache.axis2.AxisFault) {
                    org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                    org.apache.axiom.om.OMElement faultElt = f.getDetail();
                    if (faultElt!=null){
                        if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getResponsetool"))){
                            //make the fault by reflection
                            try{
                                String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getResponsetool"));
                                Class exceptionClass = Class.forName(exceptionClassName);
                                Exception ex = (Exception) exceptionClass.newInstance();
                                //message class
                                String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getResponsetool"));
                                Class messageClass = Class.forName(messageClassName);
                                Object messageObject = fromOM(faultElt,messageClass,null);
                                java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                        new Class[]{messageClass});
                                m.invoke(ex,new Object[]{messageObject});


                                callback.receiveErrorgetResponsetool(new java.rmi.RemoteException(ex.getMessage(), ex));
                            } catch(ClassCastException e){
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            } catch (ClassNotFoundException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            } catch (NoSuchMethodException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            } catch (java.lang.reflect.InvocationTargetException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            } catch (IllegalAccessException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            } catch (InstantiationException e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            } catch (org.apache.axis2.AxisFault e) {
                                // we cannot intantiate the class - throw the original Axis fault
                                callback.receiveErrorgetResponsetool(f);
                            }
                        } else {
                            callback.receiveErrorgetResponsetool(f);
                        }
                    } else {
                        callback.receiveErrorgetResponsetool(f);
                    }
                } else {
                    callback.receiveErrorgetResponsetool(error);
                }
            }

            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                onError(fault);
            }

            public void onComplete() {
                try {
                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                } catch (org.apache.axis2.AxisFault axisFault) {
                    callback.receiveErrorgetResponsetool(axisFault);
                }
            }
        });


        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[10].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[10].setMessageReceiver(
                    _callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);

    }



    /**
     *  A utility method that copies the namepaces from the SOAPEnvelope
     */
    private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
        return returnMap;
    }



    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {


        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }
        return false;
    }
    //http://9.1.121.11:8003/webServiceCenter/services/VehicleModelQueryServiceV1X.VehicleModelQueryServiceV1XHttpSoap12Endpoint/
    public static class VehicleModelQueryInterface
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = VehicleModelQueryInterface
                Namespace URI = http://Interface.common.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns6
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://Interface.common.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":VehicleModelQueryInterface",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "VehicleModelQueryInterface",
                            xmlWriter);
                }


            }

            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://Interface.common.webServiceCenter.sinosoft.com/xsd")){
                return "ns6";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();



            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VehicleModelQueryInterface parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                VehicleModelQueryInterface object =
                        new VehicleModelQueryInterface();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"VehicleModelQueryInterface".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (VehicleModelQueryInterface)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TXInsuranceRequestEhm extends TXInsuranceEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceRequestEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for IInsuranceExtensionEhm
         */


        protected IInsuranceExtensionEhm localIInsuranceExtensionEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localIInsuranceExtensionEhmTracker = false ;

        public boolean isIInsuranceExtensionEhmSpecified(){
            return localIInsuranceExtensionEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return IInsuranceExtensionEhm
         */
        public  IInsuranceExtensionEhm getIInsuranceExtensionEhm(){
            return localIInsuranceExtensionEhm;
        }



        /**
         * Auto generated setter method
         * @param param IInsuranceExtensionEhm
         */
        public void setIInsuranceExtensionEhm(IInsuranceExtensionEhm param){
            localIInsuranceExtensionEhmTracker = true;

            this.localIInsuranceExtensionEhm=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


            String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        namespacePrefix+":TXInsuranceRequestEhm",
                        xmlWriter);
            } else {
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        "TXInsuranceRequestEhm",
                        xmlWriter);
            }

            if (localTransExeDateTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transExeDate", xmlWriter);


                if (localTransExeDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransExeDate);

                }

                xmlWriter.writeEndElement();
            } if (localTransExeTimeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transExeTime", xmlWriter);


                if (localTransExeTime==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransExeTime);

                }

                xmlWriter.writeEndElement();
            } if (localTransRefGUIDTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transRefGUID", xmlWriter);


                if (localTransRefGUID==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransRefGUID);

                }

                xmlWriter.writeEndElement();
            } if (localTransSubTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transSubType", xmlWriter);


                if (localTransSubType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransSubType);

                }

                xmlWriter.writeEndElement();
            } if (localTransTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transType", xmlWriter);


                if (localTransType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransType);

                }

                xmlWriter.writeEndElement();
            } if (localIInsuranceExtensionEhmTracker){
                if (localIInsuranceExtensionEhm==null){

                    writeStartElement(null, "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd", "iInsuranceExtensionEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localIInsuranceExtensionEhm.serialize(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","iInsuranceExtensionEhm"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();


            attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
            attribList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","TXInsuranceRequestEhm"));
            if (localTransExeDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transExeDate"));

                elementList.add(localTransExeDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeDate));
            } if (localTransExeTimeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transExeTime"));

                elementList.add(localTransExeTime==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeTime));
            } if (localTransRefGUIDTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transRefGUID"));

                elementList.add(localTransRefGUID==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransRefGUID));
            } if (localTransSubTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transSubType"));

                elementList.add(localTransSubType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransSubType));
            } if (localTransTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transType"));

                elementList.add(localTransType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransType));
            } if (localIInsuranceExtensionEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "iInsuranceExtensionEhm"));


                elementList.add(localIInsuranceExtensionEhm==null?null:
                        localIInsuranceExtensionEhm);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TXInsuranceRequestEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TXInsuranceRequestEhm object =
                        new TXInsuranceRequestEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceRequestEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceRequestEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transExeDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransExeDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transExeTime").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransExeTime(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transRefGUID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransRefGUID(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transSubType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransSubType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","iInsuranceExtensionEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setIInsuranceExtensionEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setIInsuranceExtensionEhm(IInsuranceExtensionEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class CarGrayClaimInfo
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CarGrayClaimInfo
                Namespace URI = http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns3
                */


        /**
         * field for CompanyName
         */


        protected String localCompanyName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCompanyNameTracker = false ;

        public boolean isCompanyNameSpecified(){
            return localCompanyNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCompanyName(){
            return localCompanyName;
        }



        /**
         * Auto generated setter method
         * @param param CompanyName
         */
        public void setCompanyName(String param){
            localCompanyNameTracker = true;

            this.localCompanyName=param;


        }


        /**
         * field for DutyRegistCount
         */


        protected String localDutyRegistCount ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localDutyRegistCountTracker = false ;

        public boolean isDutyRegistCountSpecified(){
            return localDutyRegistCountTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getDutyRegistCount(){
            return localDutyRegistCount;
        }



        /**
         * Auto generated setter method
         * @param param DutyRegistCount
         */
        public void setDutyRegistCount(String param){
            localDutyRegistCountTracker = true;

            this.localDutyRegistCount=param;


        }


        /**
         * field for DutySumpaid
         */


        protected String localDutySumpaid ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localDutySumpaidTracker = false ;

        public boolean isDutySumpaidSpecified(){
            return localDutySumpaidTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getDutySumpaid(){
            return localDutySumpaid;
        }



        /**
         * Auto generated setter method
         * @param param DutySumpaid
         */
        public void setDutySumpaid(String param){
            localDutySumpaidTracker = true;

            this.localDutySumpaid=param;


        }


        /**
         * field for EngineNo
         */


        protected String localEngineNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEngineNoTracker = false ;

        public boolean isEngineNoSpecified(){
            return localEngineNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEngineNo(){
            return localEngineNo;
        }



        /**
         * Auto generated setter method
         * @param param EngineNo
         */
        public void setEngineNo(String param){
            localEngineNoTracker = true;

            this.localEngineNo=param;


        }


        /**
         * field for FrameNo
         */


        protected String localFrameNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFrameNoTracker = false ;

        public boolean isFrameNoSpecified(){
            return localFrameNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFrameNo(){
            return localFrameNo;
        }



        /**
         * Auto generated setter method
         * @param param FrameNo
         */
        public void setFrameNo(String param){
            localFrameNoTracker = true;

            this.localFrameNo=param;


        }


        /**
         * field for LicenseNo
         */


        protected String localLicenseNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLicenseNoTracker = false ;

        public boolean isLicenseNoSpecified(){
            return localLicenseNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLicenseNo(){
            return localLicenseNo;
        }



        /**
         * Auto generated setter method
         * @param param LicenseNo
         */
        public void setLicenseNo(String param){
            localLicenseNoTracker = true;

            this.localLicenseNo=param;


        }


        /**
         * field for LicenseType
         */


        protected String localLicenseType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLicenseTypeTracker = false ;

        public boolean isLicenseTypeSpecified(){
            return localLicenseTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLicenseType(){
            return localLicenseType;
        }



        /**
         * Auto generated setter method
         * @param param LicenseType
         */
        public void setLicenseType(String param){
            localLicenseTypeTracker = true;

            this.localLicenseType=param;


        }


        /**
         * field for NoDutyRegistCount
         */


        protected String localNoDutyRegistCount ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localNoDutyRegistCountTracker = false ;

        public boolean isNoDutyRegistCountSpecified(){
            return localNoDutyRegistCountTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getNoDutyRegistCount(){
            return localNoDutyRegistCount;
        }



        /**
         * Auto generated setter method
         * @param param NoDutyRegistCount
         */
        public void setNoDutyRegistCount(String param){
            localNoDutyRegistCountTracker = true;

            this.localNoDutyRegistCount=param;


        }


        /**
         * field for NoDutySumpaid
         */


        protected String localNoDutySumpaid ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localNoDutySumpaidTracker = false ;

        public boolean isNoDutySumpaidSpecified(){
            return localNoDutySumpaidTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getNoDutySumpaid(){
            return localNoDutySumpaid;
        }



        /**
         * Auto generated setter method
         * @param param NoDutySumpaid
         */
        public void setNoDutySumpaid(String param){
            localNoDutySumpaidTracker = true;

            this.localNoDutySumpaid=param;


        }


        /**
         * field for RiskCode
         */


        protected String localRiskCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRiskCodeTracker = false ;

        public boolean isRiskCodeSpecified(){
            return localRiskCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRiskCode(){
            return localRiskCode;
        }



        /**
         * Auto generated setter method
         * @param param RiskCode
         */
        public void setRiskCode(String param){
            localRiskCodeTracker = true;

            this.localRiskCode=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":CarGrayClaimInfo",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "CarGrayClaimInfo",
                            xmlWriter);
                }


            }
            if (localCompanyNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "companyName", xmlWriter);


                if (localCompanyName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCompanyName);

                }

                xmlWriter.writeEndElement();
            } if (localDutyRegistCountTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "dutyRegistCount", xmlWriter);


                if (localDutyRegistCount==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localDutyRegistCount);

                }

                xmlWriter.writeEndElement();
            } if (localDutySumpaidTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "dutySumpaid", xmlWriter);


                if (localDutySumpaid==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localDutySumpaid);

                }

                xmlWriter.writeEndElement();
            } if (localEngineNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "engineNo", xmlWriter);


                if (localEngineNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEngineNo);

                }

                xmlWriter.writeEndElement();
            } if (localFrameNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "frameNo", xmlWriter);


                if (localFrameNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFrameNo);

                }

                xmlWriter.writeEndElement();
            } if (localLicenseNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "licenseNo", xmlWriter);


                if (localLicenseNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLicenseNo);

                }

                xmlWriter.writeEndElement();
            } if (localLicenseTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "licenseType", xmlWriter);


                if (localLicenseType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLicenseType);

                }

                xmlWriter.writeEndElement();
            } if (localNoDutyRegistCountTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "noDutyRegistCount", xmlWriter);


                if (localNoDutyRegistCount==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localNoDutyRegistCount);

                }

                xmlWriter.writeEndElement();
            } if (localNoDutySumpaidTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "noDutySumpaid", xmlWriter);


                if (localNoDutySumpaid==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localNoDutySumpaid);

                }

                xmlWriter.writeEndElement();
            } if (localRiskCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "riskCode", xmlWriter);


                if (localRiskCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRiskCode);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCompanyNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "companyName"));

                elementList.add(localCompanyName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompanyName));
            } if (localDutyRegistCountTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "dutyRegistCount"));

                elementList.add(localDutyRegistCount==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDutyRegistCount));
            } if (localDutySumpaidTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "dutySumpaid"));

                elementList.add(localDutySumpaid==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDutySumpaid));
            } if (localEngineNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "engineNo"));

                elementList.add(localEngineNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEngineNo));
            } if (localFrameNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "frameNo"));

                elementList.add(localFrameNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrameNo));
            } if (localLicenseNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "licenseNo"));

                elementList.add(localLicenseNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseNo));
            } if (localLicenseTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "licenseType"));

                elementList.add(localLicenseType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseType));
            } if (localNoDutyRegistCountTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "noDutyRegistCount"));

                elementList.add(localNoDutyRegistCount==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoDutyRegistCount));
            } if (localNoDutySumpaidTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "noDutySumpaid"));

                elementList.add(localNoDutySumpaid==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoDutySumpaid));
            } if (localRiskCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "riskCode"));

                elementList.add(localRiskCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskCode));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CarGrayClaimInfo parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                CarGrayClaimInfo object =
                        new CarGrayClaimInfo();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"CarGrayClaimInfo".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CarGrayClaimInfo)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","companyName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCompanyName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","dutyRegistCount").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setDutyRegistCount(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","dutySumpaid").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setDutySumpaid(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","engineNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEngineNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","frameNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFrameNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","licenseNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLicenseNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","licenseType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLicenseType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","noDutyRegistCount").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setNoDutyRegistCount(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","noDutySumpaid").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setNoDutySumpaid(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","riskCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRiskCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GenRequestXMLTools
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = GenRequestXMLTools
                Namespace URI = http://pubTools.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://pubTools.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":GenRequestXMLTools",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "GenRequestXMLTools",
                            xmlWriter);
                }


            }

            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://pubTools.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();



            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GenRequestXMLTools parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GenRequestXMLTools object =
                        new GenRequestXMLTools();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"GenRequestXMLTools".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GenRequestXMLTools)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class SetVehicleModelQueryInterface
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "setVehicleModelQueryInterface",
                "ns8");



        /**
         * field for VehicleModelQueryInterface
         */


        protected VehicleModelQueryInterface localVehicleModelQueryInterface ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleModelQueryInterfaceTracker = false ;

        public boolean isVehicleModelQueryInterfaceSpecified(){
            return localVehicleModelQueryInterfaceTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelQueryInterface
         */
        public  VehicleModelQueryInterface getVehicleModelQueryInterface(){
            return localVehicleModelQueryInterface;
        }



        /**
         * Auto generated setter method
         * @param param VehicleModelQueryInterface
         */
        public void setVehicleModelQueryInterface(VehicleModelQueryInterface param){
            localVehicleModelQueryInterfaceTracker = true;

            this.localVehicleModelQueryInterface=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":setVehicleModelQueryInterface",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "setVehicleModelQueryInterface",
                            xmlWriter);
                }


            }
            if (localVehicleModelQueryInterfaceTracker){
                if (localVehicleModelQueryInterface==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "vehicleModelQueryInterface", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localVehicleModelQueryInterface.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","vehicleModelQueryInterface"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localVehicleModelQueryInterfaceTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "vehicleModelQueryInterface"));


                elementList.add(localVehicleModelQueryInterface==null?null:
                        localVehicleModelQueryInterface);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SetVehicleModelQueryInterface parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                SetVehicleModelQueryInterface object =
                        new SetVehicleModelQueryInterface();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"setVehicleModelQueryInterface".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SetVehicleModelQueryInterface)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","vehicleModelQueryInterface").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setVehicleModelQueryInterface(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setVehicleModelQueryInterface(VehicleModelQueryInterface.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class VehicleModelQueryResponse
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = VehicleModelQueryResponse
                Namespace URI = http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns3
                */


        /**
         * field for AllCount
         */


        protected String localAllCount ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localAllCountTracker = false ;

        public boolean isAllCountSpecified(){
            return localAllCountTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getAllCount(){
            return localAllCount;
        }



        /**
         * Auto generated setter method
         * @param param AllCount
         */
        public void setAllCount(String param){
            localAllCountTracker = true;

            this.localAllCount=param;


        }


        /**
         * field for CarBlackFlag
         */


        protected String localCarBlackFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCarBlackFlagTracker = false ;

        public boolean isCarBlackFlagSpecified(){
            return localCarBlackFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCarBlackFlag(){
            return localCarBlackFlag;
        }



        /**
         * Auto generated setter method
         * @param param CarBlackFlag
         */
        public void setCarBlackFlag(String param){
            localCarBlackFlagTracker = true;

            this.localCarBlackFlag=param;


        }


        /**
         * field for CarGrayClaimArr
         * This was an Array!
         */


        protected CarGrayClaimInfo[] localCarGrayClaimArr ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCarGrayClaimArrTracker = false ;

        public boolean isCarGrayClaimArrSpecified(){
            return localCarGrayClaimArrTracker;
        }



        /**
         * Auto generated getter method
         * @return CarGrayClaimInfo[]
         */
        public  CarGrayClaimInfo[] getCarGrayClaimArr(){
            return localCarGrayClaimArr;
        }






        /**
         * validate the array for CarGrayClaimArr
         */
        protected void validateCarGrayClaimArr(CarGrayClaimInfo[] param){

        }


        /**
         * Auto generated setter method
         * @param param CarGrayClaimArr
         */
        public void setCarGrayClaimArr(CarGrayClaimInfo[] param){

            validateCarGrayClaimArr(param);

            localCarGrayClaimArrTracker = true;

            this.localCarGrayClaimArr=param;
        }



        /**
         * Auto generated add method for the array for convenience
         * @param param CarGrayClaimInfo
         */
        public void addCarGrayClaimArr(CarGrayClaimInfo param){
            if (localCarGrayClaimArr == null){
                localCarGrayClaimArr = new CarGrayClaimInfo[]{};
            }


            //update the setting tracker
            localCarGrayClaimArrTracker = true;


            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localCarGrayClaimArr);
            list.add(param);
            this.localCarGrayClaimArr =
                    (CarGrayClaimInfo[])list.toArray(
                            new CarGrayClaimInfo[list.size()]);

        }


        /**
         * field for CarGrayFlag
         */


        protected String localCarGrayFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCarGrayFlagTracker = false ;

        public boolean isCarGrayFlagSpecified(){
            return localCarGrayFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCarGrayFlag(){
            return localCarGrayFlag;
        }



        /**
         * Auto generated setter method
         * @param param CarGrayFlag
         */
        public void setCarGrayFlag(String param){
            localCarGrayFlagTracker = true;

            this.localCarGrayFlag=param;


        }


        /**
         * field for PolicySort
         */


        protected String localPolicySort ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPolicySortTracker = false ;

        public boolean isPolicySortSpecified(){
            return localPolicySortTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPolicySort(){
            return localPolicySort;
        }



        /**
         * Auto generated setter method
         * @param param PolicySort
         */
        public void setPolicySort(String param){
            localPolicySortTracker = true;

            this.localPolicySort=param;


        }


        /**
         * field for TmbVehicleInfo
         */


        protected TMBVehicleInfo localTmbVehicleInfo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTmbVehicleInfoTracker = false ;

        public boolean isTmbVehicleInfoSpecified(){
            return localTmbVehicleInfoTracker;
        }



        /**
         * Auto generated getter method
         * @return TMBVehicleInfo
         */
        public  TMBVehicleInfo getTmbVehicleInfo(){
            return localTmbVehicleInfo;
        }



        /**
         * Auto generated setter method
         * @param param TmbVehicleInfo
         */
        public void setTmbVehicleInfo(TMBVehicleInfo param){
            localTmbVehicleInfoTracker = true;

            this.localTmbVehicleInfo=param;


        }


        /**
         * field for VehicleModelDataArr
         * This was an Array!
         */


        protected VehicleModelData[] localVehicleModelDataArr ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleModelDataArrTracker = false ;

        public boolean isVehicleModelDataArrSpecified(){
            return localVehicleModelDataArrTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelData[]
         */
        public  VehicleModelData[] getVehicleModelDataArr(){
            return localVehicleModelDataArr;
        }






        /**
         * validate the array for VehicleModelDataArr
         */
        protected void validateVehicleModelDataArr(VehicleModelData[] param){

        }


        /**
         * Auto generated setter method
         * @param param VehicleModelDataArr
         */
        public void setVehicleModelDataArr(VehicleModelData[] param){

            validateVehicleModelDataArr(param);

            localVehicleModelDataArrTracker = true;

            this.localVehicleModelDataArr=param;
        }



        /**
         * Auto generated add method for the array for convenience
         * @param param VehicleModelData
         */
        public void addVehicleModelDataArr(VehicleModelData param){
            if (localVehicleModelDataArr == null){
                localVehicleModelDataArr = new VehicleModelData[]{};
            }


            //update the setting tracker
            localVehicleModelDataArrTracker = true;


            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localVehicleModelDataArr);
            list.add(param);
            this.localVehicleModelDataArr =
                    (VehicleModelData[])list.toArray(
                            new VehicleModelData[list.size()]);

        }


        /**
         * field for TXInsuranceResponseEhm
         */


        protected TXInsuranceResponseEhm localTXInsuranceResponseEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTXInsuranceResponseEhmTracker = false ;

        public boolean isTXInsuranceResponseEhmSpecified(){
            return localTXInsuranceResponseEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return TXInsuranceResponseEhm
         */
        public  TXInsuranceResponseEhm getTXInsuranceResponseEhm(){
            return localTXInsuranceResponseEhm;
        }



        /**
         * Auto generated setter method
         * @param param TXInsuranceResponseEhm
         */
        public void setTXInsuranceResponseEhm(TXInsuranceResponseEhm param){
            localTXInsuranceResponseEhmTracker = true;

            this.localTXInsuranceResponseEhm=param;


        }


        /**
         * field for TXInsuranceResponseExtensionEhm
         */


        protected TXInsuranceResponseExtensionEhm localTXInsuranceResponseExtensionEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTXInsuranceResponseExtensionEhmTracker = false ;

        public boolean isTXInsuranceResponseExtensionEhmSpecified(){
            return localTXInsuranceResponseExtensionEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return TXInsuranceResponseExtensionEhm
         */
        public  TXInsuranceResponseExtensionEhm getTXInsuranceResponseExtensionEhm(){
            return localTXInsuranceResponseExtensionEhm;
        }



        /**
         * Auto generated setter method
         * @param param TXInsuranceResponseExtensionEhm
         */
        public void setTXInsuranceResponseExtensionEhm(TXInsuranceResponseExtensionEhm param){
            localTXInsuranceResponseExtensionEhmTracker = true;

            this.localTXInsuranceResponseExtensionEhm=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":VehicleModelQueryResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "VehicleModelQueryResponse",
                            xmlWriter);
                }


            }
            if (localAllCountTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "allCount", xmlWriter);


                if (localAllCount==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localAllCount);

                }

                xmlWriter.writeEndElement();
            } if (localCarBlackFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "carBlackFlag", xmlWriter);


                if (localCarBlackFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCarBlackFlag);

                }

                xmlWriter.writeEndElement();
            } if (localCarGrayClaimArrTracker){
                if (localCarGrayClaimArr!=null){
                    for (int i = 0;i < localCarGrayClaimArr.length;i++){
                        if (localCarGrayClaimArr[i] != null){
                            localCarGrayClaimArr[i].serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carGrayClaimArr"),
                                    xmlWriter);
                        } else {

                            writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "carGrayClaimArr", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                            xmlWriter.writeEndElement();

                        }

                    }
                } else {

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "carGrayClaimArr", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();

                }
            } if (localCarGrayFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "carGrayFlag", xmlWriter);


                if (localCarGrayFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCarGrayFlag);

                }

                xmlWriter.writeEndElement();
            } if (localPolicySortTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "policySort", xmlWriter);


                if (localPolicySort==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPolicySort);

                }

                xmlWriter.writeEndElement();
            } if (localTmbVehicleInfoTracker){
                if (localTmbVehicleInfo==null){

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "tmbVehicleInfo", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localTmbVehicleInfo.serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tmbVehicleInfo"),
                            xmlWriter);
                }
            } if (localVehicleModelDataArrTracker){
                if (localVehicleModelDataArr!=null){
                    for (int i = 0;i < localVehicleModelDataArr.length;i++){
                        if (localVehicleModelDataArr[i] != null){
                            localVehicleModelDataArr[i].serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleModelDataArr"),
                                    xmlWriter);
                        } else {

                            writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "vehicleModelDataArr", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                            xmlWriter.writeEndElement();

                        }

                    }
                } else {

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "vehicleModelDataArr", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();

                }
            } if (localTXInsuranceResponseEhmTracker){
                if (localTXInsuranceResponseEhm==null){

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "tXInsuranceResponseEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localTXInsuranceResponseEhm.serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseEhm"),
                            xmlWriter);
                }
            } if (localTXInsuranceResponseExtensionEhmTracker){
                if (localTXInsuranceResponseExtensionEhm==null){

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "tXInsuranceResponseExtensionEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localTXInsuranceResponseExtensionEhm.serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseExtensionEhm"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAllCountTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "allCount"));

                elementList.add(localAllCount==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAllCount));
            } if (localCarBlackFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "carBlackFlag"));

                elementList.add(localCarBlackFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCarBlackFlag));
            } if (localCarGrayClaimArrTracker){
                if (localCarGrayClaimArr!=null) {
                    for (int i = 0;i < localCarGrayClaimArr.length;i++){

                        if (localCarGrayClaimArr[i] != null){
                            elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                                    "carGrayClaimArr"));
                            elementList.add(localCarGrayClaimArr[i]);
                        } else {

                            elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                                    "carGrayClaimArr"));
                            elementList.add(null);

                        }

                    }
                } else {

                    elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                            "carGrayClaimArr"));
                    elementList.add(localCarGrayClaimArr);

                }

            } if (localCarGrayFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "carGrayFlag"));

                elementList.add(localCarGrayFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCarGrayFlag));
            } if (localPolicySortTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "policySort"));

                elementList.add(localPolicySort==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolicySort));
            } if (localTmbVehicleInfoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "tmbVehicleInfo"));


                elementList.add(localTmbVehicleInfo==null?null:
                        localTmbVehicleInfo);
            } if (localVehicleModelDataArrTracker){
                if (localVehicleModelDataArr!=null) {
                    for (int i = 0;i < localVehicleModelDataArr.length;i++){

                        if (localVehicleModelDataArr[i] != null){
                            elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                                    "vehicleModelDataArr"));
                            elementList.add(localVehicleModelDataArr[i]);
                        } else {

                            elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                                    "vehicleModelDataArr"));
                            elementList.add(null);

                        }

                    }
                } else {

                    elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                            "vehicleModelDataArr"));
                    elementList.add(localVehicleModelDataArr);

                }

            } if (localTXInsuranceResponseEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "tXInsuranceResponseEhm"));


                elementList.add(localTXInsuranceResponseEhm==null?null:
                        localTXInsuranceResponseEhm);
            } if (localTXInsuranceResponseExtensionEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "tXInsuranceResponseExtensionEhm"));


                elementList.add(localTXInsuranceResponseExtensionEhm==null?null:
                        localTXInsuranceResponseExtensionEhm);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VehicleModelQueryResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                VehicleModelQueryResponse object =
                        new VehicleModelQueryResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"VehicleModelQueryResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (VehicleModelQueryResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    java.util.ArrayList list7 = new java.util.ArrayList();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","allCount").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setAllCount(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carBlackFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCarBlackFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carGrayClaimArr").equals(reader.getName())){



                        // Process the array and step past its final element's end.

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            list3.add(null);
                            reader.next();
                        } else {
                            list3.add(CarGrayClaimInfo.Factory.parse(reader));
                        }
                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;
                        while(!loopDone3){
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            if (reader.isEndElement()){
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carGrayClaimArr").equals(reader.getName())){

                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        list3.add(null);
                                        reader.next();
                                    } else {
                                        list3.add(CarGrayClaimInfo.Factory.parse(reader));
                                    }
                                }else{
                                    loopDone3 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setCarGrayClaimArr((CarGrayClaimInfo[])
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                        CarGrayClaimInfo.class,
                                        list3));

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carGrayFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCarGrayFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","policySort").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPolicySort(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tmbVehicleInfo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setTmbVehicleInfo(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setTmbVehicleInfo(TMBVehicleInfo.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleModelDataArr").equals(reader.getName())){



                        // Process the array and step past its final element's end.

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            list7.add(null);
                            reader.next();
                        } else {
                            list7.add(VehicleModelData.Factory.parse(reader));
                        }
                        //loop until we find a start element that is not part of this array
                        boolean loopDone7 = false;
                        while(!loopDone7){
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            if (reader.isEndElement()){
                                //two continuous end elements means we are exiting the xml structure
                                loopDone7 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleModelDataArr").equals(reader.getName())){

                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        list7.add(null);
                                        reader.next();
                                    } else {
                                        list7.add(VehicleModelData.Factory.parse(reader));
                                    }
                                }else{
                                    loopDone7 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setVehicleModelDataArr((VehicleModelData[])
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                        VehicleModelData.class,
                                        list7));

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setTXInsuranceResponseEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setTXInsuranceResponseEhm(TXInsuranceResponseEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseExtensionEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setTXInsuranceResponseExtensionEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setTXInsuranceResponseExtensionEhm(TXInsuranceResponseExtensionEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class QueryCarModelList
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "queryCarModelList",
                "ns8");



        /**
         * field for Request
         */


        protected VehicleModelQueryRequest localRequest ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRequestTracker = false ;

        public boolean isRequestSpecified(){
            return localRequestTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelQueryRequest
         */
        public  VehicleModelQueryRequest getRequest(){
            return localRequest;
        }



        /**
         * Auto generated setter method
         * @param param Request
         */
        public void setRequest(VehicleModelQueryRequest param){
            localRequestTracker = true;

            this.localRequest=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":queryCarModelList",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "queryCarModelList",
                            xmlWriter);
                }


            }
            if (localRequestTracker){
                if (localRequest==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "request", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localRequest.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","request"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localRequestTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "request"));


                elementList.add(localRequest==null?null:
                        localRequest);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryCarModelList parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                QueryCarModelList object =
                        new QueryCarModelList();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"queryCarModelList".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (QueryCarModelList)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","request").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setRequest(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setRequest(VehicleModelQueryRequest.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class QueryCarModelListResponse
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "queryCarModelListResponse",
                "ns8");



        /**
         * field for _return
         */


        protected VehicleModelQueryResponse local_return ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean local_returnTracker = false ;

        public boolean is_returnSpecified(){
            return local_returnTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelQueryResponse
         */
        public  VehicleModelQueryResponse get_return(){
            return local_return;
        }



        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(VehicleModelQueryResponse param){
            local_returnTracker = true;

            this.local_return=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":queryCarModelListResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "queryCarModelListResponse",
                            xmlWriter);
                }


            }
            if (local_returnTracker){
                if (local_return==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    local_return.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "return"));


                elementList.add(local_return==null?null:
                        local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QueryCarModelListResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                QueryCarModelListResponse object =
                        new QueryCarModelListResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"queryCarModelListResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (QueryCarModelListResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.set_return(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.set_return(VehicleModelQueryResponse.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GetConvertResponse
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "getConvertResponse",
                "ns8");



        /**
         * field for _return
         */


        protected VehicleModelConvert local_return ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean local_returnTracker = false ;

        public boolean is_returnSpecified(){
            return local_returnTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelConvert
         */
        public  VehicleModelConvert get_return(){
            return local_return;
        }



        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(VehicleModelConvert param){
            local_returnTracker = true;

            this.local_return=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":getConvertResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "getConvertResponse",
                            xmlWriter);
                }


            }
            if (local_returnTracker){
                if (local_return==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    local_return.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "return"));


                elementList.add(local_return==null?null:
                        local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetConvertResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GetConvertResponse object =
                        new GetConvertResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getConvertResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetConvertResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.set_return(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.set_return(VehicleModelConvert.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class IInsuranceExtensionEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = IInsuranceExtensionEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for MaxRecords
         */


        protected String localMaxRecords ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localMaxRecordsTracker = false ;

        public boolean isMaxRecordsSpecified(){
            return localMaxRecordsTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getMaxRecords(){
            return localMaxRecords;
        }



        /**
         * Auto generated setter method
         * @param param MaxRecords
         */
        public void setMaxRecords(String param){
            localMaxRecordsTracker = true;

            this.localMaxRecords=param;


        }


        /**
         * field for OrderField
         */


        protected String localOrderField ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localOrderFieldTracker = false ;

        public boolean isOrderFieldSpecified(){
            return localOrderFieldTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getOrderField(){
            return localOrderField;
        }



        /**
         * Auto generated setter method
         * @param param OrderField
         */
        public void setOrderField(String param){
            localOrderFieldTracker = true;

            this.localOrderField=param;


        }


        /**
         * field for OrderFlag
         */


        protected String localOrderFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localOrderFlagTracker = false ;

        public boolean isOrderFlagSpecified(){
            return localOrderFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getOrderFlag(){
            return localOrderFlag;
        }



        /**
         * Auto generated setter method
         * @param param OrderFlag
         */
        public void setOrderFlag(String param){
            localOrderFlagTracker = true;

            this.localOrderFlag=param;


        }


        /**
         * field for PageFlag
         */


        protected String localPageFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPageFlagTracker = false ;

        public boolean isPageFlagSpecified(){
            return localPageFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPageFlag(){
            return localPageFlag;
        }



        /**
         * Auto generated setter method
         * @param param PageFlag
         */
        public void setPageFlag(String param){
            localPageFlagTracker = true;

            this.localPageFlag=param;


        }


        /**
         * field for PageRowNum
         */


        protected String localPageRowNum ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPageRowNumTracker = false ;

        public boolean isPageRowNumSpecified(){
            return localPageRowNumTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPageRowNum(){
            return localPageRowNum;
        }



        /**
         * Auto generated setter method
         * @param param PageRowNum
         */
        public void setPageRowNum(String param){
            localPageRowNumTracker = true;

            this.localPageRowNum=param;


        }


        /**
         * field for RowNumStart
         */


        protected String localRowNumStart ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRowNumStartTracker = false ;

        public boolean isRowNumStartSpecified(){
            return localRowNumStartTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRowNumStart(){
            return localRowNumStart;
        }



        /**
         * Auto generated setter method
         * @param param RowNumStart
         */
        public void setRowNumStart(String param){
            localRowNumStartTracker = true;

            this.localRowNumStart=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":IInsuranceExtensionEhm",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "IInsuranceExtensionEhm",
                            xmlWriter);
                }


            }
            if (localMaxRecordsTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "maxRecords", xmlWriter);


                if (localMaxRecords==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localMaxRecords);

                }

                xmlWriter.writeEndElement();
            } if (localOrderFieldTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "orderField", xmlWriter);


                if (localOrderField==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOrderField);

                }

                xmlWriter.writeEndElement();
            } if (localOrderFlagTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "orderFlag", xmlWriter);


                if (localOrderFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOrderFlag);

                }

                xmlWriter.writeEndElement();
            } if (localPageFlagTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "pageFlag", xmlWriter);


                if (localPageFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPageFlag);

                }

                xmlWriter.writeEndElement();
            } if (localPageRowNumTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "pageRowNum", xmlWriter);


                if (localPageRowNum==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPageRowNum);

                }

                xmlWriter.writeEndElement();
            } if (localRowNumStartTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rowNumStart", xmlWriter);


                if (localRowNumStart==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRowNumStart);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localMaxRecordsTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "maxRecords"));

                elementList.add(localMaxRecords==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRecords));
            } if (localOrderFieldTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "orderField"));

                elementList.add(localOrderField==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrderField));
            } if (localOrderFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "orderFlag"));

                elementList.add(localOrderFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrderFlag));
            } if (localPageFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "pageFlag"));

                elementList.add(localPageFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageFlag));
            } if (localPageRowNumTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "pageRowNum"));

                elementList.add(localPageRowNum==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageRowNum));
            } if (localRowNumStartTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "rowNumStart"));

                elementList.add(localRowNumStart==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRowNumStart));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static IInsuranceExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                IInsuranceExtensionEhm object =
                        new IInsuranceExtensionEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"IInsuranceExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (IInsuranceExtensionEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","maxRecords").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setMaxRecords(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","orderField").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOrderField(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","orderFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOrderFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","pageFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPageFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","pageRowNum").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPageRowNum(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","rowNumStart").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRowNumStart(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GetRequesttoolResponse
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "getRequesttoolResponse",
                "ns8");



        /**
         * field for _return
         */


        protected GenRequestXMLTools local_return ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean local_returnTracker = false ;

        public boolean is_returnSpecified(){
            return local_returnTracker;
        }



        /**
         * Auto generated getter method
         * @return GenRequestXMLTools
         */
        public  GenRequestXMLTools get_return(){
            return local_return;
        }



        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(GenRequestXMLTools param){
            local_returnTracker = true;

            this.local_return=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":getRequesttoolResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "getRequesttoolResponse",
                            xmlWriter);
                }


            }
            if (local_returnTracker){
                if (local_return==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    local_return.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "return"));


                elementList.add(local_return==null?null:
                        local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetRequesttoolResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GetRequesttoolResponse object =
                        new GetRequesttoolResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getRequesttoolResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetRequesttoolResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.set_return(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.set_return(GenRequestXMLTools.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GetVehicleModelQueryInterfaceResponse
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "getVehicleModelQueryInterfaceResponse",
                "ns8");



        /**
         * field for _return
         */


        protected VehicleModelQueryInterface local_return ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean local_returnTracker = false ;

        public boolean is_returnSpecified(){
            return local_returnTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelQueryInterface
         */
        public  VehicleModelQueryInterface get_return(){
            return local_return;
        }



        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(VehicleModelQueryInterface param){
            local_returnTracker = true;

            this.local_return=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":getVehicleModelQueryInterfaceResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "getVehicleModelQueryInterfaceResponse",
                            xmlWriter);
                }


            }
            if (local_returnTracker){
                if (local_return==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    local_return.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "return"));


                elementList.add(local_return==null?null:
                        local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetVehicleModelQueryInterfaceResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GetVehicleModelQueryInterfaceResponse object =
                        new GetVehicleModelQueryInterfaceResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getVehicleModelQueryInterfaceResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetVehicleModelQueryInterfaceResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.set_return(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.set_return(VehicleModelQueryInterface.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TXInsuranceResponseExtensionEhm extends TXInsuranceExtensionEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceResponseExtensionEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


            String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        namespacePrefix+":TXInsuranceResponseExtensionEhm",
                        xmlWriter);
            } else {
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        "TXInsuranceResponseExtensionEhm",
                        xmlWriter);
            }

            if (localOperatorTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "operator", xmlWriter);


                if (localOperator==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOperator);

                }

                xmlWriter.writeEndElement();
            } if (localOperatorKeyTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "operatorKey", xmlWriter);


                if (localOperatorKey==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOperatorKey);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();


            attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
            attribList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","TXInsuranceResponseExtensionEhm"));
            if (localOperatorTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "operator"));

                elementList.add(localOperator==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
            } if (localOperatorKeyTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "operatorKey"));

                elementList.add(localOperatorKey==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperatorKey));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TXInsuranceResponseExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TXInsuranceResponseExtensionEhm object =
                        new TXInsuranceResponseExtensionEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceResponseExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceResponseExtensionEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOperator(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","operatorKey").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOperatorKey(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class CommonCheckEbusiness
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CommonCheckEbusiness
                Namespace URI = http://ebusinessCheck.check.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns2
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://ebusinessCheck.check.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":CommonCheckEbusiness",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "CommonCheckEbusiness",
                            xmlWriter);
                }


            }

            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://ebusinessCheck.check.webServiceCenter.sinosoft.com/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();



            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CommonCheckEbusiness parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                CommonCheckEbusiness object =
                        new CommonCheckEbusiness();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"CommonCheckEbusiness".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CommonCheckEbusiness)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TXInsuranceResponseEhm extends TXInsuranceEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceResponseEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for TransResultEhm
         */


        protected TransResultEhm localTransResultEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransResultEhmTracker = false ;

        public boolean isTransResultEhmSpecified(){
            return localTransResultEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return TransResultEhm
         */
        public  TransResultEhm getTransResultEhm(){
            return localTransResultEhm;
        }



        /**
         * Auto generated setter method
         * @param param TransResultEhm
         */
        public void setTransResultEhm(TransResultEhm param){
            localTransResultEhmTracker = true;

            this.localTransResultEhm=param;


        }


        /**
         * field for OInsuranceExtensionEhm
         */


        protected OInsuranceExtensionEhm localOInsuranceExtensionEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localOInsuranceExtensionEhmTracker = false ;

        public boolean isOInsuranceExtensionEhmSpecified(){
            return localOInsuranceExtensionEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return OInsuranceExtensionEhm
         */
        public  OInsuranceExtensionEhm getOInsuranceExtensionEhm(){
            return localOInsuranceExtensionEhm;
        }



        /**
         * Auto generated setter method
         * @param param OInsuranceExtensionEhm
         */
        public void setOInsuranceExtensionEhm(OInsuranceExtensionEhm param){
            localOInsuranceExtensionEhmTracker = true;

            this.localOInsuranceExtensionEhm=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


            String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        namespacePrefix+":TXInsuranceResponseEhm",
                        xmlWriter);
            } else {
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        "TXInsuranceResponseEhm",
                        xmlWriter);
            }

            if (localTransExeDateTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transExeDate", xmlWriter);


                if (localTransExeDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransExeDate);

                }

                xmlWriter.writeEndElement();
            } if (localTransExeTimeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transExeTime", xmlWriter);


                if (localTransExeTime==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransExeTime);

                }

                xmlWriter.writeEndElement();
            } if (localTransRefGUIDTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transRefGUID", xmlWriter);


                if (localTransRefGUID==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransRefGUID);

                }

                xmlWriter.writeEndElement();
            } if (localTransSubTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transSubType", xmlWriter);


                if (localTransSubType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransSubType);

                }

                xmlWriter.writeEndElement();
            } if (localTransTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transType", xmlWriter);


                if (localTransType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransType);

                }

                xmlWriter.writeEndElement();
            } if (localTransResultEhmTracker){
                if (localTransResultEhm==null){

                    writeStartElement(null, "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd", "transResultEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localTransResultEhm.serialize(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transResultEhm"),
                            xmlWriter);
                }
            } if (localOInsuranceExtensionEhmTracker){
                if (localOInsuranceExtensionEhm==null){

                    writeStartElement(null, "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd", "oInsuranceExtensionEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localOInsuranceExtensionEhm.serialize(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","oInsuranceExtensionEhm"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();


            attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
            attribList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","TXInsuranceResponseEhm"));
            if (localTransExeDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transExeDate"));

                elementList.add(localTransExeDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeDate));
            } if (localTransExeTimeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transExeTime"));

                elementList.add(localTransExeTime==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeTime));
            } if (localTransRefGUIDTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transRefGUID"));

                elementList.add(localTransRefGUID==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransRefGUID));
            } if (localTransSubTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transSubType"));

                elementList.add(localTransSubType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransSubType));
            } if (localTransTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transType"));

                elementList.add(localTransType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransType));
            } if (localTransResultEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transResultEhm"));


                elementList.add(localTransResultEhm==null?null:
                        localTransResultEhm);
            } if (localOInsuranceExtensionEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "oInsuranceExtensionEhm"));


                elementList.add(localOInsuranceExtensionEhm==null?null:
                        localOInsuranceExtensionEhm);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TXInsuranceResponseEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TXInsuranceResponseEhm object =
                        new TXInsuranceResponseEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceResponseEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceResponseEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transExeDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransExeDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transExeTime").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransExeTime(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transRefGUID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransRefGUID(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transSubType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransSubType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transResultEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setTransResultEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setTransResultEhm(TransResultEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","oInsuranceExtensionEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setOInsuranceExtensionEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setOInsuranceExtensionEhm(OInsuranceExtensionEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class VehicleModelConvert
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = VehicleModelConvert
                Namespace URI = http://convert.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns7
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://convert.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":VehicleModelConvert",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "VehicleModelConvert",
                            xmlWriter);
                }


            }

            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://convert.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns7";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();



            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VehicleModelConvert parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                VehicleModelConvert object =
                        new VehicleModelConvert();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"VehicleModelConvert".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (VehicleModelConvert)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class VehicleModelQueryRequest
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = VehicleModelQueryRequest
                Namespace URI = http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns3
                */


        /**
         * field for AgentCode
         */


        protected String localAgentCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localAgentCodeTracker = false ;

        public boolean isAgentCodeSpecified(){
            return localAgentCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getAgentCode(){
            return localAgentCode;
        }



        /**
         * Auto generated setter method
         * @param param AgentCode
         */
        public void setAgentCode(String param){
            localAgentCodeTracker = true;

            this.localAgentCode=param;


        }


        /**
         * field for BrandName
         */


        protected String localBrandName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localBrandNameTracker = false ;

        public boolean isBrandNameSpecified(){
            return localBrandNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getBrandName(){
            return localBrandName;
        }



        /**
         * Auto generated setter method
         * @param param BrandName
         */
        public void setBrandName(String param){
            localBrandNameTracker = true;

            this.localBrandName=param;


        }


        /**
         * field for BusiStartDate
         */


        protected String localBusiStartDate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localBusiStartDateTracker = false ;

        public boolean isBusiStartDateSpecified(){
            return localBusiStartDateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getBusiStartDate(){
            return localBusiStartDate;
        }



        /**
         * Auto generated setter method
         * @param param BusiStartDate
         */
        public void setBusiStartDate(String param){
            localBusiStartDateTracker = true;

            this.localBusiStartDate=param;


        }


        /**
         * field for BusinessNature
         */


        protected String localBusinessNature ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localBusinessNatureTracker = false ;

        public boolean isBusinessNatureSpecified(){
            return localBusinessNatureTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getBusinessNature(){
            return localBusinessNature;
        }



        /**
         * Auto generated setter method
         * @param param BusinessNature
         */
        public void setBusinessNature(String param){
            localBusinessNatureTracker = true;

            this.localBusinessNature=param;


        }


        /**
         * field for CarKindCode
         */


        protected String localCarKindCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCarKindCodeTracker = false ;

        public boolean isCarKindCodeSpecified(){
            return localCarKindCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCarKindCode(){
            return localCarKindCode;
        }



        /**
         * Auto generated setter method
         * @param param CarKindCode
         */
        public void setCarKindCode(String param){
            localCarKindCodeTracker = true;

            this.localCarKindCode=param;


        }


        /**
         * field for ClauseType
         */


        protected String localClauseType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localClauseTypeTracker = false ;

        public boolean isClauseTypeSpecified(){
            return localClauseTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getClauseType(){
            return localClauseType;
        }



        /**
         * Auto generated setter method
         * @param param ClauseType
         */
        public void setClauseType(String param){
            localClauseTypeTracker = true;

            this.localClauseType=param;


        }


        /**
         * field for ComCode
         */


        protected String localComCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localComCodeTracker = false ;

        public boolean isComCodeSpecified(){
            return localComCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getComCode(){
            return localComCode;
        }



        /**
         * Auto generated setter method
         * @param param ComCode
         */
        public void setComCode(String param){
            localComCodeTracker = true;

            this.localComCode=param;


        }


        /**
         * field for CompanyName
         */


        protected String localCompanyName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCompanyNameTracker = false ;

        public boolean isCompanyNameSpecified(){
            return localCompanyNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCompanyName(){
            return localCompanyName;
        }



        /**
         * Auto generated setter method
         * @param param CompanyName
         */
        public void setCompanyName(String param){
            localCompanyNameTracker = true;

            this.localCompanyName=param;


        }


        /**
         * field for EcdemicVehicleFlag
         */


        protected String localEcdemicVehicleFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEcdemicVehicleFlagTracker = false ;

        public boolean isEcdemicVehicleFlagSpecified(){
            return localEcdemicVehicleFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEcdemicVehicleFlag(){
            return localEcdemicVehicleFlag;
        }



        /**
         * Auto generated setter method
         * @param param EcdemicVehicleFlag
         */
        public void setEcdemicVehicleFlag(String param){
            localEcdemicVehicleFlagTracker = true;

            this.localEcdemicVehicleFlag=param;


        }


        /**
         * field for EnginNo
         */


        protected String localEnginNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEnginNoTracker = false ;

        public boolean isEnginNoSpecified(){
            return localEnginNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEnginNo(){
            return localEnginNo;
        }



        /**
         * Auto generated setter method
         * @param param EnginNo
         */
        public void setEnginNo(String param){
            localEnginNoTracker = true;

            this.localEnginNo=param;


        }


        /**
         * field for EnrollDate
         */


        protected String localEnrollDate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEnrollDateTracker = false ;

        public boolean isEnrollDateSpecified(){
            return localEnrollDateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEnrollDate(){
            return localEnrollDate;
        }



        /**
         * Auto generated setter method
         * @param param EnrollDate
         */
        public void setEnrollDate(String param){
            localEnrollDateTracker = true;

            this.localEnrollDate=param;


        }


        /**
         * field for FamilyName
         */


        protected String localFamilyName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFamilyNameTracker = false ;

        public boolean isFamilyNameSpecified(){
            return localFamilyNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFamilyName(){
            return localFamilyName;
        }



        /**
         * Auto generated setter method
         * @param param FamilyName
         */
        public void setFamilyName(String param){
            localFamilyNameTracker = true;

            this.localFamilyName=param;


        }


        /**
         * field for FrameNo
         */


        protected String localFrameNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFrameNoTracker = false ;

        public boolean isFrameNoSpecified(){
            return localFrameNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFrameNo(){
            return localFrameNo;
        }



        /**
         * Auto generated setter method
         * @param param FrameNo
         */
        public void setFrameNo(String param){
            localFrameNoTracker = true;

            this.localFrameNo=param;


        }


        /**
         * field for ImportFlag
         */


        protected String localImportFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localImportFlagTracker = false ;

        public boolean isImportFlagSpecified(){
            return localImportFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getImportFlag(){
            return localImportFlag;
        }



        /**
         * Auto generated setter method
         * @param param ImportFlag
         */
        public void setImportFlag(String param){
            localImportFlagTracker = true;

            this.localImportFlag=param;


        }


        /**
         * field for LicenseNo
         */


        protected String localLicenseNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLicenseNoTracker = false ;

        public boolean isLicenseNoSpecified(){
            return localLicenseNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLicenseNo(){
            return localLicenseNo;
        }



        /**
         * Auto generated setter method
         * @param param LicenseNo
         */
        public void setLicenseNo(String param){
            localLicenseNoTracker = true;

            this.localLicenseNo=param;


        }


        /**
         * field for LicenseType
         */


        protected String localLicenseType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLicenseTypeTracker = false ;

        public boolean isLicenseTypeSpecified(){
            return localLicenseTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLicenseType(){
            return localLicenseType;
        }



        /**
         * Auto generated setter method
         * @param param LicenseType
         */
        public void setLicenseType(String param){
            localLicenseTypeTracker = true;

            this.localLicenseType=param;


        }


        /**
         * field for LocalModelQueryFlag
         */


        protected String localLocalModelQueryFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLocalModelQueryFlagTracker = false ;

        public boolean isLocalModelQueryFlagSpecified(){
            return localLocalModelQueryFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLocalModelQueryFlag(){
            return localLocalModelQueryFlag;
        }



        /**
         * Auto generated setter method
         * @param param LocalModelQueryFlag
         */
        public void setLocalModelQueryFlag(String param){
            localLocalModelQueryFlagTracker = true;

            this.localLocalModelQueryFlag=param;


        }


        /**
         * field for NewVehicleFlag
         */


        protected String localNewVehicleFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localNewVehicleFlagTracker = false ;

        public boolean isNewVehicleFlagSpecified(){
            return localNewVehicleFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getNewVehicleFlag(){
            return localNewVehicleFlag;
        }



        /**
         * Auto generated setter method
         * @param param NewVehicleFlag
         */
        public void setNewVehicleFlag(String param){
            localNewVehicleFlagTracker = true;

            this.localNewVehicleFlag=param;


        }


        /**
         * field for PolicySort
         */


        protected String localPolicySort ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPolicySortTracker = false ;

        public boolean isPolicySortSpecified(){
            return localPolicySortTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPolicySort(){
            return localPolicySort;
        }



        /**
         * Auto generated setter method
         * @param param PolicySort
         */
        public void setPolicySort(String param){
            localPolicySortTracker = true;

            this.localPolicySort=param;


        }


        /**
         * field for RelationFlag
         */


        protected String localRelationFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRelationFlagTracker = false ;

        public boolean isRelationFlagSpecified(){
            return localRelationFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRelationFlag(){
            return localRelationFlag;
        }



        /**
         * Auto generated setter method
         * @param param RelationFlag
         */
        public void setRelationFlag(String param){
            localRelationFlagTracker = true;

            this.localRelationFlag=param;


        }


        /**
         * field for SalesChannelCode
         */


        protected String localSalesChannelCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSalesChannelCodeTracker = false ;

        public boolean isSalesChannelCodeSpecified(){
            return localSalesChannelCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSalesChannelCode(){
            return localSalesChannelCode;
        }



        /**
         * Auto generated setter method
         * @param param SalesChannelCode
         */
        public void setSalesChannelCode(String param){
            localSalesChannelCodeTracker = true;

            this.localSalesChannelCode=param;


        }


        /**
         * field for SearchCode
         */


        protected String localSearchCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSearchCodeTracker = false ;

        public boolean isSearchCodeSpecified(){
            return localSearchCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSearchCode(){
            return localSearchCode;
        }



        /**
         * Auto generated setter method
         * @param param SearchCode
         */
        public void setSearchCode(String param){
            localSearchCodeTracker = true;

            this.localSearchCode=param;


        }


        /**
         * field for StandardName
         */


        protected String localStandardName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localStandardNameTracker = false ;

        public boolean isStandardNameSpecified(){
            return localStandardNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getStandardName(){
            return localStandardName;
        }



        /**
         * Auto generated setter method
         * @param param StandardName
         */
        public void setStandardName(String param){
            localStandardNameTracker = true;

            this.localStandardName=param;


        }


        /**
         * field for TmkFlag
         */


        protected String localTmkFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTmkFlagTracker = false ;

        public boolean isTmkFlagSpecified(){
            return localTmkFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTmkFlag(){
            return localTmkFlag;
        }



        /**
         * Auto generated setter method
         * @param param TmkFlag
         */
        public void setTmkFlag(String param){
            localTmkFlagTracker = true;

            this.localTmkFlag=param;


        }


        /**
         * field for UseNatureCode
         */


        protected String localUseNatureCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localUseNatureCodeTracker = false ;

        public boolean isUseNatureCodeSpecified(){
            return localUseNatureCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getUseNatureCode(){
            return localUseNatureCode;
        }



        /**
         * Auto generated setter method
         * @param param UseNatureCode
         */
        public void setUseNatureCode(String param){
            localUseNatureCodeTracker = true;

            this.localUseNatureCode=param;


        }


        /**
         * field for VehicleBrand1
         */


        protected String localVehicleBrand1 ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleBrand1Tracker = false ;

        public boolean isVehicleBrand1Specified(){
            return localVehicleBrand1Tracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleBrand1(){
            return localVehicleBrand1;
        }



        /**
         * Auto generated setter method
         * @param param VehicleBrand1
         */
        public void setVehicleBrand1(String param){
            localVehicleBrand1Tracker = true;

            this.localVehicleBrand1=param;


        }


        /**
         * field for VehicleClass
         */


        protected String localVehicleClass ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleClassTracker = false ;

        public boolean isVehicleClassSpecified(){
            return localVehicleClassTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleClass(){
            return localVehicleClass;
        }



        /**
         * Auto generated setter method
         * @param param VehicleClass
         */
        public void setVehicleClass(String param){
            localVehicleClassTracker = true;

            this.localVehicleClass=param;


        }


        /**
         * field for VehicleStyleDesc
         */


        protected String localVehicleStyleDesc ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleStyleDescTracker = false ;

        public boolean isVehicleStyleDescSpecified(){
            return localVehicleStyleDescTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleStyleDesc(){
            return localVehicleStyleDesc;
        }



        /**
         * Auto generated setter method
         * @param param VehicleStyleDesc
         */
        public void setVehicleStyleDesc(String param){
            localVehicleStyleDescTracker = true;

            this.localVehicleStyleDesc=param;


        }


        /**
         * field for VinCode
         */


        protected String localVinCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVinCodeTracker = false ;

        public boolean isVinCodeSpecified(){
            return localVinCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVinCode(){
            return localVinCode;
        }



        /**
         * Auto generated setter method
         * @param param VinCode
         */
        public void setVinCode(String param){
            localVinCodeTracker = true;

            this.localVinCode=param;


        }


        /**
         * field for RBCode
         */


        protected String localRBCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRBCodeTracker = false ;

        public boolean isRBCodeSpecified(){
            return localRBCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRBCode(){
            return localRBCode;
        }



        /**
         * Auto generated setter method
         * @param param RBCode
         */
        public void setRBCode(String param){
            localRBCodeTracker = true;

            this.localRBCode=param;


        }


        /**
         * field for TXInsuranceRequestEhm
         */


        protected TXInsuranceRequestEhm localTXInsuranceRequestEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTXInsuranceRequestEhmTracker = false ;

        public boolean isTXInsuranceRequestEhmSpecified(){
            return localTXInsuranceRequestEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return TXInsuranceRequestEhm
         */
        public  TXInsuranceRequestEhm getTXInsuranceRequestEhm(){
            return localTXInsuranceRequestEhm;
        }



        /**
         * Auto generated setter method
         * @param param TXInsuranceRequestEhm
         */
        public void setTXInsuranceRequestEhm(TXInsuranceRequestEhm param){
            localTXInsuranceRequestEhmTracker = true;

            this.localTXInsuranceRequestEhm=param;


        }


        /**
         * field for TXInsuranceRequestExtensionEhm
         */


        protected TXInsuranceRequestExtensionEhm localTXInsuranceRequestExtensionEhm ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTXInsuranceRequestExtensionEhmTracker = false ;

        public boolean isTXInsuranceRequestExtensionEhmSpecified(){
            return localTXInsuranceRequestExtensionEhmTracker;
        }



        /**
         * Auto generated getter method
         * @return TXInsuranceRequestExtensionEhm
         */
        public  TXInsuranceRequestExtensionEhm getTXInsuranceRequestExtensionEhm(){
            return localTXInsuranceRequestExtensionEhm;
        }



        /**
         * Auto generated setter method
         * @param param TXInsuranceRequestExtensionEhm
         */
        public void setTXInsuranceRequestExtensionEhm(TXInsuranceRequestExtensionEhm param){
            localTXInsuranceRequestExtensionEhmTracker = true;

            this.localTXInsuranceRequestExtensionEhm=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":VehicleModelQueryRequest",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "VehicleModelQueryRequest",
                            xmlWriter);
                }


            }
            if (localAgentCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "agentCode", xmlWriter);


                if (localAgentCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localAgentCode);

                }

                xmlWriter.writeEndElement();
            } if (localBrandNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "brandName", xmlWriter);


                if (localBrandName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localBrandName);

                }

                xmlWriter.writeEndElement();
            } if (localBusiStartDateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "busiStartDate", xmlWriter);


                if (localBusiStartDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localBusiStartDate);

                }

                xmlWriter.writeEndElement();
            } if (localBusinessNatureTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "businessNature", xmlWriter);


                if (localBusinessNature==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localBusinessNature);

                }

                xmlWriter.writeEndElement();
            } if (localCarKindCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "carKindCode", xmlWriter);


                if (localCarKindCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCarKindCode);

                }

                xmlWriter.writeEndElement();
            } if (localClauseTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "clauseType", xmlWriter);


                if (localClauseType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localClauseType);

                }

                xmlWriter.writeEndElement();
            } if (localComCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "comCode", xmlWriter);


                if (localComCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localComCode);

                }

                xmlWriter.writeEndElement();
            } if (localCompanyNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "companyName", xmlWriter);


                if (localCompanyName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCompanyName);

                }

                xmlWriter.writeEndElement();
            } if (localEcdemicVehicleFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "ecdemicVehicleFlag", xmlWriter);


                if (localEcdemicVehicleFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEcdemicVehicleFlag);

                }

                xmlWriter.writeEndElement();
            } if (localEnginNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "enginNo", xmlWriter);


                if (localEnginNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEnginNo);

                }

                xmlWriter.writeEndElement();
            } if (localEnrollDateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "enrollDate", xmlWriter);


                if (localEnrollDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEnrollDate);

                }

                xmlWriter.writeEndElement();
            } if (localFamilyNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "familyName", xmlWriter);


                if (localFamilyName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFamilyName);

                }

                xmlWriter.writeEndElement();
            } if (localFrameNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "frameNo", xmlWriter);


                if (localFrameNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFrameNo);

                }

                xmlWriter.writeEndElement();
            } if (localImportFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "importFlag", xmlWriter);


                if (localImportFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localImportFlag);

                }

                xmlWriter.writeEndElement();
            } if (localLicenseNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "licenseNo", xmlWriter);


                if (localLicenseNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLicenseNo);

                }

                xmlWriter.writeEndElement();
            } if (localLicenseTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "licenseType", xmlWriter);


                if (localLicenseType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLicenseType);

                }

                xmlWriter.writeEndElement();
            } if (localLocalModelQueryFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "localModelQueryFlag", xmlWriter);


                if (localLocalModelQueryFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLocalModelQueryFlag);

                }

                xmlWriter.writeEndElement();
            } if (localNewVehicleFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "newVehicleFlag", xmlWriter);


                if (localNewVehicleFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localNewVehicleFlag);

                }

                xmlWriter.writeEndElement();
            } if (localPolicySortTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "policySort", xmlWriter);


                if (localPolicySort==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPolicySort);

                }

                xmlWriter.writeEndElement();
            } if (localRelationFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "relationFlag", xmlWriter);


                if (localRelationFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRelationFlag);

                }

                xmlWriter.writeEndElement();
            } if (localSalesChannelCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "salesChannelCode", xmlWriter);


                if (localSalesChannelCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSalesChannelCode);

                }

                xmlWriter.writeEndElement();
            } if (localSearchCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "searchCode", xmlWriter);


                if (localSearchCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSearchCode);

                }

                xmlWriter.writeEndElement();
            } if (localStandardNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "standardName", xmlWriter);


                if (localStandardName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localStandardName);

                }

                xmlWriter.writeEndElement();
            } if (localTmkFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "tmkFlag", xmlWriter);


                if (localTmkFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTmkFlag);

                }

                xmlWriter.writeEndElement();
            } if (localUseNatureCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "useNatureCode", xmlWriter);


                if (localUseNatureCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localUseNatureCode);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleBrand1Tracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleBrand1", xmlWriter);


                if (localVehicleBrand1==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleBrand1);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleClassTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleClass", xmlWriter);


                if (localVehicleClass==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleClass);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleStyleDescTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleStyleDesc", xmlWriter);


                if (localVehicleStyleDesc==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleStyleDesc);

                }

                xmlWriter.writeEndElement();
            } if (localVinCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vinCode", xmlWriter);


                if (localVinCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVinCode);

                }

                xmlWriter.writeEndElement();
            } if (localRBCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rBCode", xmlWriter);


                if (localRBCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRBCode);

                }

                xmlWriter.writeEndElement();
            } if (localTXInsuranceRequestEhmTracker){
                if (localTXInsuranceRequestEhm==null){

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "tXInsuranceRequestEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localTXInsuranceRequestEhm.serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestEhm"),
                            xmlWriter);
                }
            } if (localTXInsuranceRequestExtensionEhmTracker){
                if (localTXInsuranceRequestExtensionEhm==null){

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "tXInsuranceRequestExtensionEhm", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localTXInsuranceRequestExtensionEhm.serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestExtensionEhm"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAgentCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "agentCode"));

                elementList.add(localAgentCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAgentCode));
            } if (localBrandNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "brandName"));

                elementList.add(localBrandName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrandName));
            } if (localBusiStartDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "busiStartDate"));

                elementList.add(localBusiStartDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusiStartDate));
            } if (localBusinessNatureTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "businessNature"));

                elementList.add(localBusinessNature==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusinessNature));
            } if (localCarKindCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "carKindCode"));

                elementList.add(localCarKindCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCarKindCode));
            } if (localClauseTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "clauseType"));

                elementList.add(localClauseType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClauseType));
            } if (localComCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "comCode"));

                elementList.add(localComCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComCode));
            } if (localCompanyNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "companyName"));

                elementList.add(localCompanyName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompanyName));
            } if (localEcdemicVehicleFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "ecdemicVehicleFlag"));

                elementList.add(localEcdemicVehicleFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEcdemicVehicleFlag));
            } if (localEnginNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "enginNo"));

                elementList.add(localEnginNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnginNo));
            } if (localEnrollDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "enrollDate"));

                elementList.add(localEnrollDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnrollDate));
            } if (localFamilyNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "familyName"));

                elementList.add(localFamilyName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFamilyName));
            } if (localFrameNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "frameNo"));

                elementList.add(localFrameNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrameNo));
            } if (localImportFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "importFlag"));

                elementList.add(localImportFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImportFlag));
            } if (localLicenseNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "licenseNo"));

                elementList.add(localLicenseNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseNo));
            } if (localLicenseTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "licenseType"));

                elementList.add(localLicenseType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseType));
            } if (localLocalModelQueryFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "localModelQueryFlag"));

                elementList.add(localLocalModelQueryFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocalModelQueryFlag));
            } if (localNewVehicleFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "newVehicleFlag"));

                elementList.add(localNewVehicleFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNewVehicleFlag));
            } if (localPolicySortTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "policySort"));

                elementList.add(localPolicySort==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolicySort));
            } if (localRelationFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "relationFlag"));

                elementList.add(localRelationFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRelationFlag));
            } if (localSalesChannelCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "salesChannelCode"));

                elementList.add(localSalesChannelCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSalesChannelCode));
            } if (localSearchCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "searchCode"));

                elementList.add(localSearchCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchCode));
            } if (localStandardNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "standardName"));

                elementList.add(localStandardName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStandardName));
            } if (localTmkFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "tmkFlag"));

                elementList.add(localTmkFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTmkFlag));
            } if (localUseNatureCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "useNatureCode"));

                elementList.add(localUseNatureCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUseNatureCode));
            } if (localVehicleBrand1Tracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleBrand1"));

                elementList.add(localVehicleBrand1==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleBrand1));
            } if (localVehicleClassTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleClass"));

                elementList.add(localVehicleClass==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleClass));
            } if (localVehicleStyleDescTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleStyleDesc"));

                elementList.add(localVehicleStyleDesc==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleStyleDesc));
            } if (localVinCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vinCode"));

                elementList.add(localVinCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVinCode));
            } if (localRBCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rBCode"));

                elementList.add(localRBCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRBCode));
            } if (localTXInsuranceRequestEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "tXInsuranceRequestEhm"));


                elementList.add(localTXInsuranceRequestEhm==null?null:
                        localTXInsuranceRequestEhm);
            } if (localTXInsuranceRequestExtensionEhmTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "tXInsuranceRequestExtensionEhm"));


                elementList.add(localTXInsuranceRequestExtensionEhm==null?null:
                        localTXInsuranceRequestExtensionEhm);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VehicleModelQueryRequest parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                VehicleModelQueryRequest object =
                        new VehicleModelQueryRequest();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"VehicleModelQueryRequest".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (VehicleModelQueryRequest)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","agentCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setAgentCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","brandName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setBrandName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","busiStartDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setBusiStartDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","businessNature").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setBusinessNature(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carKindCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCarKindCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","clauseType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setClauseType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","comCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setComCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","companyName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCompanyName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","ecdemicVehicleFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEcdemicVehicleFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","enginNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEnginNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","enrollDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEnrollDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","familyName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFamilyName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","frameNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFrameNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","importFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setImportFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","licenseNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLicenseNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","licenseType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLicenseType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","localModelQueryFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLocalModelQueryFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","newVehicleFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setNewVehicleFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","policySort").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPolicySort(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","relationFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRelationFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","salesChannelCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSalesChannelCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","searchCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSearchCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","standardName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setStandardName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tmkFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTmkFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","useNatureCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setUseNatureCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleBrand1").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleBrand1(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleClass").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleClass(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleStyleDesc").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleStyleDesc(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vinCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVinCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rBCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRBCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setTXInsuranceRequestEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setTXInsuranceRequestEhm(TXInsuranceRequestEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestExtensionEhm").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setTXInsuranceRequestExtensionEhm(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setTXInsuranceRequestExtensionEhm(TXInsuranceRequestExtensionEhm.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class ExtensionMapper{

        public static Object getTypeObject(String namespaceURI,
                                           String typeName,
                                           javax.xml.stream.XMLStreamReader reader) throws Exception{


            if (
                    "http://Interface.common.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "VehicleModelQueryInterface".equals(typeName)){

                return  VehicleModelQueryInterface.Factory.parse(reader);


            }


            if (
                    "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "VehicleModelQueryRequest".equals(typeName)){

                return  VehicleModelQueryRequest.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TXInsuranceRequestEhm".equals(typeName)){

                return  TXInsuranceRequestEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "OInsuranceExtensionEhm".equals(typeName)){

                return  OInsuranceExtensionEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "VehicleModelData".equals(typeName)){

                return  VehicleModelData.Factory.parse(reader);


            }


            if (
                    "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TMBVehicleInfo".equals(typeName)){

                return  TMBVehicleInfo.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TransResultEhm".equals(typeName)){

                return  TransResultEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TXInsuranceExtensionEhm".equals(typeName)){

                return  TXInsuranceExtensionEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "CarGrayClaimInfo".equals(typeName)){

                return  CarGrayClaimInfo.Factory.parse(reader);


            }


            if (
                    "http://pubTools.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "GenRequestXMLTools".equals(typeName)){

                return  GenRequestXMLTools.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TXInsuranceEhm".equals(typeName)){

                return  TXInsuranceEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "VehicleModelQueryResponse".equals(typeName)){

                return  VehicleModelQueryResponse.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "IInsuranceExtensionEhm".equals(typeName)){

                return  IInsuranceExtensionEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TXInsuranceRequestExtensionEhm".equals(typeName)){

                return  TXInsuranceRequestExtensionEhm.Factory.parse(reader);


            }


            if (
                    "http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "CoveragePremiumItem".equals(typeName)){

                return  CoveragePremiumItem.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TXInsuranceResponseExtensionEhm".equals(typeName)){

                return  TXInsuranceResponseExtensionEhm.Factory.parse(reader);


            }


            if (
                    "http://ebusinessCheck.check.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "CommonCheckEbusiness".equals(typeName)){

                return  CommonCheckEbusiness.Factory.parse(reader);


            }


            if (
                    "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "TXInsuranceResponseEhm".equals(typeName)){

                return  TXInsuranceResponseEhm.Factory.parse(reader);


            }


            if (
                    "http://convert.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "VehicleModelConvert".equals(typeName)){

                return  VehicleModelConvert.Factory.parse(reader);


            }


            if (
                    "http://pubTools.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                            "GenResponseXMLTools".equals(typeName)){

                return  GenResponseXMLTools.Factory.parse(reader);


            }


            throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
        }

    }

    public static class OInsuranceExtensionEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OInsuranceExtensionEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for MaxRecords
         */


        protected String localMaxRecords ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localMaxRecordsTracker = false ;

        public boolean isMaxRecordsSpecified(){
            return localMaxRecordsTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getMaxRecords(){
            return localMaxRecords;
        }



        /**
         * Auto generated setter method
         * @param param MaxRecords
         */
        public void setMaxRecords(String param){
            localMaxRecordsTracker = true;

            this.localMaxRecords=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":OInsuranceExtensionEhm",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "OInsuranceExtensionEhm",
                            xmlWriter);
                }


            }
            if (localMaxRecordsTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "maxRecords", xmlWriter);


                if (localMaxRecords==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localMaxRecords);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localMaxRecordsTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "maxRecords"));

                elementList.add(localMaxRecords==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRecords));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static OInsuranceExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                OInsuranceExtensionEhm object =
                        new OInsuranceExtensionEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"OInsuranceExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OInsuranceExtensionEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","maxRecords").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setMaxRecords(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class VehicleModelData
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = VehicleModelData
                Namespace URI = http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns3
                */


        /**
         * field for AbsFlag
         */


        protected String localAbsFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localAbsFlagTracker = false ;

        public boolean isAbsFlagSpecified(){
            return localAbsFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getAbsFlag(){
            return localAbsFlag;
        }



        /**
         * Auto generated setter method
         * @param param AbsFlag
         */
        public void setAbsFlag(String param){
            localAbsFlagTracker = true;

            this.localAbsFlag=param;


        }


        /**
         * field for ActualReferenceValue
         */


        protected double localActualReferenceValue ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localActualReferenceValueTracker = false ;

        public boolean isActualReferenceValueSpecified(){
            return localActualReferenceValueTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getActualReferenceValue(){
            return localActualReferenceValue;
        }



        /**
         * Auto generated setter method
         * @param param ActualReferenceValue
         */
        public void setActualReferenceValue(double param){

            // setting primitive attribute tracker to true
            localActualReferenceValueTracker =
                    !Double.isNaN(param);

            this.localActualReferenceValue=param;


        }


        /**
         * field for ActualValue
         */


        protected double localActualValue ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localActualValueTracker = false ;

        public boolean isActualValueSpecified(){
            return localActualValueTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getActualValue(){
            return localActualValue;
        }



        /**
         * Auto generated setter method
         * @param param ActualValue
         */
        public void setActualValue(double param){

            // setting primitive attribute tracker to true
            localActualValueTracker =
                    !Double.isNaN(param);

            this.localActualValue=param;


        }


        /**
         * field for AirBagNum
         */


        protected double localAirBagNum ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localAirBagNumTracker = false ;

        public boolean isAirBagNumSpecified(){
            return localAirBagNumTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getAirBagNum(){
            return localAirBagNum;
        }



        /**
         * Auto generated setter method
         * @param param AirBagNum
         */
        public void setAirBagNum(double param){

            // setting primitive attribute tracker to true
            localAirBagNumTracker =
                    !Double.isNaN(param);

            this.localAirBagNum=param;


        }


        /**
         * field for AlarmFlag
         */


        protected String localAlarmFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localAlarmFlagTracker = false ;

        public boolean isAlarmFlagSpecified(){
            return localAlarmFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getAlarmFlag(){
            return localAlarmFlag;
        }



        /**
         * Auto generated setter method
         * @param param AlarmFlag
         */
        public void setAlarmFlag(String param){
            localAlarmFlagTracker = true;

            this.localAlarmFlag=param;


        }


        /**
         * field for Batholith
         */


        protected String localBatholith ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localBatholithTracker = false ;

        public boolean isBatholithSpecified(){
            return localBatholithTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getBatholith(){
            return localBatholith;
        }



        /**
         * Auto generated setter method
         * @param param Batholith
         */
        public void setBatholith(String param){
            localBatholithTracker = true;

            this.localBatholith=param;


        }


        /**
         * field for BrandCode
         */


        protected String localBrandCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localBrandCodeTracker = false ;

        public boolean isBrandCodeSpecified(){
            return localBrandCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getBrandCode(){
            return localBrandCode;
        }



        /**
         * Auto generated setter method
         * @param param BrandCode
         */
        public void setBrandCode(String param){
            localBrandCodeTracker = true;

            this.localBrandCode=param;


        }


        /**
         * field for BrandName
         */


        protected String localBrandName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localBrandNameTracker = false ;

        public boolean isBrandNameSpecified(){
            return localBrandNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getBrandName(){
            return localBrandName;
        }



        /**
         * Auto generated setter method
         * @param param BrandName
         */
        public void setBrandName(String param){
            localBrandNameTracker = true;

            this.localBrandName=param;


        }


        /**
         * field for CategoryCode
         */


        protected String localCategoryCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCategoryCodeTracker = false ;

        public boolean isCategoryCodeSpecified(){
            return localCategoryCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCategoryCode(){
            return localCategoryCode;
        }



        /**
         * Auto generated setter method
         * @param param CategoryCode
         */
        public void setCategoryCode(String param){
            localCategoryCodeTracker = true;

            this.localCategoryCode=param;


        }


        /**
         * field for CompanyCode
         */


        protected String localCompanyCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCompanyCodeTracker = false ;

        public boolean isCompanyCodeSpecified(){
            return localCompanyCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCompanyCode(){
            return localCompanyCode;
        }



        /**
         * Auto generated setter method
         * @param param CompanyCode
         */
        public void setCompanyCode(String param){
            localCompanyCodeTracker = true;

            this.localCompanyCode=param;


        }


        /**
         * field for CompanyName
         */


        protected String localCompanyName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCompanyNameTracker = false ;

        public boolean isCompanyNameSpecified(){
            return localCompanyNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCompanyName(){
            return localCompanyName;
        }



        /**
         * Auto generated setter method
         * @param param CompanyName
         */
        public void setCompanyName(String param){
            localCompanyNameTracker = true;

            this.localCompanyName=param;


        }


        /**
         * field for ComplexSearch
         */


        protected String localComplexSearch ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localComplexSearchTracker = false ;

        public boolean isComplexSearchSpecified(){
            return localComplexSearchTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getComplexSearch(){
            return localComplexSearch;
        }



        /**
         * Auto generated setter method
         * @param param ComplexSearch
         */
        public void setComplexSearch(String param){
            localComplexSearchTracker = true;

            this.localComplexSearch=param;


        }


        /**
         * field for ConfigType
         */


        protected String localConfigType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localConfigTypeTracker = false ;

        public boolean isConfigTypeSpecified(){
            return localConfigTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getConfigType(){
            return localConfigType;
        }



        /**
         * Auto generated setter method
         * @param param ConfigType
         */
        public void setConfigType(String param){
            localConfigTypeTracker = true;

            this.localConfigType=param;


        }


        /**
         * field for CoveragePremiumItemArr
         * This was an Array!
         */


        protected CoveragePremiumItem[] localCoveragePremiumItemArr ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCoveragePremiumItemArrTracker = false ;

        public boolean isCoveragePremiumItemArrSpecified(){
            return localCoveragePremiumItemArrTracker;
        }



        /**
         * Auto generated getter method
         * @return CoveragePremiumItem[]
         */
        public  CoveragePremiumItem[] getCoveragePremiumItemArr(){
            return localCoveragePremiumItemArr;
        }






        /**
         * validate the array for CoveragePremiumItemArr
         */
        protected void validateCoveragePremiumItemArr(CoveragePremiumItem[] param){

        }


        /**
         * Auto generated setter method
         * @param param CoveragePremiumItemArr
         */
        public void setCoveragePremiumItemArr(CoveragePremiumItem[] param){

            validateCoveragePremiumItemArr(param);

            localCoveragePremiumItemArrTracker = true;

            this.localCoveragePremiumItemArr=param;
        }



        /**
         * Auto generated add method for the array for convenience
         * @param param CoveragePremiumItem
         */
        public void addCoveragePremiumItemArr(CoveragePremiumItem param){
            if (localCoveragePremiumItemArr == null){
                localCoveragePremiumItemArr = new CoveragePremiumItem[]{};
            }


            //update the setting tracker
            localCoveragePremiumItemArrTracker = true;


            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localCoveragePremiumItemArr);
            list.add(param);
            this.localCoveragePremiumItemArr =
                    (CoveragePremiumItem[])list.toArray(
                            new CoveragePremiumItem[list.size()]);

        }


        /**
         * field for DeptCode
         */


        protected String localDeptCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localDeptCodeTracker = false ;

        public boolean isDeptCodeSpecified(){
            return localDeptCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getDeptCode(){
            return localDeptCode;
        }



        /**
         * Auto generated setter method
         * @param param DeptCode
         */
        public void setDeptCode(String param){
            localDeptCodeTracker = true;

            this.localDeptCode=param;


        }


        /**
         * field for EngineDesc
         */


        protected String localEngineDesc ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEngineDescTracker = false ;

        public boolean isEngineDescSpecified(){
            return localEngineDescTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEngineDesc(){
            return localEngineDesc;
        }



        /**
         * Auto generated setter method
         * @param param EngineDesc
         */
        public void setEngineDesc(String param){
            localEngineDescTracker = true;

            this.localEngineDesc=param;


        }


        /**
         * field for ExhaustCapacity
         */


        protected double localExhaustCapacity ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localExhaustCapacityTracker = false ;

        public boolean isExhaustCapacitySpecified(){
            return localExhaustCapacityTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getExhaustCapacity(){
            return localExhaustCapacity;
        }



        /**
         * Auto generated setter method
         * @param param ExhaustCapacity
         */
        public void setExhaustCapacity(double param){

            // setting primitive attribute tracker to true
            localExhaustCapacityTracker =
                    !Double.isNaN(param);

            this.localExhaustCapacity=param;


        }


        /**
         * field for FairMarketValueMaxRate
         */


        protected String localFairMarketValueMaxRate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFairMarketValueMaxRateTracker = false ;

        public boolean isFairMarketValueMaxRateSpecified(){
            return localFairMarketValueMaxRateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFairMarketValueMaxRate(){
            return localFairMarketValueMaxRate;
        }



        /**
         * Auto generated setter method
         * @param param FairMarketValueMaxRate
         */
        public void setFairMarketValueMaxRate(String param){
            localFairMarketValueMaxRateTracker = true;

            this.localFairMarketValueMaxRate=param;


        }


        /**
         * field for FairMarketValueMinRate
         */


        protected String localFairMarketValueMinRate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFairMarketValueMinRateTracker = false ;

        public boolean isFairMarketValueMinRateSpecified(){
            return localFairMarketValueMinRateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFairMarketValueMinRate(){
            return localFairMarketValueMinRate;
        }



        /**
         * Auto generated setter method
         * @param param FairMarketValueMinRate
         */
        public void setFairMarketValueMinRate(String param){
            localFairMarketValueMinRateTracker = true;

            this.localFairMarketValueMinRate=param;


        }


        /**
         * field for FamilyCode
         */


        protected String localFamilyCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFamilyCodeTracker = false ;

        public boolean isFamilyCodeSpecified(){
            return localFamilyCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFamilyCode(){
            return localFamilyCode;
        }



        /**
         * Auto generated setter method
         * @param param FamilyCode
         */
        public void setFamilyCode(String param){
            localFamilyCodeTracker = true;

            this.localFamilyCode=param;


        }


        /**
         * field for FamilyName
         */


        protected String localFamilyName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFamilyNameTracker = false ;

        public boolean isFamilyNameSpecified(){
            return localFamilyNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFamilyName(){
            return localFamilyName;
        }



        /**
         * Auto generated setter method
         * @param param FamilyName
         */
        public void setFamilyName(String param){
            localFamilyNameTracker = true;

            this.localFamilyName=param;


        }


        /**
         * field for Fcvehicle
         */


        protected String localFcvehicle ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFcvehicleTracker = false ;

        public boolean isFcvehicleSpecified(){
            return localFcvehicleTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFcvehicle(){
            return localFcvehicle;
        }



        /**
         * Auto generated setter method
         * @param param Fcvehicle
         */
        public void setFcvehicle(String param){
            localFcvehicleTracker = true;

            this.localFcvehicle=param;


        }


        /**
         * field for FuelCode
         */


        protected String localFuelCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFuelCodeTracker = false ;

        public boolean isFuelCodeSpecified(){
            return localFuelCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFuelCode(){
            return localFuelCode;
        }



        /**
         * Auto generated setter method
         * @param param FuelCode
         */
        public void setFuelCode(String param){
            localFuelCodeTracker = true;

            this.localFuelCode=param;


        }


        /**
         * field for FuelName
         */


        protected String localFuelName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFuelNameTracker = false ;

        public boolean isFuelNameSpecified(){
            return localFuelNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFuelName(){
            return localFuelName;
        }



        /**
         * Auto generated setter method
         * @param param FuelName
         */
        public void setFuelName(String param){
            localFuelNameTracker = true;

            this.localFuelName=param;


        }


        /**
         * field for FuleType
         */


        protected String localFuleType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFuleTypeTracker = false ;

        public boolean isFuleTypeSpecified(){
            return localFuleTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFuleType(){
            return localFuleType;
        }



        /**
         * Auto generated setter method
         * @param param FuleType
         */
        public void setFuleType(String param){
            localFuleTypeTracker = true;

            this.localFuleType=param;


        }


        /**
         * field for FullWeightMin
         */


        protected String localFullWeightMin ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFullWeightMinTracker = false ;

        public boolean isFullWeightMinSpecified(){
            return localFullWeightMinTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFullWeightMin(){
            return localFullWeightMin;
        }



        /**
         * Auto generated setter method
         * @param param FullWeightMin
         */
        public void setFullWeightMin(String param){
            localFullWeightMinTracker = true;

            this.localFullWeightMin=param;


        }


        /**
         * field for GTFlag
         */


        protected String localGTFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localGTFlagTracker = false ;

        public boolean isGTFlagSpecified(){
            return localGTFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getGTFlag(){
            return localGTFlag;
        }



        /**
         * Auto generated setter method
         * @param param GTFlag
         */
        public void setGTFlag(String param){
            localGTFlagTracker = true;

            this.localGTFlag=param;


        }


        /**
         * field for GTLowerLimit
         */


        protected String localGTLowerLimit ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localGTLowerLimitTracker = false ;

        public boolean isGTLowerLimitSpecified(){
            return localGTLowerLimitTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getGTLowerLimit(){
            return localGTLowerLimit;
        }



        /**
         * Auto generated setter method
         * @param param GTLowerLimit
         */
        public void setGTLowerLimit(String param){
            localGTLowerLimitTracker = true;

            this.localGTLowerLimit=param;


        }


        /**
         * field for GTTopLimit
         */


        protected String localGTTopLimit ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localGTTopLimitTracker = false ;

        public boolean isGTTopLimitSpecified(){
            return localGTTopLimitTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getGTTopLimit(){
            return localGTTopLimit;
        }



        /**
         * Auto generated setter method
         * @param param GTTopLimit
         */
        public void setGTTopLimit(String param){
            localGTTopLimitTracker = true;

            this.localGTTopLimit=param;


        }


        /**
         * field for ImportFlag
         */


        protected String localImportFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localImportFlagTracker = false ;

        public boolean isImportFlagSpecified(){
            return localImportFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getImportFlag(){
            return localImportFlag;
        }



        /**
         * Auto generated setter method
         * @param param ImportFlag
         */
        public void setImportFlag(String param){
            localImportFlagTracker = true;

            this.localImportFlag=param;


        }


        /**
         * field for IsPriced
         */


        protected String localIsPriced ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localIsPricedTracker = false ;

        public boolean isIsPricedSpecified(){
            return localIsPricedTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getIsPriced(){
            return localIsPriced;
        }



        /**
         * Auto generated setter method
         * @param param IsPriced
         */
        public void setIsPriced(String param){
            localIsPricedTracker = true;

            this.localIsPriced=param;


        }


        /**
         * field for JqxClassID
         */


        protected String localJqxClassID ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localJqxClassIDTracker = false ;

        public boolean isJqxClassIDSpecified(){
            return localJqxClassIDTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getJqxClassID(){
            return localJqxClassID;
        }



        /**
         * Auto generated setter method
         * @param param JqxClassID
         */
        public void setJqxClassID(String param){
            localJqxClassIDTracker = true;

            this.localJqxClassID=param;


        }


        /**
         * field for JqxClassName
         */


        protected String localJqxClassName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localJqxClassNameTracker = false ;

        public boolean isJqxClassNameSpecified(){
            return localJqxClassNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getJqxClassName(){
            return localJqxClassName;
        }



        /**
         * Auto generated setter method
         * @param param JqxClassName
         */
        public void setJqxClassName(String param){
            localJqxClassNameTracker = true;

            this.localJqxClassName=param;


        }


        /**
         * field for KindRedPrice
         */


        protected String localKindRedPrice ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localKindRedPriceTracker = false ;

        public boolean isKindRedPriceSpecified(){
            return localKindRedPriceTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getKindRedPrice(){
            return localKindRedPrice;
        }



        /**
         * Auto generated setter method
         * @param param KindRedPrice
         */
        public void setKindRedPrice(String param){
            localKindRedPriceTracker = true;

            this.localKindRedPrice=param;


        }


        /**
         * field for KindRedPriceTax
         */


        protected String localKindRedPriceTax ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localKindRedPriceTaxTracker = false ;

        public boolean isKindRedPriceTaxSpecified(){
            return localKindRedPriceTaxTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getKindRedPriceTax(){
            return localKindRedPriceTax;
        }



        /**
         * Auto generated setter method
         * @param param KindRedPriceTax
         */
        public void setKindRedPriceTax(String param){
            localKindRedPriceTaxTracker = true;

            this.localKindRedPriceTax=param;


        }


        /**
         * field for KindredPriceE
         */


        protected double localKindredPriceE ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localKindredPriceETracker = false ;

        public boolean isKindredPriceESpecified(){
            return localKindredPriceETracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getKindredPriceE(){
            return localKindredPriceE;
        }



        /**
         * Auto generated setter method
         * @param param KindredPriceE
         */
        public void setKindredPriceE(double param){

            // setting primitive attribute tracker to true
            localKindredPriceETracker =
                    !Double.isNaN(param);

            this.localKindredPriceE=param;


        }


        /**
         * field for KindredPriceTaxE
         */


        protected double localKindredPriceTaxE ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localKindredPriceTaxETracker = false ;

        public boolean isKindredPriceTaxESpecified(){
            return localKindredPriceTaxETracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getKindredPriceTaxE(){
            return localKindredPriceTaxE;
        }



        /**
         * Auto generated setter method
         * @param param KindredPriceTaxE
         */
        public void setKindredPriceTaxE(double param){

            // setting primitive attribute tracker to true
            localKindredPriceTaxETracker =
                    !Double.isNaN(param);

            this.localKindredPriceTaxE=param;


        }


        /**
         * field for MarketDate
         */


        protected String localMarketDate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localMarketDateTracker = false ;

        public boolean isMarketDateSpecified(){
            return localMarketDateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getMarketDate(){
            return localMarketDate;
        }



        /**
         * Auto generated setter method
         * @param param MarketDate
         */
        public void setMarketDate(String param){
            localMarketDateTracker = true;

            this.localMarketDate=param;


        }


        /**
         * field for ModelCode
         */


        protected String localModelCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localModelCodeTracker = false ;

        public boolean isModelCodeSpecified(){
            return localModelCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getModelCode(){
            return localModelCode;
        }



        /**
         * Auto generated setter method
         * @param param ModelCode
         */
        public void setModelCode(String param){
            localModelCodeTracker = true;

            this.localModelCode=param;


        }


        /**
         * field for ModelDesc
         */


        protected String localModelDesc ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localModelDescTracker = false ;

        public boolean isModelDescSpecified(){
            return localModelDescTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getModelDesc(){
            return localModelDesc;
        }



        /**
         * Auto generated setter method
         * @param param ModelDesc
         */
        public void setModelDesc(String param){
            localModelDescTracker = true;

            this.localModelDesc=param;


        }


        /**
         * field for ModelIDCode
         */


        protected String localModelIDCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localModelIDCodeTracker = false ;

        public boolean isModelIDCodeSpecified(){
            return localModelIDCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getModelIDCode(){
            return localModelIDCode;
        }



        /**
         * Auto generated setter method
         * @param param ModelIDCode
         */
        public void setModelIDCode(String param){
            localModelIDCodeTracker = true;

            this.localModelIDCode=param;


        }


        /**
         * field for ModelName
         */


        protected String localModelName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localModelNameTracker = false ;

        public boolean isModelNameSpecified(){
            return localModelNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getModelName(){
            return localModelName;
        }



        /**
         * Auto generated setter method
         * @param param ModelName
         */
        public void setModelName(String param){
            localModelNameTracker = true;

            this.localModelName=param;


        }


        /**
         * field for NewClassCode
         */


        protected String localNewClassCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localNewClassCodeTracker = false ;

        public boolean isNewClassCodeSpecified(){
            return localNewClassCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getNewClassCode(){
            return localNewClassCode;
        }



        /**
         * Auto generated setter method
         * @param param NewClassCode
         */
        public void setNewClassCode(String param){
            localNewClassCodeTracker = true;

            this.localNewClassCode=param;


        }


        /**
         * field for NewClassName
         */


        protected String localNewClassName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localNewClassNameTracker = false ;

        public boolean isNewClassNameSpecified(){
            return localNewClassNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getNewClassName(){
            return localNewClassName;
        }



        /**
         * Auto generated setter method
         * @param param NewClassName
         */
        public void setNewClassName(String param){
            localNewClassNameTracker = true;

            this.localNewClassName=param;


        }


        /**
         * field for OriginCarPrice
         */


        protected String localOriginCarPrice ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localOriginCarPriceTracker = false ;

        public boolean isOriginCarPriceSpecified(){
            return localOriginCarPriceTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getOriginCarPrice(){
            return localOriginCarPrice;
        }



        /**
         * Auto generated setter method
         * @param param OriginCarPrice
         */
        public void setOriginCarPrice(String param){
            localOriginCarPriceTracker = true;

            this.localOriginCarPrice=param;


        }


        /**
         * field for PlatModelCode
         */


        protected String localPlatModelCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPlatModelCodeTracker = false ;

        public boolean isPlatModelCodeSpecified(){
            return localPlatModelCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPlatModelCode(){
            return localPlatModelCode;
        }



        /**
         * Auto generated setter method
         * @param param PlatModelCode
         */
        public void setPlatModelCode(String param){
            localPlatModelCodeTracker = true;

            this.localPlatModelCode=param;


        }


        /**
         * field for PlatModelName
         */


        protected String localPlatModelName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPlatModelNameTracker = false ;

        public boolean isPlatModelNameSpecified(){
            return localPlatModelNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPlatModelName(){
            return localPlatModelName;
        }



        /**
         * Auto generated setter method
         * @param param PlatModelName
         */
        public void setPlatModelName(String param){
            localPlatModelNameTracker = true;

            this.localPlatModelName=param;


        }


        /**
         * field for PlatStandardName
         */


        protected String localPlatStandardName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPlatStandardNameTracker = false ;

        public boolean isPlatStandardNameSpecified(){
            return localPlatStandardNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPlatStandardName(){
            return localPlatStandardName;
        }



        /**
         * Auto generated setter method
         * @param param PlatStandardName
         */
        public void setPlatStandardName(String param){
            localPlatStandardNameTracker = true;

            this.localPlatStandardName=param;


        }


        /**
         * field for Power
         */


        protected String localPower ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPowerTracker = false ;

        public boolean isPowerSpecified(){
            return localPowerTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPower(){
            return localPower;
        }



        /**
         * Auto generated setter method
         * @param param Power
         */
        public void setPower(String param){
            localPowerTracker = true;

            this.localPower=param;


        }


        /**
         * field for PurchasePrice
         */


        protected double localPurchasePrice ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceTracker = false ;

        public boolean isPurchasePriceSpecified(){
            return localPurchasePriceTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getPurchasePrice(){
            return localPurchasePrice;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePrice
         */
        public void setPurchasePrice(double param){

            // setting primitive attribute tracker to true
            localPurchasePriceTracker =
                    !Double.isNaN(param);

            this.localPurchasePrice=param;


        }


        /**
         * field for PurchasePriceCalculate
         */


        protected double localPurchasePriceCalculate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceCalculateTracker = false ;

        public boolean isPurchasePriceCalculateSpecified(){
            return localPurchasePriceCalculateTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getPurchasePriceCalculate(){
            return localPurchasePriceCalculate;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceCalculate
         */
        public void setPurchasePriceCalculate(double param){

            // setting primitive attribute tracker to true
            localPurchasePriceCalculateTracker =
                    !Double.isNaN(param);

            this.localPurchasePriceCalculate=param;


        }


        /**
         * field for PurchasePriceLower
         */


        protected double localPurchasePriceLower ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceLowerTracker = false ;

        public boolean isPurchasePriceLowerSpecified(){
            return localPurchasePriceLowerTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getPurchasePriceLower(){
            return localPurchasePriceLower;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceLower
         */
        public void setPurchasePriceLower(double param){

            // setting primitive attribute tracker to true
            localPurchasePriceLowerTracker =
                    !Double.isNaN(param);

            this.localPurchasePriceLower=param;


        }


        /**
         * field for PurchasePriceMaxRate
         */


        protected String localPurchasePriceMaxRate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceMaxRateTracker = false ;

        public boolean isPurchasePriceMaxRateSpecified(){
            return localPurchasePriceMaxRateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPurchasePriceMaxRate(){
            return localPurchasePriceMaxRate;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceMaxRate
         */
        public void setPurchasePriceMaxRate(String param){
            localPurchasePriceMaxRateTracker = true;

            this.localPurchasePriceMaxRate=param;


        }


        /**
         * field for PurchasePriceMinRate
         */


        protected String localPurchasePriceMinRate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceMinRateTracker = false ;

        public boolean isPurchasePriceMinRateSpecified(){
            return localPurchasePriceMinRateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPurchasePriceMinRate(){
            return localPurchasePriceMinRate;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceMinRate
         */
        public void setPurchasePriceMinRate(String param){
            localPurchasePriceMinRateTracker = true;

            this.localPurchasePriceMinRate=param;


        }


        /**
         * field for PurchasePriceNoTax
         */


        protected double localPurchasePriceNoTax ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceNoTaxTracker = false ;

        public boolean isPurchasePriceNoTaxSpecified(){
            return localPurchasePriceNoTaxTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getPurchasePriceNoTax(){
            return localPurchasePriceNoTax;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceNoTax
         */
        public void setPurchasePriceNoTax(double param){

            // setting primitive attribute tracker to true
            localPurchasePriceNoTaxTracker =
                    !Double.isNaN(param);

            this.localPurchasePriceNoTax=param;


        }


        /**
         * field for PurchasePriceRate
         */


        protected String localPurchasePriceRate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceRateTracker = false ;

        public boolean isPurchasePriceRateSpecified(){
            return localPurchasePriceRateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPurchasePriceRate(){
            return localPurchasePriceRate;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceRate
         */
        public void setPurchasePriceRate(String param){
            localPurchasePriceRateTracker = true;

            this.localPurchasePriceRate=param;


        }


        /**
         * field for PurchasePriceTax
         */


        protected double localPurchasePriceTax ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceTaxTracker = false ;

        public boolean isPurchasePriceTaxSpecified(){
            return localPurchasePriceTaxTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getPurchasePriceTax(){
            return localPurchasePriceTax;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceTax
         */
        public void setPurchasePriceTax(double param){

            // setting primitive attribute tracker to true
            localPurchasePriceTaxTracker =
                    !Double.isNaN(param);

            this.localPurchasePriceTax=param;


        }


        /**
         * field for PurchasePriceUpper
         */


        protected double localPurchasePriceUpper ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPurchasePriceUpperTracker = false ;

        public boolean isPurchasePriceUpperSpecified(){
            return localPurchasePriceUpperTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getPurchasePriceUpper(){
            return localPurchasePriceUpper;
        }



        /**
         * Auto generated setter method
         * @param param PurchasePriceUpper
         */
        public void setPurchasePriceUpper(double param){

            // setting primitive attribute tracker to true
            localPurchasePriceUpperTracker =
                    !Double.isNaN(param);

            this.localPurchasePriceUpper=param;


        }


        /**
         * field for Rate
         */


        protected double localRate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRateTracker = false ;

        public boolean isRateSpecified(){
            return localRateTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getRate(){
            return localRate;
        }



        /**
         * Auto generated setter method
         * @param param Rate
         */
        public void setRate(double param){

            // setting primitive attribute tracker to true
            localRateTracker =
                    !Double.isNaN(param);

            this.localRate=param;


        }


        /**
         * field for RateException
         */


        protected double localRateException ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRateExceptionTracker = false ;

        public boolean isRateExceptionSpecified(){
            return localRateExceptionTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getRateException(){
            return localRateException;
        }



        /**
         * Auto generated setter method
         * @param param RateException
         */
        public void setRateException(double param){

            // setting primitive attribute tracker to true
            localRateExceptionTracker =
                    !Double.isNaN(param);

            this.localRateException=param;


        }


        /**
         * field for RateSpecializeRepair
         */


        protected double localRateSpecializeRepair ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRateSpecializeRepairTracker = false ;

        public boolean isRateSpecializeRepairSpecified(){
            return localRateSpecializeRepairTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getRateSpecializeRepair(){
            return localRateSpecializeRepair;
        }



        /**
         * Auto generated setter method
         * @param param RateSpecializeRepair
         */
        public void setRateSpecializeRepair(double param){

            // setting primitive attribute tracker to true
            localRateSpecializeRepairTracker =
                    !Double.isNaN(param);

            this.localRateSpecializeRepair=param;


        }


        /**
         * field for RateVehRiskChange
         */


        protected double localRateVehRiskChange ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRateVehRiskChangeTracker = false ;

        public boolean isRateVehRiskChangeSpecified(){
            return localRateVehRiskChangeTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getRateVehRiskChange(){
            return localRateVehRiskChange;
        }



        /**
         * Auto generated setter method
         * @param param RateVehRiskChange
         */
        public void setRateVehRiskChange(double param){

            // setting primitive attribute tracker to true
            localRateVehRiskChangeTracker =
                    !Double.isNaN(param);

            this.localRateVehRiskChange=param;


        }


        /**
         * field for RateVehRiskRepair
         */


        protected double localRateVehRiskRepair ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRateVehRiskRepairTracker = false ;

        public boolean isRateVehRiskRepairSpecified(){
            return localRateVehRiskRepairTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getRateVehRiskRepair(){
            return localRateVehRiskRepair;
        }



        /**
         * Auto generated setter method
         * @param param RateVehRiskRepair
         */
        public void setRateVehRiskRepair(double param){

            // setting primitive attribute tracker to true
            localRateVehRiskRepairTracker =
                    !Double.isNaN(param);

            this.localRateVehRiskRepair=param;


        }


        /**
         * field for RefCode1
         */


        protected String localRefCode1 ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRefCode1Tracker = false ;

        public boolean isRefCode1Specified(){
            return localRefCode1Tracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRefCode1(){
            return localRefCode1;
        }



        /**
         * Auto generated setter method
         * @param param RefCode1
         */
        public void setRefCode1(String param){
            localRefCode1Tracker = true;

            this.localRefCode1=param;


        }


        /**
         * field for RefCode2
         */


        protected String localRefCode2 ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRefCode2Tracker = false ;

        public boolean isRefCode2Specified(){
            return localRefCode2Tracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRefCode2(){
            return localRefCode2;
        }



        /**
         * Auto generated setter method
         * @param param RefCode2
         */
        public void setRefCode2(String param){
            localRefCode2Tracker = true;

            this.localRefCode2=param;


        }


        /**
         * field for ReliefVehicleFlag
         */


        protected String localReliefVehicleFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localReliefVehicleFlagTracker = false ;

        public boolean isReliefVehicleFlagSpecified(){
            return localReliefVehicleFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getReliefVehicleFlag(){
            return localReliefVehicleFlag;
        }



        /**
         * Auto generated setter method
         * @param param ReliefVehicleFlag
         */
        public void setReliefVehicleFlag(String param){
            localReliefVehicleFlagTracker = true;

            this.localReliefVehicleFlag=param;


        }


        /**
         * field for Remark
         */


        protected String localRemark ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRemarkTracker = false ;

        public boolean isRemarkSpecified(){
            return localRemarkTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRemark(){
            return localRemark;
        }



        /**
         * Auto generated setter method
         * @param param Remark
         */
        public void setRemark(String param){
            localRemarkTracker = true;

            this.localRemark=param;


        }


        /**
         * field for RiskDesc
         */


        protected String localRiskDesc ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRiskDescTracker = false ;

        public boolean isRiskDescSpecified(){
            return localRiskDescTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRiskDesc(){
            return localRiskDesc;
        }



        /**
         * Auto generated setter method
         * @param param RiskDesc
         */
        public void setRiskDesc(String param){
            localRiskDescTracker = true;

            this.localRiskDesc=param;


        }


        /**
         * field for RiskFlag
         */


        protected String localRiskFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRiskFlagTracker = false ;

        public boolean isRiskFlagSpecified(){
            return localRiskFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRiskFlag(){
            return localRiskFlag;
        }



        /**
         * Auto generated setter method
         * @param param RiskFlag
         */
        public void setRiskFlag(String param){
            localRiskFlagTracker = true;

            this.localRiskFlag=param;


        }


        /**
         * field for RiskOtherFlag
         */


        protected String localRiskOtherFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRiskOtherFlagTracker = false ;

        public boolean isRiskOtherFlagSpecified(){
            return localRiskOtherFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRiskOtherFlag(){
            return localRiskOtherFlag;
        }



        /**
         * Auto generated setter method
         * @param param RiskOtherFlag
         */
        public void setRiskOtherFlag(String param){
            localRiskOtherFlagTracker = true;

            this.localRiskOtherFlag=param;


        }


        /**
         * field for RiskOtherName
         */


        protected String localRiskOtherName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRiskOtherNameTracker = false ;

        public boolean isRiskOtherNameSpecified(){
            return localRiskOtherNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRiskOtherName(){
            return localRiskOtherName;
        }



        /**
         * Auto generated setter method
         * @param param RiskOtherName
         */
        public void setRiskOtherName(String param){
            localRiskOtherNameTracker = true;

            this.localRiskOtherName=param;


        }


        /**
         * field for SearchCode
         */


        protected String localSearchCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSearchCodeTracker = false ;

        public boolean isSearchCodeSpecified(){
            return localSearchCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSearchCode(){
            return localSearchCode;
        }



        /**
         * Auto generated setter method
         * @param param SearchCode
         */
        public void setSearchCode(String param){
            localSearchCodeTracker = true;

            this.localSearchCode=param;


        }


        /**
         * field for SearchSequenceNo
         */


        protected String localSearchSequenceNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSearchSequenceNoTracker = false ;

        public boolean isSearchSequenceNoSpecified(){
            return localSearchSequenceNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSearchSequenceNo(){
            return localSearchSequenceNo;
        }



        /**
         * Auto generated setter method
         * @param param SearchSequenceNo
         */
        public void setSearchSequenceNo(String param){
            localSearchSequenceNoTracker = true;

            this.localSearchSequenceNo=param;


        }


        /**
         * field for SeatCount
         */


        protected int localSeatCount ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSeatCountTracker = false ;

        public boolean isSeatCountSpecified(){
            return localSeatCountTracker;
        }



        /**
         * Auto generated getter method
         * @return int
         */
        public  int getSeatCount(){
            return localSeatCount;
        }



        /**
         * Auto generated setter method
         * @param param SeatCount
         */
        public void setSeatCount(int param){

            // setting primitive attribute tracker to true
            localSeatCountTracker =
                    param != Integer.MIN_VALUE;

            this.localSeatCount=param;


        }


        /**
         * field for SeatMax
         */


        protected String localSeatMax ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSeatMaxTracker = false ;

        public boolean isSeatMaxSpecified(){
            return localSeatMaxTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSeatMax(){
            return localSeatMax;
        }



        /**
         * Auto generated setter method
         * @param param SeatMax
         */
        public void setSeatMax(String param){
            localSeatMaxTracker = true;

            this.localSeatMax=param;


        }


        /**
         * field for SeatMin
         */


        protected String localSeatMin ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSeatMinTracker = false ;

        public boolean isSeatMinSpecified(){
            return localSeatMinTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSeatMin(){
            return localSeatMin;
        }



        /**
         * Auto generated setter method
         * @param param SeatMin
         */
        public void setSeatMin(String param){
            localSeatMinTracker = true;

            this.localSeatMin=param;


        }


        /**
         * field for StandarName
         */


        protected String localStandarName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localStandarNameTracker = false ;

        public boolean isStandarNameSpecified(){
            return localStandarNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getStandarName(){
            return localStandarName;
        }



        /**
         * Auto generated setter method
         * @param param StandarName
         */
        public void setStandarName(String param){
            localStandarNameTracker = true;

            this.localStandarName=param;


        }


        /**
         * field for StopFlag
         */


        protected String localStopFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localStopFlagTracker = false ;

        public boolean isStopFlagSpecified(){
            return localStopFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getStopFlag(){
            return localStopFlag;
        }



        /**
         * Auto generated setter method
         * @param param StopFlag
         */
        public void setStopFlag(String param){
            localStopFlagTracker = true;

            this.localStopFlag=param;


        }


        /**
         * field for StrGtxq
         */


        protected String localStrGtxq ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localStrGtxqTracker = false ;

        public boolean isStrGtxqSpecified(){
            return localStrGtxqTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getStrGtxq(){
            return localStrGtxq;
        }



        /**
         * Auto generated setter method
         * @param param StrGtxq
         */
        public void setStrGtxq(String param){
            localStrGtxqTracker = true;

            this.localStrGtxq=param;


        }


        /**
         * field for SyxClassID
         */


        protected String localSyxClassID ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSyxClassIDTracker = false ;

        public boolean isSyxClassIDSpecified(){
            return localSyxClassIDTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSyxClassID(){
            return localSyxClassID;
        }



        /**
         * Auto generated setter method
         * @param param SyxClassID
         */
        public void setSyxClassID(String param){
            localSyxClassIDTracker = true;

            this.localSyxClassID=param;


        }


        /**
         * field for SyxClassName
         */


        protected String localSyxClassName ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSyxClassNameTracker = false ;

        public boolean isSyxClassNameSpecified(){
            return localSyxClassNameTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSyxClassName(){
            return localSyxClassName;
        }



        /**
         * Auto generated setter method
         * @param param SyxClassName
         */
        public void setSyxClassName(String param){
            localSyxClassNameTracker = true;

            this.localSyxClassName=param;


        }


        /**
         * field for TransmissionType
         */


        protected String localTransmissionType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransmissionTypeTracker = false ;

        public boolean isTransmissionTypeSpecified(){
            return localTransmissionTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTransmissionType(){
            return localTransmissionType;
        }



        /**
         * Auto generated setter method
         * @param param TransmissionType
         */
        public void setTransmissionType(String param){
            localTransmissionTypeTracker = true;

            this.localTransmissionType=param;


        }


        /**
         * field for VehicleAlias
         */


        protected String localVehicleAlias ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleAliasTracker = false ;

        public boolean isVehicleAliasSpecified(){
            return localVehicleAliasTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleAlias(){
            return localVehicleAlias;
        }



        /**
         * Auto generated setter method
         * @param param VehicleAlias
         */
        public void setVehicleAlias(String param){
            localVehicleAliasTracker = true;

            this.localVehicleAlias=param;


        }


        /**
         * field for VehicleBrand1
         */


        protected String localVehicleBrand1 ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleBrand1Tracker = false ;

        public boolean isVehicleBrand1Specified(){
            return localVehicleBrand1Tracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleBrand1(){
            return localVehicleBrand1;
        }



        /**
         * Auto generated setter method
         * @param param VehicleBrand1
         */
        public void setVehicleBrand1(String param){
            localVehicleBrand1Tracker = true;

            this.localVehicleBrand1=param;


        }


        /**
         * field for VehicleClass
         */


        protected String localVehicleClass ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleClassTracker = false ;

        public boolean isVehicleClassSpecified(){
            return localVehicleClassTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleClass(){
            return localVehicleClass;
        }



        /**
         * Auto generated setter method
         * @param param VehicleClass
         */
        public void setVehicleClass(String param){
            localVehicleClassTracker = true;

            this.localVehicleClass=param;


        }


        /**
         * field for VehicleStyleDesc
         */


        protected String localVehicleStyleDesc ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleStyleDescTracker = false ;

        public boolean isVehicleStyleDescSpecified(){
            return localVehicleStyleDescTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVehicleStyleDesc(){
            return localVehicleStyleDesc;
        }



        /**
         * Auto generated setter method
         * @param param VehicleStyleDesc
         */
        public void setVehicleStyleDesc(String param){
            localVehicleStyleDescTracker = true;

            this.localVehicleStyleDesc=param;


        }


        /**
         * field for VehicleTonnage
         */


        protected double localVehicleTonnage ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleTonnageTracker = false ;

        public boolean isVehicleTonnageSpecified(){
            return localVehicleTonnageTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getVehicleTonnage(){
            return localVehicleTonnage;
        }



        /**
         * Auto generated setter method
         * @param param VehicleTonnage
         */
        public void setVehicleTonnage(double param){

            // setting primitive attribute tracker to true
            localVehicleTonnageTracker =
                    !Double.isNaN(param);

            this.localVehicleTonnage=param;


        }


        /**
         * field for VehicleWeight
         */


        protected double localVehicleWeight ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVehicleWeightTracker = false ;

        public boolean isVehicleWeightSpecified(){
            return localVehicleWeightTracker;
        }



        /**
         * Auto generated getter method
         * @return double
         */
        public  double getVehicleWeight(){
            return localVehicleWeight;
        }



        /**
         * Auto generated setter method
         * @param param VehicleWeight
         */
        public void setVehicleWeight(double param){

            // setting primitive attribute tracker to true
            localVehicleWeightTracker =
                    !Double.isNaN(param);

            this.localVehicleWeight=param;


        }


        /**
         * field for WeightMax
         */


        protected String localWeightMax ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localWeightMaxTracker = false ;

        public boolean isWeightMaxSpecified(){
            return localWeightMaxTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getWeightMax(){
            return localWeightMax;
        }



        /**
         * Auto generated setter method
         * @param param WeightMax
         */
        public void setWeightMax(String param){
            localWeightMaxTracker = true;

            this.localWeightMax=param;


        }


        /**
         * field for JQXClassIDE
         */


        protected String localJQXClassIDE ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localJQXClassIDETracker = false ;

        public boolean isJQXClassIDESpecified(){
            return localJQXClassIDETracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getJQXClassIDE(){
            return localJQXClassIDE;
        }



        /**
         * Auto generated setter method
         * @param param JQXClassIDE
         */
        public void setJQXClassIDE(String param){
            localJQXClassIDETracker = true;

            this.localJQXClassIDE=param;


        }


        /**
         * field for JQXClassNameE
         */


        protected String localJQXClassNameE ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localJQXClassNameETracker = false ;

        public boolean isJQXClassNameESpecified(){
            return localJQXClassNameETracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getJQXClassNameE(){
            return localJQXClassNameE;
        }



        /**
         * Auto generated setter method
         * @param param JQXClassNameE
         */
        public void setJQXClassNameE(String param){
            localJQXClassNameETracker = true;

            this.localJQXClassNameE=param;


        }


        /**
         * field for RBCode
         */


        protected String localRBCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRBCodeTracker = false ;

        public boolean isRBCodeSpecified(){
            return localRBCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getRBCode(){
            return localRBCode;
        }



        /**
         * Auto generated setter method
         * @param param RBCode
         */
        public void setRBCode(String param){
            localRBCodeTracker = true;

            this.localRBCode=param;


        }


        /**
         * field for SYXClassIDE
         */


        protected String localSYXClassIDE ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSYXClassIDETracker = false ;

        public boolean isSYXClassIDESpecified(){
            return localSYXClassIDETracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSYXClassIDE(){
            return localSYXClassIDE;
        }



        /**
         * Auto generated setter method
         * @param param SYXClassIDE
         */
        public void setSYXClassIDE(String param){
            localSYXClassIDETracker = true;

            this.localSYXClassIDE=param;


        }


        /**
         * field for SYXClassNameE
         */


        protected String localSYXClassNameE ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSYXClassNameETracker = false ;

        public boolean isSYXClassNameESpecified(){
            return localSYXClassNameETracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSYXClassNameE(){
            return localSYXClassNameE;
        }



        /**
         * Auto generated setter method
         * @param param SYXClassNameE
         */
        public void setSYXClassNameE(String param){
            localSYXClassNameETracker = true;

            this.localSYXClassNameE=param;


        }


        /**
         * field for VINCode
         */


        protected String localVINCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localVINCodeTracker = false ;

        public boolean isVINCodeSpecified(){
            return localVINCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getVINCode(){
            return localVINCode;
        }



        /**
         * Auto generated setter method
         * @param param VINCode
         */
        public void setVINCode(String param){
            localVINCodeTracker = true;

            this.localVINCode=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":VehicleModelData",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "VehicleModelData",
                            xmlWriter);
                }


            }
            if (localAbsFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "absFlag", xmlWriter);


                if (localAbsFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localAbsFlag);

                }

                xmlWriter.writeEndElement();
            } if (localActualReferenceValueTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "actualReferenceValue", xmlWriter);

                if (Double.isNaN(localActualReferenceValue)) {

                    throw new org.apache.axis2.databinding.ADBException("actualReferenceValue cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActualReferenceValue));
                }

                xmlWriter.writeEndElement();
            } if (localActualValueTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "actualValue", xmlWriter);

                if (Double.isNaN(localActualValue)) {

                    throw new org.apache.axis2.databinding.ADBException("actualValue cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActualValue));
                }

                xmlWriter.writeEndElement();
            } if (localAirBagNumTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "airBagNum", xmlWriter);

                if (Double.isNaN(localAirBagNum)) {

                    throw new org.apache.axis2.databinding.ADBException("airBagNum cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAirBagNum));
                }

                xmlWriter.writeEndElement();
            } if (localAlarmFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "alarmFlag", xmlWriter);


                if (localAlarmFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localAlarmFlag);

                }

                xmlWriter.writeEndElement();
            } if (localBatholithTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "batholith", xmlWriter);


                if (localBatholith==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localBatholith);

                }

                xmlWriter.writeEndElement();
            } if (localBrandCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "brandCode", xmlWriter);


                if (localBrandCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localBrandCode);

                }

                xmlWriter.writeEndElement();
            } if (localBrandNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "brandName", xmlWriter);


                if (localBrandName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localBrandName);

                }

                xmlWriter.writeEndElement();
            } if (localCategoryCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "categoryCode", xmlWriter);


                if (localCategoryCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCategoryCode);

                }

                xmlWriter.writeEndElement();
            } if (localCompanyCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "companyCode", xmlWriter);


                if (localCompanyCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCompanyCode);

                }

                xmlWriter.writeEndElement();
            } if (localCompanyNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "companyName", xmlWriter);


                if (localCompanyName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCompanyName);

                }

                xmlWriter.writeEndElement();
            } if (localComplexSearchTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "complexSearch", xmlWriter);


                if (localComplexSearch==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localComplexSearch);

                }

                xmlWriter.writeEndElement();
            } if (localConfigTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "configType", xmlWriter);


                if (localConfigType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localConfigType);

                }

                xmlWriter.writeEndElement();
            } if (localCoveragePremiumItemArrTracker){
                if (localCoveragePremiumItemArr!=null){
                    for (int i = 0;i < localCoveragePremiumItemArr.length;i++){
                        if (localCoveragePremiumItemArr[i] != null){
                            localCoveragePremiumItemArr[i].serialize(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","coveragePremiumItemArr"),
                                    xmlWriter);
                        } else {

                            writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "coveragePremiumItemArr", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                            xmlWriter.writeEndElement();

                        }

                    }
                } else {

                    writeStartElement(null, "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd", "coveragePremiumItemArr", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();

                }
            } if (localDeptCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "deptCode", xmlWriter);


                if (localDeptCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localDeptCode);

                }

                xmlWriter.writeEndElement();
            } if (localEngineDescTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "engineDesc", xmlWriter);


                if (localEngineDesc==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEngineDesc);

                }

                xmlWriter.writeEndElement();
            } if (localExhaustCapacityTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "exhaustCapacity", xmlWriter);

                if (Double.isNaN(localExhaustCapacity)) {

                    throw new org.apache.axis2.databinding.ADBException("exhaustCapacity cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExhaustCapacity));
                }

                xmlWriter.writeEndElement();
            } if (localFairMarketValueMaxRateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fairMarketValueMaxRate", xmlWriter);


                if (localFairMarketValueMaxRate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFairMarketValueMaxRate);

                }

                xmlWriter.writeEndElement();
            } if (localFairMarketValueMinRateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fairMarketValueMinRate", xmlWriter);


                if (localFairMarketValueMinRate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFairMarketValueMinRate);

                }

                xmlWriter.writeEndElement();
            } if (localFamilyCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "familyCode", xmlWriter);


                if (localFamilyCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFamilyCode);

                }

                xmlWriter.writeEndElement();
            } if (localFamilyNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "familyName", xmlWriter);


                if (localFamilyName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFamilyName);

                }

                xmlWriter.writeEndElement();
            } if (localFcvehicleTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fcvehicle", xmlWriter);


                if (localFcvehicle==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFcvehicle);

                }

                xmlWriter.writeEndElement();
            } if (localFuelCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fuelCode", xmlWriter);


                if (localFuelCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFuelCode);

                }

                xmlWriter.writeEndElement();
            } if (localFuelNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fuelName", xmlWriter);


                if (localFuelName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFuelName);

                }

                xmlWriter.writeEndElement();
            } if (localFuleTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fuleType", xmlWriter);


                if (localFuleType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFuleType);

                }

                xmlWriter.writeEndElement();
            } if (localFullWeightMinTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "fullWeightMin", xmlWriter);


                if (localFullWeightMin==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFullWeightMin);

                }

                xmlWriter.writeEndElement();
            } if (localGTFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "gTFlag", xmlWriter);


                if (localGTFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localGTFlag);

                }

                xmlWriter.writeEndElement();
            } if (localGTLowerLimitTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "gTLowerLimit", xmlWriter);


                if (localGTLowerLimit==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localGTLowerLimit);

                }

                xmlWriter.writeEndElement();
            } if (localGTTopLimitTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "gTTopLimit", xmlWriter);


                if (localGTTopLimit==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localGTTopLimit);

                }

                xmlWriter.writeEndElement();
            } if (localImportFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "importFlag", xmlWriter);


                if (localImportFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localImportFlag);

                }

                xmlWriter.writeEndElement();
            } if (localIsPricedTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "isPriced", xmlWriter);


                if (localIsPriced==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localIsPriced);

                }

                xmlWriter.writeEndElement();
            } if (localJqxClassIDTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "jqxClassID", xmlWriter);


                if (localJqxClassID==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localJqxClassID);

                }

                xmlWriter.writeEndElement();
            } if (localJqxClassNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "jqxClassName", xmlWriter);


                if (localJqxClassName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localJqxClassName);

                }

                xmlWriter.writeEndElement();
            } if (localKindRedPriceTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "kindRedPrice", xmlWriter);


                if (localKindRedPrice==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localKindRedPrice);

                }

                xmlWriter.writeEndElement();
            } if (localKindRedPriceTaxTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "kindRedPriceTax", xmlWriter);


                if (localKindRedPriceTax==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localKindRedPriceTax);

                }

                xmlWriter.writeEndElement();
            } if (localKindredPriceETracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "kindredPrice", xmlWriter);

                if (Double.isNaN(localKindredPriceE)) {

                    throw new org.apache.axis2.databinding.ADBException("kindredPrice cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindredPriceE));
                }

                xmlWriter.writeEndElement();
            } if (localKindredPriceTaxETracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "kindredPriceTax", xmlWriter);

                if (Double.isNaN(localKindredPriceTaxE)) {

                    throw new org.apache.axis2.databinding.ADBException("kindredPriceTax cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindredPriceTaxE));
                }

                xmlWriter.writeEndElement();
            } if (localMarketDateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "marketDate", xmlWriter);


                if (localMarketDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localMarketDate);

                }

                xmlWriter.writeEndElement();
            } if (localModelCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "modelCode", xmlWriter);


                if (localModelCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localModelCode);

                }

                xmlWriter.writeEndElement();
            } if (localModelDescTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "modelDesc", xmlWriter);


                if (localModelDesc==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localModelDesc);

                }

                xmlWriter.writeEndElement();
            } if (localModelIDCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "modelIDCode", xmlWriter);


                if (localModelIDCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localModelIDCode);

                }

                xmlWriter.writeEndElement();
            } if (localModelNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "modelName", xmlWriter);


                if (localModelName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localModelName);

                }

                xmlWriter.writeEndElement();
            } if (localNewClassCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "newClassCode", xmlWriter);


                if (localNewClassCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localNewClassCode);

                }

                xmlWriter.writeEndElement();
            } if (localNewClassNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "newClassName", xmlWriter);


                if (localNewClassName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localNewClassName);

                }

                xmlWriter.writeEndElement();
            } if (localOriginCarPriceTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "originCarPrice", xmlWriter);


                if (localOriginCarPrice==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOriginCarPrice);

                }

                xmlWriter.writeEndElement();
            } if (localPlatModelCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "platModelCode", xmlWriter);


                if (localPlatModelCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPlatModelCode);

                }

                xmlWriter.writeEndElement();
            } if (localPlatModelNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "platModelName", xmlWriter);


                if (localPlatModelName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPlatModelName);

                }

                xmlWriter.writeEndElement();
            } if (localPlatStandardNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "platStandardName", xmlWriter);


                if (localPlatStandardName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPlatStandardName);

                }

                xmlWriter.writeEndElement();
            } if (localPowerTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "power", xmlWriter);


                if (localPower==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPower);

                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePrice", xmlWriter);

                if (Double.isNaN(localPurchasePrice)) {

                    throw new org.apache.axis2.databinding.ADBException("purchasePrice cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePrice));
                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceCalculateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceCalculate", xmlWriter);

                if (Double.isNaN(localPurchasePriceCalculate)) {

                    throw new org.apache.axis2.databinding.ADBException("purchasePriceCalculate cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceCalculate));
                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceLowerTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceLower", xmlWriter);

                if (Double.isNaN(localPurchasePriceLower)) {

                    throw new org.apache.axis2.databinding.ADBException("purchasePriceLower cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceLower));
                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceMaxRateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceMaxRate", xmlWriter);


                if (localPurchasePriceMaxRate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPurchasePriceMaxRate);

                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceMinRateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceMinRate", xmlWriter);


                if (localPurchasePriceMinRate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPurchasePriceMinRate);

                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceNoTaxTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceNoTax", xmlWriter);

                if (Double.isNaN(localPurchasePriceNoTax)) {

                    throw new org.apache.axis2.databinding.ADBException("purchasePriceNoTax cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceNoTax));
                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceRateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceRate", xmlWriter);


                if (localPurchasePriceRate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPurchasePriceRate);

                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceTaxTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceTax", xmlWriter);

                if (Double.isNaN(localPurchasePriceTax)) {

                    throw new org.apache.axis2.databinding.ADBException("purchasePriceTax cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceTax));
                }

                xmlWriter.writeEndElement();
            } if (localPurchasePriceUpperTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "purchasePriceUpper", xmlWriter);

                if (Double.isNaN(localPurchasePriceUpper)) {

                    throw new org.apache.axis2.databinding.ADBException("purchasePriceUpper cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceUpper));
                }

                xmlWriter.writeEndElement();
            } if (localRateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rate", xmlWriter);

                if (Double.isNaN(localRate)) {

                    throw new org.apache.axis2.databinding.ADBException("rate cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRate));
                }

                xmlWriter.writeEndElement();
            } if (localRateExceptionTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rateException", xmlWriter);

                if (Double.isNaN(localRateException)) {

                    throw new org.apache.axis2.databinding.ADBException("rateException cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateException));
                }

                xmlWriter.writeEndElement();
            } if (localRateSpecializeRepairTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rateSpecializeRepair", xmlWriter);

                if (Double.isNaN(localRateSpecializeRepair)) {

                    throw new org.apache.axis2.databinding.ADBException("rateSpecializeRepair cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateSpecializeRepair));
                }

                xmlWriter.writeEndElement();
            } if (localRateVehRiskChangeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rateVehRiskChange", xmlWriter);

                if (Double.isNaN(localRateVehRiskChange)) {

                    throw new org.apache.axis2.databinding.ADBException("rateVehRiskChange cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateVehRiskChange));
                }

                xmlWriter.writeEndElement();
            } if (localRateVehRiskRepairTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rateVehRiskRepair", xmlWriter);

                if (Double.isNaN(localRateVehRiskRepair)) {

                    throw new org.apache.axis2.databinding.ADBException("rateVehRiskRepair cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateVehRiskRepair));
                }

                xmlWriter.writeEndElement();
            } if (localRefCode1Tracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "refCode1", xmlWriter);


                if (localRefCode1==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRefCode1);

                }

                xmlWriter.writeEndElement();
            } if (localRefCode2Tracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "refCode2", xmlWriter);


                if (localRefCode2==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRefCode2);

                }

                xmlWriter.writeEndElement();
            } if (localReliefVehicleFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "reliefVehicleFlag", xmlWriter);


                if (localReliefVehicleFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localReliefVehicleFlag);

                }

                xmlWriter.writeEndElement();
            } if (localRemarkTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "remark", xmlWriter);


                if (localRemark==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRemark);

                }

                xmlWriter.writeEndElement();
            } if (localRiskDescTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "riskDesc", xmlWriter);


                if (localRiskDesc==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRiskDesc);

                }

                xmlWriter.writeEndElement();
            } if (localRiskFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "riskFlag", xmlWriter);


                if (localRiskFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRiskFlag);

                }

                xmlWriter.writeEndElement();
            } if (localRiskOtherFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "riskOtherFlag", xmlWriter);


                if (localRiskOtherFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRiskOtherFlag);

                }

                xmlWriter.writeEndElement();
            } if (localRiskOtherNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "riskOtherName", xmlWriter);


                if (localRiskOtherName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRiskOtherName);

                }

                xmlWriter.writeEndElement();
            } if (localSearchCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "searchCode", xmlWriter);


                if (localSearchCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSearchCode);

                }

                xmlWriter.writeEndElement();
            } if (localSearchSequenceNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "searchSequenceNo", xmlWriter);


                if (localSearchSequenceNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSearchSequenceNo);

                }

                xmlWriter.writeEndElement();
            } if (localSeatCountTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "seatCount", xmlWriter);

                if (localSeatCount== Integer.MIN_VALUE) {

                    throw new org.apache.axis2.databinding.ADBException("seatCount cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSeatCount));
                }

                xmlWriter.writeEndElement();
            } if (localSeatMaxTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "seatMax", xmlWriter);


                if (localSeatMax==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSeatMax);

                }

                xmlWriter.writeEndElement();
            } if (localSeatMinTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "seatMin", xmlWriter);


                if (localSeatMin==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSeatMin);

                }

                xmlWriter.writeEndElement();
            } if (localStandarNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "standarName", xmlWriter);


                if (localStandarName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localStandarName);

                }

                xmlWriter.writeEndElement();
            } if (localStopFlagTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "stopFlag", xmlWriter);


                if (localStopFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localStopFlag);

                }

                xmlWriter.writeEndElement();
            } if (localStrGtxqTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "strGtxq", xmlWriter);


                if (localStrGtxq==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localStrGtxq);

                }

                xmlWriter.writeEndElement();
            } if (localSyxClassIDTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "syxClassID", xmlWriter);


                if (localSyxClassID==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSyxClassID);

                }

                xmlWriter.writeEndElement();
            } if (localSyxClassNameTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "syxClassName", xmlWriter);


                if (localSyxClassName==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSyxClassName);

                }

                xmlWriter.writeEndElement();
            } if (localTransmissionTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transmissionType", xmlWriter);


                if (localTransmissionType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransmissionType);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleAliasTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleAlias", xmlWriter);


                if (localVehicleAlias==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleAlias);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleBrand1Tracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleBrand1", xmlWriter);


                if (localVehicleBrand1==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleBrand1);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleClassTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleClass", xmlWriter);


                if (localVehicleClass==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleClass);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleStyleDescTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleStyleDesc", xmlWriter);


                if (localVehicleStyleDesc==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVehicleStyleDesc);

                }

                xmlWriter.writeEndElement();
            } if (localVehicleTonnageTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleTonnage", xmlWriter);

                if (Double.isNaN(localVehicleTonnage)) {

                    throw new org.apache.axis2.databinding.ADBException("vehicleTonnage cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleTonnage));
                }

                xmlWriter.writeEndElement();
            } if (localVehicleWeightTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vehicleWeight", xmlWriter);

                if (Double.isNaN(localVehicleWeight)) {

                    throw new org.apache.axis2.databinding.ADBException("vehicleWeight cannot be null!!");

                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleWeight));
                }

                xmlWriter.writeEndElement();
            } if (localWeightMaxTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "weightMax", xmlWriter);


                if (localWeightMax==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localWeightMax);

                }

                xmlWriter.writeEndElement();
            } if (localJQXClassIDETracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "jQXClassID", xmlWriter);


                if (localJQXClassIDE==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localJQXClassIDE);

                }

                xmlWriter.writeEndElement();
            } if (localJQXClassNameETracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "jQXClassName", xmlWriter);


                if (localJQXClassNameE==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localJQXClassNameE);

                }

                xmlWriter.writeEndElement();
            } if (localRBCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "rBCode", xmlWriter);


                if (localRBCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localRBCode);

                }

                xmlWriter.writeEndElement();
            } if (localSYXClassIDETracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "sYXClassID", xmlWriter);


                if (localSYXClassIDE==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSYXClassIDE);

                }

                xmlWriter.writeEndElement();
            } if (localSYXClassNameETracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "sYXClassName", xmlWriter);


                if (localSYXClassNameE==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSYXClassNameE);

                }

                xmlWriter.writeEndElement();
            } if (localVINCodeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "vINCode", xmlWriter);


                if (localVINCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localVINCode);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAbsFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "absFlag"));

                elementList.add(localAbsFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAbsFlag));
            } if (localActualReferenceValueTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "actualReferenceValue"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActualReferenceValue));
            } if (localActualValueTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "actualValue"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActualValue));
            } if (localAirBagNumTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "airBagNum"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAirBagNum));
            } if (localAlarmFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "alarmFlag"));

                elementList.add(localAlarmFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlarmFlag));
            } if (localBatholithTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "batholith"));

                elementList.add(localBatholith==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBatholith));
            } if (localBrandCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "brandCode"));

                elementList.add(localBrandCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrandCode));
            } if (localBrandNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "brandName"));

                elementList.add(localBrandName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrandName));
            } if (localCategoryCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "categoryCode"));

                elementList.add(localCategoryCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCategoryCode));
            } if (localCompanyCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "companyCode"));

                elementList.add(localCompanyCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompanyCode));
            } if (localCompanyNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "companyName"));

                elementList.add(localCompanyName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompanyName));
            } if (localComplexSearchTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "complexSearch"));

                elementList.add(localComplexSearch==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComplexSearch));
            } if (localConfigTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "configType"));

                elementList.add(localConfigType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConfigType));
            } if (localCoveragePremiumItemArrTracker){
                if (localCoveragePremiumItemArr!=null) {
                    for (int i = 0;i < localCoveragePremiumItemArr.length;i++){

                        if (localCoveragePremiumItemArr[i] != null){
                            elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                                    "coveragePremiumItemArr"));
                            elementList.add(localCoveragePremiumItemArr[i]);
                        } else {

                            elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                                    "coveragePremiumItemArr"));
                            elementList.add(null);

                        }

                    }
                } else {

                    elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                            "coveragePremiumItemArr"));
                    elementList.add(localCoveragePremiumItemArr);

                }

            } if (localDeptCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "deptCode"));

                elementList.add(localDeptCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeptCode));
            } if (localEngineDescTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "engineDesc"));

                elementList.add(localEngineDesc==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEngineDesc));
            } if (localExhaustCapacityTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "exhaustCapacity"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExhaustCapacity));
            } if (localFairMarketValueMaxRateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fairMarketValueMaxRate"));

                elementList.add(localFairMarketValueMaxRate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFairMarketValueMaxRate));
            } if (localFairMarketValueMinRateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fairMarketValueMinRate"));

                elementList.add(localFairMarketValueMinRate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFairMarketValueMinRate));
            } if (localFamilyCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "familyCode"));

                elementList.add(localFamilyCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFamilyCode));
            } if (localFamilyNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "familyName"));

                elementList.add(localFamilyName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFamilyName));
            } if (localFcvehicleTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fcvehicle"));

                elementList.add(localFcvehicle==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFcvehicle));
            } if (localFuelCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fuelCode"));

                elementList.add(localFuelCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFuelCode));
            } if (localFuelNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fuelName"));

                elementList.add(localFuelName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFuelName));
            } if (localFuleTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fuleType"));

                elementList.add(localFuleType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFuleType));
            } if (localFullWeightMinTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "fullWeightMin"));

                elementList.add(localFullWeightMin==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFullWeightMin));
            } if (localGTFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "gTFlag"));

                elementList.add(localGTFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGTFlag));
            } if (localGTLowerLimitTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "gTLowerLimit"));

                elementList.add(localGTLowerLimit==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGTLowerLimit));
            } if (localGTTopLimitTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "gTTopLimit"));

                elementList.add(localGTTopLimit==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGTTopLimit));
            } if (localImportFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "importFlag"));

                elementList.add(localImportFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImportFlag));
            } if (localIsPricedTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "isPriced"));

                elementList.add(localIsPriced==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsPriced));
            } if (localJqxClassIDTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "jqxClassID"));

                elementList.add(localJqxClassID==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localJqxClassID));
            } if (localJqxClassNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "jqxClassName"));

                elementList.add(localJqxClassName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localJqxClassName));
            } if (localKindRedPriceTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "kindRedPrice"));

                elementList.add(localKindRedPrice==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindRedPrice));
            } if (localKindRedPriceTaxTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "kindRedPriceTax"));

                elementList.add(localKindRedPriceTax==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindRedPriceTax));
            } if (localKindredPriceETracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "kindredPrice"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindredPriceE));
            } if (localKindredPriceTaxETracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "kindredPriceTax"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindredPriceTaxE));
            } if (localMarketDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "marketDate"));

                elementList.add(localMarketDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMarketDate));
            } if (localModelCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "modelCode"));

                elementList.add(localModelCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModelCode));
            } if (localModelDescTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "modelDesc"));

                elementList.add(localModelDesc==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModelDesc));
            } if (localModelIDCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "modelIDCode"));

                elementList.add(localModelIDCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModelIDCode));
            } if (localModelNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "modelName"));

                elementList.add(localModelName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModelName));
            } if (localNewClassCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "newClassCode"));

                elementList.add(localNewClassCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNewClassCode));
            } if (localNewClassNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "newClassName"));

                elementList.add(localNewClassName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNewClassName));
            } if (localOriginCarPriceTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "originCarPrice"));

                elementList.add(localOriginCarPrice==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginCarPrice));
            } if (localPlatModelCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "platModelCode"));

                elementList.add(localPlatModelCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPlatModelCode));
            } if (localPlatModelNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "platModelName"));

                elementList.add(localPlatModelName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPlatModelName));
            } if (localPlatStandardNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "platStandardName"));

                elementList.add(localPlatStandardName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPlatStandardName));
            } if (localPowerTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "power"));

                elementList.add(localPower==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPower));
            } if (localPurchasePriceTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePrice"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePrice));
            } if (localPurchasePriceCalculateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceCalculate"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceCalculate));
            } if (localPurchasePriceLowerTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceLower"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceLower));
            } if (localPurchasePriceMaxRateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceMaxRate"));

                elementList.add(localPurchasePriceMaxRate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceMaxRate));
            } if (localPurchasePriceMinRateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceMinRate"));

                elementList.add(localPurchasePriceMinRate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceMinRate));
            } if (localPurchasePriceNoTaxTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceNoTax"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceNoTax));
            } if (localPurchasePriceRateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceRate"));

                elementList.add(localPurchasePriceRate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceRate));
            } if (localPurchasePriceTaxTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceTax"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceTax));
            } if (localPurchasePriceUpperTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "purchasePriceUpper"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPurchasePriceUpper));
            } if (localRateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rate"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRate));
            } if (localRateExceptionTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rateException"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateException));
            } if (localRateSpecializeRepairTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rateSpecializeRepair"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateSpecializeRepair));
            } if (localRateVehRiskChangeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rateVehRiskChange"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateVehRiskChange));
            } if (localRateVehRiskRepairTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rateVehRiskRepair"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRateVehRiskRepair));
            } if (localRefCode1Tracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "refCode1"));

                elementList.add(localRefCode1==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefCode1));
            } if (localRefCode2Tracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "refCode2"));

                elementList.add(localRefCode2==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRefCode2));
            } if (localReliefVehicleFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "reliefVehicleFlag"));

                elementList.add(localReliefVehicleFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReliefVehicleFlag));
            } if (localRemarkTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "remark"));

                elementList.add(localRemark==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemark));
            } if (localRiskDescTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "riskDesc"));

                elementList.add(localRiskDesc==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskDesc));
            } if (localRiskFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "riskFlag"));

                elementList.add(localRiskFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskFlag));
            } if (localRiskOtherFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "riskOtherFlag"));

                elementList.add(localRiskOtherFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskOtherFlag));
            } if (localRiskOtherNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "riskOtherName"));

                elementList.add(localRiskOtherName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskOtherName));
            } if (localSearchCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "searchCode"));

                elementList.add(localSearchCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchCode));
            } if (localSearchSequenceNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "searchSequenceNo"));

                elementList.add(localSearchSequenceNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchSequenceNo));
            } if (localSeatCountTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "seatCount"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSeatCount));
            } if (localSeatMaxTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "seatMax"));

                elementList.add(localSeatMax==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSeatMax));
            } if (localSeatMinTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "seatMin"));

                elementList.add(localSeatMin==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSeatMin));
            } if (localStandarNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "standarName"));

                elementList.add(localStandarName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStandarName));
            } if (localStopFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "stopFlag"));

                elementList.add(localStopFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStopFlag));
            } if (localStrGtxqTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "strGtxq"));

                elementList.add(localStrGtxq==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStrGtxq));
            } if (localSyxClassIDTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "syxClassID"));

                elementList.add(localSyxClassID==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSyxClassID));
            } if (localSyxClassNameTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "syxClassName"));

                elementList.add(localSyxClassName==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSyxClassName));
            } if (localTransmissionTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "transmissionType"));

                elementList.add(localTransmissionType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransmissionType));
            } if (localVehicleAliasTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleAlias"));

                elementList.add(localVehicleAlias==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleAlias));
            } if (localVehicleBrand1Tracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleBrand1"));

                elementList.add(localVehicleBrand1==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleBrand1));
            } if (localVehicleClassTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleClass"));

                elementList.add(localVehicleClass==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleClass));
            } if (localVehicleStyleDescTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleStyleDesc"));

                elementList.add(localVehicleStyleDesc==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleStyleDesc));
            } if (localVehicleTonnageTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleTonnage"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleTonnage));
            } if (localVehicleWeightTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vehicleWeight"));

                elementList.add(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVehicleWeight));
            } if (localWeightMaxTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "weightMax"));

                elementList.add(localWeightMax==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWeightMax));
            } if (localJQXClassIDETracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "jQXClassID"));

                elementList.add(localJQXClassIDE==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localJQXClassIDE));
            } if (localJQXClassNameETracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "jQXClassName"));

                elementList.add(localJQXClassNameE==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localJQXClassNameE));
            } if (localRBCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "rBCode"));

                elementList.add(localRBCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRBCode));
            } if (localSYXClassIDETracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "sYXClassID"));

                elementList.add(localSYXClassIDE==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSYXClassIDE));
            } if (localSYXClassNameETracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "sYXClassName"));

                elementList.add(localSYXClassNameE==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSYXClassNameE));
            } if (localVINCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "vINCode"));

                elementList.add(localVINCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVINCode));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VehicleModelData parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                VehicleModelData object =
                        new VehicleModelData();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"VehicleModelData".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (VehicleModelData)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    java.util.ArrayList list14 = new java.util.ArrayList();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","absFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setAbsFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","actualReferenceValue").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setActualReferenceValue(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setActualReferenceValue(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","actualValue").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setActualValue(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setActualValue(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","airBagNum").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setAirBagNum(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setAirBagNum(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","alarmFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setAlarmFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","batholith").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setBatholith(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","brandCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setBrandCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","brandName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setBrandName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","categoryCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCategoryCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","companyCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCompanyCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","companyName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCompanyName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","complexSearch").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setComplexSearch(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","configType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setConfigType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","coveragePremiumItemArr").equals(reader.getName())){



                        // Process the array and step past its final element's end.

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            list14.add(null);
                            reader.next();
                        } else {
                            list14.add(CoveragePremiumItem.Factory.parse(reader));
                        }
                        //loop until we find a start element that is not part of this array
                        boolean loopDone14 = false;
                        while(!loopDone14){
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            if (reader.isEndElement()){
                                //two continuous end elements means we are exiting the xml structure
                                loopDone14 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","coveragePremiumItemArr").equals(reader.getName())){

                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        list14.add(null);
                                        reader.next();
                                    } else {
                                        list14.add(CoveragePremiumItem.Factory.parse(reader));
                                    }
                                }else{
                                    loopDone14 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setCoveragePremiumItemArr((CoveragePremiumItem[])
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                        CoveragePremiumItem.class,
                                        list14));

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","deptCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setDeptCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","engineDesc").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEngineDesc(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","exhaustCapacity").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setExhaustCapacity(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setExhaustCapacity(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fairMarketValueMaxRate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFairMarketValueMaxRate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fairMarketValueMinRate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFairMarketValueMinRate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","familyCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFamilyCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","familyName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFamilyName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fcvehicle").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFcvehicle(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fuelCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFuelCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fuelName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFuelName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fuleType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFuleType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","fullWeightMin").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFullWeightMin(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","gTFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setGTFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","gTLowerLimit").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setGTLowerLimit(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","gTTopLimit").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setGTTopLimit(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","importFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setImportFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","isPriced").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setIsPriced(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","jqxClassID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setJqxClassID(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","jqxClassName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setJqxClassName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","kindRedPrice").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setKindRedPrice(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","kindRedPriceTax").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setKindRedPriceTax(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","kindredPrice").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setKindredPriceE(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setKindredPriceE(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","kindredPriceTax").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setKindredPriceTaxE(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setKindredPriceTaxE(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","marketDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setMarketDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","modelCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setModelCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","modelDesc").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setModelDesc(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","modelIDCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setModelIDCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","modelName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setModelName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","newClassCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setNewClassCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","newClassName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setNewClassName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","originCarPrice").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOriginCarPrice(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","platModelCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPlatModelCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","platModelName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPlatModelName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","platStandardName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPlatStandardName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","power").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPower(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePrice").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setPurchasePrice(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setPurchasePrice(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceCalculate").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setPurchasePriceCalculate(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setPurchasePriceCalculate(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceLower").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setPurchasePriceLower(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setPurchasePriceLower(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceMaxRate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPurchasePriceMaxRate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceMinRate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPurchasePriceMinRate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceNoTax").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setPurchasePriceNoTax(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setPurchasePriceNoTax(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceRate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPurchasePriceRate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceTax").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setPurchasePriceTax(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setPurchasePriceTax(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","purchasePriceUpper").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setPurchasePriceUpper(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setPurchasePriceUpper(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rate").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setRate(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setRate(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rateException").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setRateException(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setRateException(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rateSpecializeRepair").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setRateSpecializeRepair(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setRateSpecializeRepair(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rateVehRiskChange").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setRateVehRiskChange(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setRateVehRiskChange(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rateVehRiskRepair").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setRateVehRiskRepair(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setRateVehRiskRepair(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","refCode1").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRefCode1(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","refCode2").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRefCode2(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","reliefVehicleFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setReliefVehicleFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","remark").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRemark(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","riskDesc").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRiskDesc(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","riskFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRiskFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","riskOtherFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRiskOtherFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","riskOtherName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRiskOtherName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","searchCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSearchCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","searchSequenceNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSearchSequenceNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","seatCount").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setSeatCount(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setSeatCount(Integer.MIN_VALUE);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","seatMax").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSeatMax(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","seatMin").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSeatMin(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","standarName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setStandarName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","stopFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setStopFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","strGtxq").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setStrGtxq(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","syxClassID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSyxClassID(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","syxClassName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSyxClassName(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","transmissionType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransmissionType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleAlias").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleAlias(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleBrand1").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleBrand1(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleClass").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleClass(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleStyleDesc").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVehicleStyleDesc(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleTonnage").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setVehicleTonnage(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setVehicleTonnage(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vehicleWeight").equals(reader.getName())){

                        String content = reader.getElementText();

                        object.setVehicleWeight(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                        object.setVehicleWeight(Double.NaN);

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","weightMax").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setWeightMax(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","jQXClassID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setJQXClassIDE(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","jQXClassName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setJQXClassNameE(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","rBCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setRBCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","sYXClassID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSYXClassIDE(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","sYXClassName").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSYXClassNameE(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","vINCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setVINCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TMBVehicleInfo
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TMBVehicleInfo
                Namespace URI = http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns3
                */


        /**
         * field for CarOwner
         */


        protected String localCarOwner ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCarOwnerTracker = false ;

        public boolean isCarOwnerSpecified(){
            return localCarOwnerTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getCarOwner(){
            return localCarOwner;
        }



        /**
         * Auto generated setter method
         * @param param CarOwner
         */
        public void setCarOwner(String param){
            localCarOwnerTracker = true;

            this.localCarOwner=param;


        }


        /**
         * field for EnginNo
         */


        protected String localEnginNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEnginNoTracker = false ;

        public boolean isEnginNoSpecified(){
            return localEnginNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEnginNo(){
            return localEnginNo;
        }



        /**
         * Auto generated setter method
         * @param param EnginNo
         */
        public void setEnginNo(String param){
            localEnginNoTracker = true;

            this.localEnginNo=param;


        }


        /**
         * field for EnrollDate
         */


        protected String localEnrollDate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localEnrollDateTracker = false ;

        public boolean isEnrollDateSpecified(){
            return localEnrollDateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getEnrollDate(){
            return localEnrollDate;
        }



        /**
         * Auto generated setter method
         * @param param EnrollDate
         */
        public void setEnrollDate(String param){
            localEnrollDateTracker = true;

            this.localEnrollDate=param;


        }


        /**
         * field for FrameNo
         */


        protected String localFrameNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localFrameNoTracker = false ;

        public boolean isFrameNoSpecified(){
            return localFrameNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getFrameNo(){
            return localFrameNo;
        }



        /**
         * Auto generated setter method
         * @param param FrameNo
         */
        public void setFrameNo(String param){
            localFrameNoTracker = true;

            this.localFrameNo=param;


        }


        /**
         * field for LicenseNo
         */


        protected String localLicenseNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLicenseNoTracker = false ;

        public boolean isLicenseNoSpecified(){
            return localLicenseNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLicenseNo(){
            return localLicenseNo;
        }



        /**
         * Auto generated setter method
         * @param param LicenseNo
         */
        public void setLicenseNo(String param){
            localLicenseNoTracker = true;

            this.localLicenseNo=param;


        }


        /**
         * field for LicenseType
         */


        protected String localLicenseType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localLicenseTypeTracker = false ;

        public boolean isLicenseTypeSpecified(){
            return localLicenseTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getLicenseType(){
            return localLicenseType;
        }



        /**
         * Auto generated setter method
         * @param param LicenseType
         */
        public void setLicenseType(String param){
            localLicenseTypeTracker = true;

            this.localLicenseType=param;


        }


        /**
         * field for SearchSequenceNo
         */


        protected String localSearchSequenceNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localSearchSequenceNoTracker = false ;

        public boolean isSearchSequenceNoSpecified(){
            return localSearchSequenceNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getSearchSequenceNo(){
            return localSearchSequenceNo;
        }



        /**
         * Auto generated setter method
         * @param param SearchSequenceNo
         */
        public void setSearchSequenceNo(String param){
            localSearchSequenceNoTracker = true;

            this.localSearchSequenceNo=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":TMBVehicleInfo",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "TMBVehicleInfo",
                            xmlWriter);
                }


            }
            if (localCarOwnerTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "carOwner", xmlWriter);


                if (localCarOwner==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localCarOwner);

                }

                xmlWriter.writeEndElement();
            } if (localEnginNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "enginNo", xmlWriter);


                if (localEnginNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEnginNo);

                }

                xmlWriter.writeEndElement();
            } if (localEnrollDateTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "enrollDate", xmlWriter);


                if (localEnrollDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localEnrollDate);

                }

                xmlWriter.writeEndElement();
            } if (localFrameNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "frameNo", xmlWriter);


                if (localFrameNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localFrameNo);

                }

                xmlWriter.writeEndElement();
            } if (localLicenseNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "licenseNo", xmlWriter);


                if (localLicenseNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLicenseNo);

                }

                xmlWriter.writeEndElement();
            } if (localLicenseTypeTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "licenseType", xmlWriter);


                if (localLicenseType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localLicenseType);

                }

                xmlWriter.writeEndElement();
            } if (localSearchSequenceNoTracker){
                namespace = "http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "searchSequenceNo", xmlWriter);


                if (localSearchSequenceNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localSearchSequenceNo);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCarOwnerTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "carOwner"));

                elementList.add(localCarOwner==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCarOwner));
            } if (localEnginNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "enginNo"));

                elementList.add(localEnginNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnginNo));
            } if (localEnrollDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "enrollDate"));

                elementList.add(localEnrollDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnrollDate));
            } if (localFrameNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "frameNo"));

                elementList.add(localFrameNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrameNo));
            } if (localLicenseNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "licenseNo"));

                elementList.add(localLicenseNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseNo));
            } if (localLicenseTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "licenseType"));

                elementList.add(localLicenseType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseType));
            } if (localSearchSequenceNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "searchSequenceNo"));

                elementList.add(localSearchSequenceNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchSequenceNo));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TMBVehicleInfo parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TMBVehicleInfo object =
                        new TMBVehicleInfo();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TMBVehicleInfo".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TMBVehicleInfo)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","carOwner").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setCarOwner(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","enginNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEnginNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","enrollDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setEnrollDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","frameNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setFrameNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","licenseNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLicenseNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","licenseType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setLicenseType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com/xsd","searchSequenceNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setSearchSequenceNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TransResultEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TransResultEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for ErrorNo
         */


        protected String localErrorNo ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localErrorNoTracker = false ;

        public boolean isErrorNoSpecified(){
            return localErrorNoTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getErrorNo(){
            return localErrorNo;
        }



        /**
         * Auto generated setter method
         * @param param ErrorNo
         */
        public void setErrorNo(String param){
            localErrorNoTracker = true;

            this.localErrorNo=param;


        }


        /**
         * field for ErrorType
         */


        protected String localErrorType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localErrorTypeTracker = false ;

        public boolean isErrorTypeSpecified(){
            return localErrorTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getErrorType(){
            return localErrorType;
        }



        /**
         * Auto generated setter method
         * @param param ErrorType
         */
        public void setErrorType(String param){
            localErrorTypeTracker = true;

            this.localErrorType=param;


        }


        /**
         * field for ResultCode
         */


        protected String localResultCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localResultCodeTracker = false ;

        public boolean isResultCodeSpecified(){
            return localResultCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getResultCode(){
            return localResultCode;
        }



        /**
         * Auto generated setter method
         * @param param ResultCode
         */
        public void setResultCode(String param){
            localResultCodeTracker = true;

            this.localResultCode=param;


        }


        /**
         * field for ResultInfoDesc
         */


        protected String localResultInfoDesc ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localResultInfoDescTracker = false ;

        public boolean isResultInfoDescSpecified(){
            return localResultInfoDescTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getResultInfoDesc(){
            return localResultInfoDesc;
        }



        /**
         * Auto generated setter method
         * @param param ResultInfoDesc
         */
        public void setResultInfoDesc(String param){
            localResultInfoDescTracker = true;

            this.localResultInfoDesc=param;


        }


        /**
         * field for StackTrace
         */


        protected String localStackTrace ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localStackTraceTracker = false ;

        public boolean isStackTraceSpecified(){
            return localStackTraceTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getStackTrace(){
            return localStackTrace;
        }



        /**
         * Auto generated setter method
         * @param param StackTrace
         */
        public void setStackTrace(String param){
            localStackTraceTracker = true;

            this.localStackTrace=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":TransResultEhm",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "TransResultEhm",
                            xmlWriter);
                }


            }
            if (localErrorNoTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "errorNo", xmlWriter);


                if (localErrorNo==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localErrorNo);

                }

                xmlWriter.writeEndElement();
            } if (localErrorTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "errorType", xmlWriter);


                if (localErrorType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localErrorType);

                }

                xmlWriter.writeEndElement();
            } if (localResultCodeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "resultCode", xmlWriter);


                if (localResultCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localResultCode);

                }

                xmlWriter.writeEndElement();
            } if (localResultInfoDescTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "resultInfoDesc", xmlWriter);


                if (localResultInfoDesc==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localResultInfoDesc);

                }

                xmlWriter.writeEndElement();
            } if (localStackTraceTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "stackTrace", xmlWriter);


                if (localStackTrace==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localStackTrace);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localErrorNoTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "errorNo"));

                elementList.add(localErrorNo==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorNo));
            } if (localErrorTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "errorType"));

                elementList.add(localErrorType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorType));
            } if (localResultCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "resultCode"));

                elementList.add(localResultCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCode));
            } if (localResultInfoDescTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "resultInfoDesc"));

                elementList.add(localResultInfoDesc==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultInfoDesc));
            } if (localStackTraceTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "stackTrace"));

                elementList.add(localStackTrace==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStackTrace));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TransResultEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TransResultEhm object =
                        new TransResultEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TransResultEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TransResultEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","errorNo").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setErrorNo(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","errorType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setErrorType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","resultCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setResultCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","resultInfoDesc").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setResultInfoDesc(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","stackTrace").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setStackTrace(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class SetCommonCheck
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "setCommonCheck",
                "ns8");



        /**
         * field for CommonCheck
         */


        protected CommonCheckEbusiness localCommonCheck ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localCommonCheckTracker = false ;

        public boolean isCommonCheckSpecified(){
            return localCommonCheckTracker;
        }



        /**
         * Auto generated getter method
         * @return CommonCheckEbusiness
         */
        public  CommonCheckEbusiness getCommonCheck(){
            return localCommonCheck;
        }



        /**
         * Auto generated setter method
         * @param param CommonCheck
         */
        public void setCommonCheck(CommonCheckEbusiness param){
            localCommonCheckTracker = true;

            this.localCommonCheck=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":setCommonCheck",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "setCommonCheck",
                            xmlWriter);
                }


            }
            if (localCommonCheckTracker){
                if (localCommonCheck==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "commonCheck", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localCommonCheck.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","commonCheck"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCommonCheckTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "commonCheck"));


                elementList.add(localCommonCheck==null?null:
                        localCommonCheck);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SetCommonCheck parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                SetCommonCheck object =
                        new SetCommonCheck();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"setCommonCheck".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SetCommonCheck)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","commonCheck").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setCommonCheck(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setCommonCheck(CommonCheckEbusiness.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TXInsuranceExtensionEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceExtensionEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for Operator
         */


        protected String localOperator ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localOperatorTracker = false ;

        public boolean isOperatorSpecified(){
            return localOperatorTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getOperator(){
            return localOperator;
        }



        /**
         * Auto generated setter method
         * @param param Operator
         */
        public void setOperator(String param){
            localOperatorTracker = true;

            this.localOperator=param;


        }


        /**
         * field for OperatorKey
         */


        protected String localOperatorKey ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localOperatorKeyTracker = false ;

        public boolean isOperatorKeySpecified(){
            return localOperatorKeyTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getOperatorKey(){
            return localOperatorKey;
        }



        /**
         * Auto generated setter method
         * @param param OperatorKey
         */
        public void setOperatorKey(String param){
            localOperatorKeyTracker = true;

            this.localOperatorKey=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":TXInsuranceExtensionEhm",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "TXInsuranceExtensionEhm",
                            xmlWriter);
                }


            }
            if (localOperatorTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "operator", xmlWriter);


                if (localOperator==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOperator);

                }

                xmlWriter.writeEndElement();
            } if (localOperatorKeyTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "operatorKey", xmlWriter);


                if (localOperatorKey==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOperatorKey);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localOperatorTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "operator"));

                elementList.add(localOperator==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
            } if (localOperatorKeyTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "operatorKey"));

                elementList.add(localOperatorKey==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperatorKey));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TXInsuranceExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TXInsuranceExtensionEhm object =
                        new TXInsuranceExtensionEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceExtensionEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOperator(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","operatorKey").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOperatorKey(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TXInsuranceEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */


        /**
         * field for TransExeDate
         */


        protected String localTransExeDate ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransExeDateTracker = false ;

        public boolean isTransExeDateSpecified(){
            return localTransExeDateTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTransExeDate(){
            return localTransExeDate;
        }



        /**
         * Auto generated setter method
         * @param param TransExeDate
         */
        public void setTransExeDate(String param){
            localTransExeDateTracker = true;

            this.localTransExeDate=param;


        }


        /**
         * field for TransExeTime
         */


        protected String localTransExeTime ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransExeTimeTracker = false ;

        public boolean isTransExeTimeSpecified(){
            return localTransExeTimeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTransExeTime(){
            return localTransExeTime;
        }



        /**
         * Auto generated setter method
         * @param param TransExeTime
         */
        public void setTransExeTime(String param){
            localTransExeTimeTracker = true;

            this.localTransExeTime=param;


        }


        /**
         * field for TransRefGUID
         */


        protected String localTransRefGUID ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransRefGUIDTracker = false ;

        public boolean isTransRefGUIDSpecified(){
            return localTransRefGUIDTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTransRefGUID(){
            return localTransRefGUID;
        }



        /**
         * Auto generated setter method
         * @param param TransRefGUID
         */
        public void setTransRefGUID(String param){
            localTransRefGUIDTracker = true;

            this.localTransRefGUID=param;


        }


        /**
         * field for TransSubType
         */


        protected String localTransSubType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransSubTypeTracker = false ;

        public boolean isTransSubTypeSpecified(){
            return localTransSubTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTransSubType(){
            return localTransSubType;
        }



        /**
         * Auto generated setter method
         * @param param TransSubType
         */
        public void setTransSubType(String param){
            localTransSubTypeTracker = true;

            this.localTransSubType=param;


        }


        /**
         * field for TransType
         */


        protected String localTransType ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localTransTypeTracker = false ;

        public boolean isTransTypeSpecified(){
            return localTransTypeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getTransType(){
            return localTransType;
        }



        /**
         * Auto generated setter method
         * @param param TransType
         */
        public void setTransType(String param){
            localTransTypeTracker = true;

            this.localTransType=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":TXInsuranceEhm",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "TXInsuranceEhm",
                            xmlWriter);
                }


            }
            if (localTransExeDateTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transExeDate", xmlWriter);


                if (localTransExeDate==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransExeDate);

                }

                xmlWriter.writeEndElement();
            } if (localTransExeTimeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transExeTime", xmlWriter);


                if (localTransExeTime==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransExeTime);

                }

                xmlWriter.writeEndElement();
            } if (localTransRefGUIDTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transRefGUID", xmlWriter);


                if (localTransRefGUID==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransRefGUID);

                }

                xmlWriter.writeEndElement();
            } if (localTransSubTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transSubType", xmlWriter);


                if (localTransSubType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransSubType);

                }

                xmlWriter.writeEndElement();
            } if (localTransTypeTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "transType", xmlWriter);


                if (localTransType==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localTransType);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localTransExeDateTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transExeDate"));

                elementList.add(localTransExeDate==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeDate));
            } if (localTransExeTimeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transExeTime"));

                elementList.add(localTransExeTime==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeTime));
            } if (localTransRefGUIDTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transRefGUID"));

                elementList.add(localTransRefGUID==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransRefGUID));
            } if (localTransSubTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transSubType"));

                elementList.add(localTransSubType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransSubType));
            } if (localTransTypeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "transType"));

                elementList.add(localTransType==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransType));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TXInsuranceEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TXInsuranceEhm object =
                        new TXInsuranceEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transExeDate").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransExeDate(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transExeTime").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransExeTime(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transRefGUID").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransRefGUID(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transSubType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransSubType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","transType").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setTransType(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class SetRequesttool
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "setRequesttool",
                "ns8");



        /**
         * field for Requesttool
         */


        protected GenRequestXMLTools localRequesttool ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localRequesttoolTracker = false ;

        public boolean isRequesttoolSpecified(){
            return localRequesttoolTracker;
        }



        /**
         * Auto generated getter method
         * @return GenRequestXMLTools
         */
        public  GenRequestXMLTools getRequesttool(){
            return localRequesttool;
        }



        /**
         * Auto generated setter method
         * @param param Requesttool
         */
        public void setRequesttool(GenRequestXMLTools param){
            localRequesttoolTracker = true;

            this.localRequesttool=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":setRequesttool",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "setRequesttool",
                            xmlWriter);
                }


            }
            if (localRequesttoolTracker){
                if (localRequesttool==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "requesttool", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localRequesttool.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","requesttool"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localRequesttoolTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "requesttool"));


                elementList.add(localRequesttool==null?null:
                        localRequesttool);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SetRequesttool parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                SetRequesttool object =
                        new SetRequesttool();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"setRequesttool".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SetRequesttool)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","requesttool").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setRequesttool(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setRequesttool(GenRequestXMLTools.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class SetConvert
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "setConvert",
                "ns8");



        /**
         * field for Convert
         */


        protected VehicleModelConvert localConvert ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localConvertTracker = false ;

        public boolean isConvertSpecified(){
            return localConvertTracker;
        }



        /**
         * Auto generated getter method
         * @return VehicleModelConvert
         */
        public  VehicleModelConvert getConvert(){
            return localConvert;
        }



        /**
         * Auto generated setter method
         * @param param Convert
         */
        public void setConvert(VehicleModelConvert param){
            localConvertTracker = true;

            this.localConvert=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":setConvert",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "setConvert",
                            xmlWriter);
                }


            }
            if (localConvertTracker){
                if (localConvert==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "convert", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localConvert.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","convert"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localConvertTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "convert"));


                elementList.add(localConvert==null?null:
                        localConvert);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SetConvert parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                SetConvert object =
                        new SetConvert();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"setConvert".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SetConvert)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","convert").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setConvert(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setConvert(VehicleModelConvert.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class TXInsuranceRequestExtensionEhm extends TXInsuranceExtensionEhm
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceRequestExtensionEhm
                Namespace URI = http://dto.common.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns5
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


            String namespacePrefix = registerPrefix(xmlWriter,"http://dto.common.GST.webServiceCenter.sinosoft.com/xsd");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        namespacePrefix+":TXInsuranceRequestExtensionEhm",
                        xmlWriter);
            } else {
                writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                        "TXInsuranceRequestExtensionEhm",
                        xmlWriter);
            }

            if (localOperatorTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "operator", xmlWriter);


                if (localOperator==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOperator);

                }

                xmlWriter.writeEndElement();
            } if (localOperatorKeyTracker){
                namespace = "http://dto.common.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "operatorKey", xmlWriter);


                if (localOperatorKey==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localOperatorKey);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();


            attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
            attribList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","TXInsuranceRequestExtensionEhm"));
            if (localOperatorTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "operator"));

                elementList.add(localOperator==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
            } if (localOperatorKeyTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd",
                        "operatorKey"));

                elementList.add(localOperatorKey==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperatorKey));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TXInsuranceRequestExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                TXInsuranceRequestExtensionEhm object =
                        new TXInsuranceRequestExtensionEhm();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceRequestExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceRequestExtensionEhm)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOperator(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.common.GST.webServiceCenter.sinosoft.com/xsd","operatorKey").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setOperatorKey(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class SetResponsetool
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "setResponsetool",
                "ns8");



        /**
         * field for Responsetool
         */


        protected GenResponseXMLTools localResponsetool ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localResponsetoolTracker = false ;

        public boolean isResponsetoolSpecified(){
            return localResponsetoolTracker;
        }



        /**
         * Auto generated getter method
         * @return GenResponseXMLTools
         */
        public  GenResponseXMLTools getResponsetool(){
            return localResponsetool;
        }



        /**
         * Auto generated setter method
         * @param param Responsetool
         */
        public void setResponsetool(GenResponseXMLTools param){
            localResponsetoolTracker = true;

            this.localResponsetool=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":setResponsetool",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "setResponsetool",
                            xmlWriter);
                }


            }
            if (localResponsetoolTracker){
                if (localResponsetool==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "responsetool", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    localResponsetool.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","responsetool"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localResponsetoolTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "responsetool"));


                elementList.add(localResponsetool==null?null:
                        localResponsetool);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SetResponsetool parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                SetResponsetool object =
                        new SetResponsetool();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"setResponsetool".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SetResponsetool)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","responsetool").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.setResponsetool(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.setResponsetool(GenResponseXMLTools.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class CoveragePremiumItem
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CoveragePremiumItem
                Namespace URI = http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns4
                */


        /**
         * field for KindCode
         */


        protected String localKindCode ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localKindCodeTracker = false ;

        public boolean isKindCodeSpecified(){
            return localKindCodeTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getKindCode(){
            return localKindCode;
        }



        /**
         * Auto generated setter method
         * @param param KindCode
         */
        public void setKindCode(String param){
            localKindCodeTracker = true;

            this.localKindCode=param;


        }


        /**
         * field for PureRiskPremium
         */


        protected String localPureRiskPremium ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPureRiskPremiumTracker = false ;

        public boolean isPureRiskPremiumSpecified(){
            return localPureRiskPremiumTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPureRiskPremium(){
            return localPureRiskPremium;
        }



        /**
         * Auto generated setter method
         * @param param PureRiskPremium
         */
        public void setPureRiskPremium(String param){
            localPureRiskPremiumTracker = true;

            this.localPureRiskPremium=param;


        }


        /**
         * field for PureRiskPremiumFlag
         */


        protected String localPureRiskPremiumFlag ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean localPureRiskPremiumFlagTracker = false ;

        public boolean isPureRiskPremiumFlagSpecified(){
            return localPureRiskPremiumFlagTracker;
        }



        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public  String getPureRiskPremiumFlag(){
            return localPureRiskPremiumFlag;
        }



        /**
         * Auto generated setter method
         * @param param PureRiskPremiumFlag
         */
        public void setPureRiskPremiumFlag(String param){
            localPureRiskPremiumFlagTracker = true;

            this.localPureRiskPremiumFlag=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":CoveragePremiumItem",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "CoveragePremiumItem",
                            xmlWriter);
                }


            }
            if (localKindCodeTracker){
                namespace = "http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "kindCode", xmlWriter);


                if (localKindCode==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localKindCode);

                }

                xmlWriter.writeEndElement();
            } if (localPureRiskPremiumTracker){
                namespace = "http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "pureRiskPremium", xmlWriter);


                if (localPureRiskPremium==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPureRiskPremium);

                }

                xmlWriter.writeEndElement();
            } if (localPureRiskPremiumFlagTracker){
                namespace = "http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd";
                writeStartElement(null, namespace, "pureRiskPremiumFlag", xmlWriter);


                if (localPureRiskPremiumFlag==null){
                    // write the nil attribute

                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                }else{


                    xmlWriter.writeCharacters(localPureRiskPremiumFlag);

                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd")){
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localKindCodeTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "kindCode"));

                elementList.add(localKindCode==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKindCode));
            } if (localPureRiskPremiumTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "pureRiskPremium"));

                elementList.add(localPureRiskPremium==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPureRiskPremium));
            } if (localPureRiskPremiumFlagTracker){
                elementList.add(new javax.xml.namespace.QName("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd",
                        "pureRiskPremiumFlag"));

                elementList.add(localPureRiskPremiumFlag==null?null:
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPureRiskPremiumFlag));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CoveragePremiumItem parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                CoveragePremiumItem object =
                        new CoveragePremiumItem();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"CoveragePremiumItem".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CoveragePremiumItem)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd","kindCode").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setKindCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd","pureRiskPremium").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPureRiskPremium(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://dto.serviceV2X.vehiclePureRiskQuery.GST.webServiceCenter.sinosoft.com/xsd","pureRiskPremiumFlag").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                            String content = reader.getElementText();

                            object.setPureRiskPremiumFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {


                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GetResponsetoolResponse
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "getResponsetoolResponse",
                "ns8");



        /**
         * field for _return
         */


        protected GenResponseXMLTools local_return ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean local_returnTracker = false ;

        public boolean is_returnSpecified(){
            return local_returnTracker;
        }



        /**
         * Auto generated getter method
         * @return GenResponseXMLTools
         */
        public  GenResponseXMLTools get_return(){
            return local_return;
        }



        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(GenResponseXMLTools param){
            local_returnTracker = true;

            this.local_return=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":getResponsetoolResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "getResponsetoolResponse",
                            xmlWriter);
                }


            }
            if (local_returnTracker){
                if (local_return==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    local_return.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "return"));


                elementList.add(local_return==null?null:
                        local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetResponsetoolResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GetResponsetoolResponse object =
                        new GetResponsetoolResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getResponsetoolResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetResponsetoolResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.set_return(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.set_return(GenResponseXMLTools.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GetCommonCheckResponse
            implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                "getCommonCheckResponse",
                "ns8");



        /**
         * field for _return
         */


        protected CommonCheckEbusiness local_return ;

        /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
        protected boolean local_returnTracker = false ;

        public boolean is_returnSpecified(){
            return local_returnTracker;
        }



        /**
         * Auto generated getter method
         * @return CommonCheckEbusiness
         */
        public  CommonCheckEbusiness get_return(){
            return local_return;
        }



        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(CommonCheckEbusiness param){
            local_returnTracker = true;

            this.local_return=param;


        }




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
            return factory.createOMElement(dataSource,MY_QNAME);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":getCommonCheckResponse",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "getCommonCheckResponse",
                            xmlWriter);
                }


            }
            if (local_returnTracker){
                if (local_return==null){

                    writeStartElement(null, "http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com", "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                    xmlWriter.writeEndElement();
                }else{
                    local_return.serialize(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com")){
                return "ns8";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker){
                elementList.add(new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com",
                        "return"));


                elementList.add(local_return==null?null:
                        local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetCommonCheckResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GetCommonCheckResponse object =
                        new GetCommonCheckResponse();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getCommonCheckResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetCommonCheckResponse)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceV1X.vehicleModelQuery.GST.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                            object.set_return(null);
                            reader.next();

                            reader.next();

                        }else{

                            object.set_return(CommonCheckEbusiness.Factory.parse(reader));

                            reader.next();
                        }
                    }  // End of if for expected property start element

                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    public static class GenResponseXMLTools
            implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = GenResponseXMLTools
                Namespace URI = http://pubTools.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */




        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement (
                final javax.xml.namespace.QName parentQName,
                final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



            org.apache.axiom.om.OMDataSource dataSource =
                    new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
            return factory.createOMElement(dataSource,parentQName);

        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            serialize(parentQName,xmlWriter,false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
                              javax.xml.stream.XMLStreamWriter xmlWriter,
                              boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




            String prefix = null;
            String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType){


                String namespacePrefix = registerPrefix(xmlWriter,"http://pubTools.webServiceCenter.sinosoft.com/xsd");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            namespacePrefix+":GenResponseXMLTools",
                            xmlWriter);
                } else {
                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                            "GenResponseXMLTools",
                            xmlWriter);
                }


            }

            xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://pubTools.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(String namespace, String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            String attributeNamespace = qname.getNamespaceURI();
            String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{



            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();



            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory{




            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GenResponseXMLTools parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
                GenResponseXMLTools object =
                        new GenResponseXMLTools();

                int event;
                String nillableValue = null;
                String prefix ="";
                String namespaceuri ="";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();


                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                        String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");
                        if (fullTypeName!=null){
                            String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1){
                                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix==null?"":nsPrefix;

                            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"GenResponseXMLTools".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GenResponseXMLTools)ExtensionMapper.getTypeObject(
                                        nsUri,type,reader);
                            }


                        }


                    }




                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new Exception(e);
                }

                return object;
            }

        }//end of factory class



    }


    private  org.apache.axiom.om.OMElement  toOM(GetCommonCheckResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(GetCommonCheckResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(GetVehicleModelQueryInterfaceResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(GetVehicleModelQueryInterfaceResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(SetCommonCheck param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(SetCommonCheck.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(SetResponsetool param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(SetResponsetool.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(GetConvertResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(GetConvertResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(SetVehicleModelQueryInterface param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(SetVehicleModelQueryInterface.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(SetRequesttool param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(SetRequesttool.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(QueryCarModelList param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(QueryCarModelList.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(QueryCarModelListResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(QueryCarModelListResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(GetRequesttoolResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(GetRequesttoolResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(SetConvert param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(SetConvert.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }

    private  org.apache.axiom.om.OMElement  toOM(GetResponsetoolResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


        try{
            return param.getOMElement(GetResponsetoolResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }


    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, SetCommonCheck param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault{


        try{

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(SetCommonCheck.MY_QNAME,factory));
            return emptyEnvelope;
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }
                                
                             
                             /* methods to provide back word compatibility */



    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, SetResponsetool param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault{


        try{

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(SetResponsetool.MY_QNAME,factory));
            return emptyEnvelope;
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }
                                
                             
                             /* methods to provide back word compatibility */



    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, SetVehicleModelQueryInterface param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault{


        try{

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(SetVehicleModelQueryInterface.MY_QNAME,factory));
            return emptyEnvelope;
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }
                                
                             
                             /* methods to provide back word compatibility */



    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, SetRequesttool param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault{


        try{

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(SetRequesttool.MY_QNAME,factory));
            return emptyEnvelope;
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }
                                
                             
                             /* methods to provide back word compatibility */



    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, QueryCarModelList param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault{


        try{

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(QueryCarModelList.MY_QNAME,factory));
            return emptyEnvelope;
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }
                                
                             
                             /* methods to provide back word compatibility */



    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, SetConvert param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
            throws org.apache.axis2.AxisFault{


        try{

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(SetConvert.MY_QNAME,factory));
            return emptyEnvelope;
        } catch(org.apache.axis2.databinding.ADBException e){
            throw org.apache.axis2.AxisFault.makeFault(e);
        }


    }
                                
                             
                             /* methods to provide back word compatibility */




    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
    }


    private  Object fromOM(
            org.apache.axiom.om.OMElement param,
            Class type,
            java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {

            if (GetCommonCheckResponse.class.equals(type)){

                return GetCommonCheckResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (GetVehicleModelQueryInterfaceResponse.class.equals(type)){

                return GetVehicleModelQueryInterfaceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (SetCommonCheck.class.equals(type)){

                return SetCommonCheck.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (SetResponsetool.class.equals(type)){

                return SetResponsetool.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (GetConvertResponse.class.equals(type)){

                return GetConvertResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (SetVehicleModelQueryInterface.class.equals(type)){

                return SetVehicleModelQueryInterface.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (SetRequesttool.class.equals(type)){

                return SetRequesttool.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (QueryCarModelList.class.equals(type)){

                return QueryCarModelList.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (QueryCarModelListResponse.class.equals(type)){

                return QueryCarModelListResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (GetRequesttoolResponse.class.equals(type)){

                return GetRequesttoolResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (SetConvert.class.equals(type)){

                return SetConvert.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

            if (GetResponsetoolResponse.class.equals(type)){

                return GetResponsetoolResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


            }

        } catch (Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
        return null;
    }
}