
/**
 * CarPolicyQueryServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.1  Built on : Aug 31, 2011 (12:22:40 CEST)
 */
        package com.chinalife.sz.carcalculate.webservice;

        

        /*
        *  CarPolicyQueryServiceStub java implementation
        */

        
        public class CarPolicyQueryServiceStub extends org.apache.axis2.client.Stub
        {
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1;
            return Long.toString(System.currentTimeMillis()) + "_" + counter;
        }


    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("CarPolicyQueryService" + getUniqueSuffix());
     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[1];

                   __operation = new org.apache.axis2.description.OutInAxisOperation();


            __operation.setName(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com", "getPolicyQuery"));
	    _service.addOperation(__operation);




            _operations[0]=__operation;


        }

    //populates the faults
    private void populateFaults(){



    }

    /**
      *Constructor that takes in a configContext
      */

    public CarPolicyQueryServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public CarPolicyQueryServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);


        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

            //Set the soap version
            _serviceClient.getOptions().setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);


    }

    /**
     * Default Constructor
     */
    public CarPolicyQueryServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {

                    this(configurationContext,"http://9.1.121.11:8003/webServiceCenter/services/CarPolicyQueryService.CarPolicyQueryServiceHttpSoap12Endpoint/" );

    }

    /**
     * Default Constructor
     */
    public CarPolicyQueryServiceStub() throws org.apache.axis2.AxisFault {

                    this("http://9.1.121.11:8003/webServiceCenter/services/CarPolicyQueryService.CarPolicyQueryServiceHttpSoap12Endpoint/" );

    }

    /**
     * Constructor taking the target endpoint
     */
    public CarPolicyQueryServiceStub(String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }




                    /**
                     * Auto generated method signature
                     *
                     * @see com.chinalife.sz.carcalculate.webservice.CarPolicyQueryService#getPolicyQuery
                     * @param getPolicyQuery0

                     */



                            public  CarPolicyQueryServiceStub.GetPolicyQueryResponse getPolicyQuery(

                            CarPolicyQueryServiceStub.GetPolicyQuery getPolicyQuery0)


                    throws java.rmi.RemoteException

                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("urn:getPolicyQuery");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();



              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;


                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    getPolicyQuery0,
                                                    optimizeContent(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com",
                                                    "getPolicyQuery")), new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com",
                                                    "getPolicyQuery"));

        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);


               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


                                Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CarPolicyQueryServiceStub.GetPolicyQueryResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));


                                        return (CarPolicyQueryServiceStub.GetPolicyQueryResponse)object;

         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getPolicyQuery"))){
                    //make the fault by reflection
                    try{
                        String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getPolicyQuery"));
                        Class exceptionClass = Class.forName(exceptionClassName);
                        Exception ex = (Exception) exceptionClass.newInstance();
                        //message class
                        String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getPolicyQuery"));
                        Class messageClass = Class.forName(messageClassName);
                        Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new Class[]{messageClass});
                        m.invoke(ex,new Object[]{messageObject});


                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }

                /**
                * Auto generated method signature for Asynchronous Invocations
                *
                * @see com.chinalife.sz.carcalculate.webservice.CarPolicyQueryService#startgetPolicyQuery
                    * @param getPolicyQuery0

                */
                public  void startgetPolicyQuery(

                 CarPolicyQueryServiceStub.GetPolicyQuery getPolicyQuery0,

                  final CarPolicyQueryServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("urn:getPolicyQuery");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


                                    //Style is Doc.


                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    getPolicyQuery0,
                                                    optimizeContent(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com",
                                                    "getPolicyQuery")), new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com",
                                                    "getPolicyQuery"));

        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);



                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                                        Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CarPolicyQueryServiceStub.GetPolicyQueryResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultgetPolicyQuery(
                                        (CarPolicyQueryServiceStub.GetPolicyQueryResponse)object);

                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorgetPolicyQuery(e);
                            }
                            }

                            public void onError(Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getPolicyQuery"))){
											//make the fault by reflection
											try{
													String exceptionClassName = (String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getPolicyQuery"));
													Class exceptionClass = Class.forName(exceptionClassName);
													Exception ex = (Exception) exceptionClass.newInstance();
													//message class
													String messageClassName = (String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"getPolicyQuery"));
														Class messageClass = Class.forName(messageClassName);
													Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new Class[]{messageClass});
													m.invoke(ex,new Object[]{messageObject});


										            callback.receiveErrorgetPolicyQuery(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            } catch (ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            } catch (NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            } catch (IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            } catch (InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorgetPolicyQuery(f);
                                            }
									    } else {
										    callback.receiveErrorgetPolicyQuery(f);
									    }
									} else {
									    callback.receiveErrorgetPolicyQuery(f);
									}
								} else {
								    callback.receiveErrorgetPolicyQuery(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorgetPolicyQuery(axisFault);
                                }
                            }
                });


          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }



       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }



    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {


        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }
        return false;
    }
     //http://9.1.121.11:8003/webServiceCenter/services/CarPolicyQueryService.CarPolicyQueryServiceHttpSoap12Endpoint/
        public static class TXInsuranceRequestExtensionEhm extends TXInsuranceExtensionEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceRequestExtensionEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TXInsuranceRequestExtensionEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TXInsuranceRequestExtensionEhm",
                           xmlWriter);
                   }

                if (localOperatorTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operator", xmlWriter);


                                          if (localOperator==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperator);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOperatorKeyTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operatorKey", xmlWriter);


                                          if (localOperatorKey==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperatorKey);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();


                    attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
                    attribList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","TXInsuranceRequestExtensionEhm"));
                 if (localOperatorTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operator"));

                                         elementList.add(localOperator==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
                                    } if (localOperatorKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operatorKey"));

                                         elementList.add(localOperatorKey==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperatorKey));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TXInsuranceRequestExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TXInsuranceRequestExtensionEhm object =
                new TXInsuranceRequestExtensionEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceRequestExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceRequestExtensionEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperator(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operatorKey").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperatorKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class GetPolicyQuery
        implements org.apache.axis2.databinding.ADBBean{

                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceIndiv.webServiceCenter.sinosoft.com",
                "getPolicyQuery",
                "ns3");



                        /**
                        * field for EhmRequest
                        */


                                    protected CarPolicyQueryEhmRequest localEhmRequest ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEhmRequestTracker = false ;

                           public boolean isEhmRequestSpecified(){
                               return localEhmRequestTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return CarPolicyQueryEhmRequest
                           */
                           public  CarPolicyQueryEhmRequest getEhmRequest(){
                               return localEhmRequest;
                           }



                            /**
                               * Auto generated setter method
                               * @param param EhmRequest
                               */
                               public void setEhmRequest(CarPolicyQueryEhmRequest param){
                            localEhmRequestTracker = true;

                                            this.localEhmRequest=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://serviceIndiv.webServiceCenter.sinosoft.com");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":getPolicyQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "getPolicyQuery",
                           xmlWriter);
                   }


                   }
                if (localEhmRequestTracker){
                                    if (localEhmRequest==null){

                                        writeStartElement(null, "http://serviceIndiv.webServiceCenter.sinosoft.com", "ehmRequest", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEhmRequest.serialize(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com","ehmRequest"),
                                        xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceIndiv.webServiceCenter.sinosoft.com")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localEhmRequestTracker){
                            elementList.add(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com",
                                                                      "ehmRequest"));


                                    elementList.add(localEhmRequest==null?null:
                                    localEhmRequest);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static GetPolicyQuery parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            GetPolicyQuery object =
                new GetPolicyQuery();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getPolicyQuery".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetPolicyQuery) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com","ehmRequest").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEhmRequest(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setEhmRequest(CarPolicyQueryEhmRequest.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class TXInsuranceResponseEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceResponseEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for TransExeDate
                        */


                                    protected String localTransExeDate ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransExeDateTracker = false ;

                           public boolean isTransExeDateSpecified(){
                               return localTransExeDateTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransExeDate(){
                               return localTransExeDate;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransExeDate
                               */
                               public void setTransExeDate(String param){
                            localTransExeDateTracker = true;

                                            this.localTransExeDate=param;


                               }


                        /**
                        * field for TransExeTime
                        */


                                    protected String localTransExeTime ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransExeTimeTracker = false ;

                           public boolean isTransExeTimeSpecified(){
                               return localTransExeTimeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransExeTime(){
                               return localTransExeTime;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransExeTime
                               */
                               public void setTransExeTime(String param){
                            localTransExeTimeTracker = true;

                                            this.localTransExeTime=param;


                               }


                        /**
                        * field for TransRefGUID
                        */


                                    protected String localTransRefGUID ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransRefGUIDTracker = false ;

                           public boolean isTransRefGUIDSpecified(){
                               return localTransRefGUIDTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransRefGUID(){
                               return localTransRefGUID;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransRefGUID
                               */
                               public void setTransRefGUID(String param){
                            localTransRefGUIDTracker = true;

                                            this.localTransRefGUID=param;


                               }


                        /**
                        * field for TransResultEhm
                        */


                                    protected TransResultEhm localTransResultEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransResultEhmTracker = false ;

                           public boolean isTransResultEhmSpecified(){
                               return localTransResultEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return TransResultEhm
                           */
                           public  TransResultEhm getTransResultEhm(){
                               return localTransResultEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransResultEhm
                               */
                               public void setTransResultEhm(TransResultEhm param){
                            localTransResultEhmTracker = true;

                                            this.localTransResultEhm=param;


                               }


                        /**
                        * field for TransSubType
                        */


                                    protected String localTransSubType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransSubTypeTracker = false ;

                           public boolean isTransSubTypeSpecified(){
                               return localTransSubTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransSubType(){
                               return localTransSubType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransSubType
                               */
                               public void setTransSubType(String param){
                            localTransSubTypeTracker = true;

                                            this.localTransSubType=param;


                               }


                        /**
                        * field for TransType
                        */


                                    protected String localTransType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransTypeTracker = false ;

                           public boolean isTransTypeSpecified(){
                               return localTransTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransType(){
                               return localTransType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransType
                               */
                               public void setTransType(String param){
                            localTransTypeTracker = true;

                                            this.localTransType=param;


                               }


                        /**
                        * field for OInsuranceExtensionEhm
                        */


                                    protected OInsuranceExtensionEhm localOInsuranceExtensionEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOInsuranceExtensionEhmTracker = false ;

                           public boolean isOInsuranceExtensionEhmSpecified(){
                               return localOInsuranceExtensionEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return OInsuranceExtensionEhm
                           */
                           public  OInsuranceExtensionEhm getOInsuranceExtensionEhm(){
                               return localOInsuranceExtensionEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param OInsuranceExtensionEhm
                               */
                               public void setOInsuranceExtensionEhm(OInsuranceExtensionEhm param){
                            localOInsuranceExtensionEhmTracker = true;

                                            this.localOInsuranceExtensionEhm=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TXInsuranceResponseEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TXInsuranceResponseEhm",
                           xmlWriter);
                   }


                   }
                if (localTransExeDateTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transExeDate", xmlWriter);


                                          if (localTransExeDate==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransExeDate);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransExeTimeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transExeTime", xmlWriter);


                                          if (localTransExeTime==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransExeTime);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransRefGUIDTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transRefGUID", xmlWriter);


                                          if (localTransRefGUID==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransRefGUID);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransResultEhmTracker){
                                    if (localTransResultEhm==null){

                                        writeStartElement(null, "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "transResultEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTransResultEhm.serialize(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transResultEhm"),
                                        xmlWriter);
                                    }
                                } if (localTransSubTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transSubType", xmlWriter);


                                          if (localTransSubType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransSubType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transType", xmlWriter);


                                          if (localTransType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOInsuranceExtensionEhmTracker){
                                    if (localOInsuranceExtensionEhm==null){

                                        writeStartElement(null, "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "oInsuranceExtensionEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localOInsuranceExtensionEhm.serialize(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","oInsuranceExtensionEhm"),
                                        xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localTransExeDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transExeDate"));

                                         elementList.add(localTransExeDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeDate));
                                    } if (localTransExeTimeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transExeTime"));

                                         elementList.add(localTransExeTime==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeTime));
                                    } if (localTransRefGUIDTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transRefGUID"));

                                         elementList.add(localTransRefGUID==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransRefGUID));
                                    } if (localTransResultEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transResultEhm"));


                                    elementList.add(localTransResultEhm==null?null:
                                    localTransResultEhm);
                                } if (localTransSubTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transSubType"));

                                         elementList.add(localTransSubType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransSubType));
                                    } if (localTransTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transType"));

                                         elementList.add(localTransType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransType));
                                    } if (localOInsuranceExtensionEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "oInsuranceExtensionEhm"));


                                    elementList.add(localOInsuranceExtensionEhm==null?null:
                                    localOInsuranceExtensionEhm);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TXInsuranceResponseEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TXInsuranceResponseEhm object =
                new TXInsuranceResponseEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceResponseEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceResponseEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transExeDate").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransExeDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transExeTime").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransExeTime(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transRefGUID").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransRefGUID(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transResultEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTransResultEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setTransResultEhm(TransResultEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transSubType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransSubType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","oInsuranceExtensionEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setOInsuranceExtensionEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setOInsuranceExtensionEhm(OInsuranceExtensionEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class IInsuranceExtensionEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = IInsuranceExtensionEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for MaxRecords
                        */


                                    protected String localMaxRecords ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxRecordsTracker = false ;

                           public boolean isMaxRecordsSpecified(){
                               return localMaxRecordsTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getMaxRecords(){
                               return localMaxRecords;
                           }



                            /**
                               * Auto generated setter method
                               * @param param MaxRecords
                               */
                               public void setMaxRecords(String param){
                            localMaxRecordsTracker = true;

                                            this.localMaxRecords=param;


                               }


                        /**
                        * field for OrderField
                        */


                                    protected String localOrderField ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOrderFieldTracker = false ;

                           public boolean isOrderFieldSpecified(){
                               return localOrderFieldTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getOrderField(){
                               return localOrderField;
                           }



                            /**
                               * Auto generated setter method
                               * @param param OrderField
                               */
                               public void setOrderField(String param){
                            localOrderFieldTracker = true;

                                            this.localOrderField=param;


                               }


                        /**
                        * field for OrderFlag
                        */


                                    protected String localOrderFlag ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOrderFlagTracker = false ;

                           public boolean isOrderFlagSpecified(){
                               return localOrderFlagTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getOrderFlag(){
                               return localOrderFlag;
                           }



                            /**
                               * Auto generated setter method
                               * @param param OrderFlag
                               */
                               public void setOrderFlag(String param){
                            localOrderFlagTracker = true;

                                            this.localOrderFlag=param;


                               }


                        /**
                        * field for PageFlag
                        */


                                    protected String localPageFlag ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageFlagTracker = false ;

                           public boolean isPageFlagSpecified(){
                               return localPageFlagTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getPageFlag(){
                               return localPageFlag;
                           }



                            /**
                               * Auto generated setter method
                               * @param param PageFlag
                               */
                               public void setPageFlag(String param){
                            localPageFlagTracker = true;

                                            this.localPageFlag=param;


                               }


                        /**
                        * field for PageRowNum
                        */


                                    protected String localPageRowNum ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageRowNumTracker = false ;

                           public boolean isPageRowNumSpecified(){
                               return localPageRowNumTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getPageRowNum(){
                               return localPageRowNum;
                           }



                            /**
                               * Auto generated setter method
                               * @param param PageRowNum
                               */
                               public void setPageRowNum(String param){
                            localPageRowNumTracker = true;

                                            this.localPageRowNum=param;


                               }


                        /**
                        * field for RowNumStart
                        */


                                    protected String localRowNumStart ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRowNumStartTracker = false ;

                           public boolean isRowNumStartSpecified(){
                               return localRowNumStartTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getRowNumStart(){
                               return localRowNumStart;
                           }



                            /**
                               * Auto generated setter method
                               * @param param RowNumStart
                               */
                               public void setRowNumStart(String param){
                            localRowNumStartTracker = true;

                                            this.localRowNumStart=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":IInsuranceExtensionEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "IInsuranceExtensionEhm",
                           xmlWriter);
                   }


                   }
                if (localMaxRecordsTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "maxRecords", xmlWriter);


                                          if (localMaxRecords==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localMaxRecords);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOrderFieldTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "orderField", xmlWriter);


                                          if (localOrderField==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOrderField);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOrderFlagTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "orderFlag", xmlWriter);


                                          if (localOrderFlag==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOrderFlag);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localPageFlagTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "pageFlag", xmlWriter);


                                          if (localPageFlag==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localPageFlag);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localPageRowNumTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "pageRowNum", xmlWriter);


                                          if (localPageRowNum==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localPageRowNum);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localRowNumStartTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "rowNumStart", xmlWriter);


                                          if (localRowNumStart==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localRowNumStart);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localMaxRecordsTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "maxRecords"));

                                         elementList.add(localMaxRecords==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRecords));
                                    } if (localOrderFieldTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "orderField"));

                                         elementList.add(localOrderField==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrderField));
                                    } if (localOrderFlagTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "orderFlag"));

                                         elementList.add(localOrderFlag==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrderFlag));
                                    } if (localPageFlagTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "pageFlag"));

                                         elementList.add(localPageFlag==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageFlag));
                                    } if (localPageRowNumTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "pageRowNum"));

                                         elementList.add(localPageRowNum==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageRowNum));
                                    } if (localRowNumStartTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "rowNumStart"));

                                         elementList.add(localRowNumStart==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRowNumStart));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static IInsuranceExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            IInsuranceExtensionEhm object =
                new IInsuranceExtensionEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"IInsuranceExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (IInsuranceExtensionEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","maxRecords").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setMaxRecords(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","orderField").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOrderField(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","orderFlag").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOrderFlag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","pageFlag").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setPageFlag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","pageRowNum").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setPageRowNum(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","rowNumStart").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setRowNumStart(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class TXInsuranceRequestEhm extends TXInsuranceEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceRequestEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for IInsuranceExtensionEhm
                        */


                                    protected IInsuranceExtensionEhm localIInsuranceExtensionEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIInsuranceExtensionEhmTracker = false ;

                           public boolean isIInsuranceExtensionEhmSpecified(){
                               return localIInsuranceExtensionEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return IInsuranceExtensionEhm
                           */
                           public  IInsuranceExtensionEhm getIInsuranceExtensionEhm(){
                               return localIInsuranceExtensionEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param IInsuranceExtensionEhm
                               */
                               public void setIInsuranceExtensionEhm(IInsuranceExtensionEhm param){
                            localIInsuranceExtensionEhmTracker = true;

                                            this.localIInsuranceExtensionEhm=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TXInsuranceRequestEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TXInsuranceRequestEhm",
                           xmlWriter);
                   }

                if (localTransExeDateTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transExeDate", xmlWriter);


                                          if (localTransExeDate==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransExeDate);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransExeTimeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transExeTime", xmlWriter);


                                          if (localTransExeTime==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransExeTime);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransRefGUIDTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transRefGUID", xmlWriter);


                                          if (localTransRefGUID==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransRefGUID);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransSubTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transSubType", xmlWriter);


                                          if (localTransSubType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransSubType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transType", xmlWriter);


                                          if (localTransType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localIInsuranceExtensionEhmTracker){
                                    if (localIInsuranceExtensionEhm==null){

                                        writeStartElement(null, "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "iInsuranceExtensionEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localIInsuranceExtensionEhm.serialize(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","iInsuranceExtensionEhm"),
                                        xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();


                    attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
                    attribList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","TXInsuranceRequestEhm"));
                 if (localTransExeDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transExeDate"));

                                         elementList.add(localTransExeDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeDate));
                                    } if (localTransExeTimeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transExeTime"));

                                         elementList.add(localTransExeTime==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeTime));
                                    } if (localTransRefGUIDTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transRefGUID"));

                                         elementList.add(localTransRefGUID==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransRefGUID));
                                    } if (localTransSubTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transSubType"));

                                         elementList.add(localTransSubType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransSubType));
                                    } if (localTransTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transType"));

                                         elementList.add(localTransType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransType));
                                    } if (localIInsuranceExtensionEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "iInsuranceExtensionEhm"));


                                    elementList.add(localIInsuranceExtensionEhm==null?null:
                                    localIInsuranceExtensionEhm);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TXInsuranceRequestEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TXInsuranceRequestEhm object =
                new TXInsuranceRequestEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceRequestEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceRequestEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transExeDate").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransExeDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transExeTime").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransExeTime(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transRefGUID").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransRefGUID(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transSubType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransSubType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","iInsuranceExtensionEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setIInsuranceExtensionEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setIInsuranceExtensionEhm(IInsuranceExtensionEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class ExtensionMapper{

          public static Object getTypeObject(String namespaceURI,
                                                       String typeName,
                                                       javax.xml.stream.XMLStreamReader reader) throws Exception{


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TXInsuranceRequestExtensionEhm".equals(typeName)){

                            return  TXInsuranceRequestExtensionEhm.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TXInsuranceResponseEhm".equals(typeName)){

                            return  TXInsuranceResponseEhm.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "IInsuranceExtensionEhm".equals(typeName)){

                            return  IInsuranceExtensionEhm.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TXInsuranceRequestEhm".equals(typeName)){

                            return  TXInsuranceRequestEhm.Factory.parse(reader);


                  }


                  if (
                  "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "CarPolicyQueryEhmResponse".equals(typeName)){

                            return  CarPolicyQueryEhmResponse.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "OInsuranceExtensionEhm".equals(typeName)){

                            return  OInsuranceExtensionEhm.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TransResultEhm".equals(typeName)){

                            return  TransResultEhm.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TXInsuranceExtensionEhm".equals(typeName)){

                            return  TXInsuranceExtensionEhm.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "CarPolicyQuery".equals(typeName)){

                            return  CarPolicyQuery.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TXInsuranceEhm".equals(typeName)){

                            return  TXInsuranceEhm.Factory.parse(reader);


                  }


                  if (
                  "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "CarPolicyQueryEhmRequest".equals(typeName)){

                            return  CarPolicyQueryEhmRequest.Factory.parse(reader);


                  }


                  if (
                  "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd".equals(namespaceURI) &&
                  "TXInsuranceResponseExtensionEhm".equals(typeName)){

                            return  TXInsuranceResponseExtensionEhm.Factory.parse(reader);


                  }


             throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
          }

        }

        public static class CarPolicyQueryEhmResponse
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CarPolicyQueryEhmResponse
                Namespace URI = http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns2
                */


                        /**
                        * field for CarPolicyQueryList
                        * This was an Array!
                        */


                                    protected CarPolicyQuery[] localCarPolicyQueryList ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCarPolicyQueryListTracker = false ;

                           public boolean isCarPolicyQueryListSpecified(){
                               return localCarPolicyQueryListTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return CarPolicyQuery[]
                           */
                           public  CarPolicyQuery[] getCarPolicyQueryList(){
                               return localCarPolicyQueryList;
                           }






                              /**
                               * validate the array for CarPolicyQueryList
                               */
                              protected void validateCarPolicyQueryList(CarPolicyQuery[] param){

                              }


                             /**
                              * Auto generated setter method
                              * @param param CarPolicyQueryList
                              */
                              public void setCarPolicyQueryList(CarPolicyQuery[] param){

                                   validateCarPolicyQueryList(param);

                               localCarPolicyQueryListTracker = true;

                                      this.localCarPolicyQueryList=param;
                              }



                             /**
                             * Auto generated add method for the array for convenience
                             * @param param CarPolicyQuery
                             */
                             public void addCarPolicyQueryList(CarPolicyQuery param){
                                   if (localCarPolicyQueryList == null){
                                   localCarPolicyQueryList = new CarPolicyQuery[]{};
                                   }


                                 //update the setting tracker
                                localCarPolicyQueryListTracker = true;


                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localCarPolicyQueryList);
                               list.add(param);
                               this.localCarPolicyQueryList =
                             (CarPolicyQuery[])list.toArray(
                            new CarPolicyQuery[list.size()]);

                             }


                        /**
                        * field for RequestType
                        */


                                    protected String localRequestType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRequestTypeTracker = false ;

                           public boolean isRequestTypeSpecified(){
                               return localRequestTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getRequestType(){
                               return localRequestType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param RequestType
                               */
                               public void setRequestType(String param){
                            localRequestTypeTracker = true;

                                            this.localRequestType=param;


                               }


                        /**
                        * field for TXInsuranceResponseEhm
                        */


                                    protected TXInsuranceResponseEhm localTXInsuranceResponseEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTXInsuranceResponseEhmTracker = false ;

                           public boolean isTXInsuranceResponseEhmSpecified(){
                               return localTXInsuranceResponseEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return TXInsuranceResponseEhm
                           */
                           public  TXInsuranceResponseEhm getTXInsuranceResponseEhm(){
                               return localTXInsuranceResponseEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TXInsuranceResponseEhm
                               */
                               public void setTXInsuranceResponseEhm(TXInsuranceResponseEhm param){
                            localTXInsuranceResponseEhmTracker = true;

                                            this.localTXInsuranceResponseEhm=param;


                               }


                        /**
                        * field for TXInsuranceResponseExtensionEhm
                        */


                                    protected TXInsuranceResponseExtensionEhm localTXInsuranceResponseExtensionEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTXInsuranceResponseExtensionEhmTracker = false ;

                           public boolean isTXInsuranceResponseExtensionEhmSpecified(){
                               return localTXInsuranceResponseExtensionEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return TXInsuranceResponseExtensionEhm
                           */
                           public  TXInsuranceResponseExtensionEhm getTXInsuranceResponseExtensionEhm(){
                               return localTXInsuranceResponseExtensionEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TXInsuranceResponseExtensionEhm
                               */
                               public void setTXInsuranceResponseExtensionEhm(TXInsuranceResponseExtensionEhm param){
                            localTXInsuranceResponseExtensionEhmTracker = true;

                                            this.localTXInsuranceResponseExtensionEhm=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":CarPolicyQueryEhmResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "CarPolicyQueryEhmResponse",
                           xmlWriter);
                   }


                   }
                if (localCarPolicyQueryListTracker){
                                       if (localCarPolicyQueryList!=null){
                                            for (int i = 0;i < localCarPolicyQueryList.length;i++){
                                                if (localCarPolicyQueryList[i] != null){
                                                 localCarPolicyQueryList[i].serialize(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","carPolicyQueryList"),
                                                           xmlWriter);
                                                } else {

                                                            writeStartElement(null, "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "carPolicyQueryList", xmlWriter);

                                                           // write the nil attribute
                                                           writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                           xmlWriter.writeEndElement();

                                                }

                                            }
                                     } else {

                                                writeStartElement(null, "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "carPolicyQueryList", xmlWriter);

                                               // write the nil attribute
                                               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                               xmlWriter.writeEndElement();

                                    }
                                 } if (localRequestTypeTracker){
                                    namespace = "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "requestType", xmlWriter);


                                          if (localRequestType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localRequestType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTXInsuranceResponseEhmTracker){
                                    if (localTXInsuranceResponseEhm==null){

                                        writeStartElement(null, "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "tXInsuranceResponseEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTXInsuranceResponseEhm.serialize(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseEhm"),
                                        xmlWriter);
                                    }
                                } if (localTXInsuranceResponseExtensionEhmTracker){
                                    if (localTXInsuranceResponseExtensionEhm==null){

                                        writeStartElement(null, "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "tXInsuranceResponseExtensionEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTXInsuranceResponseExtensionEhm.serialize(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseExtensionEhm"),
                                        xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCarPolicyQueryListTracker){
                             if (localCarPolicyQueryList!=null) {
                                 for (int i = 0;i < localCarPolicyQueryList.length;i++){

                                    if (localCarPolicyQueryList[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                          "carPolicyQueryList"));
                                         elementList.add(localCarPolicyQueryList[i]);
                                    } else {

                                                elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                          "carPolicyQueryList"));
                                                elementList.add(null);

                                    }

                                 }
                             } else {

                                        elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                          "carPolicyQueryList"));
                                        elementList.add(localCarPolicyQueryList);

                             }

                        } if (localRequestTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "requestType"));

                                         elementList.add(localRequestType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestType));
                                    } if (localTXInsuranceResponseEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "tXInsuranceResponseEhm"));


                                    elementList.add(localTXInsuranceResponseEhm==null?null:
                                    localTXInsuranceResponseEhm);
                                } if (localTXInsuranceResponseExtensionEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "tXInsuranceResponseExtensionEhm"));


                                    elementList.add(localTXInsuranceResponseExtensionEhm==null?null:
                                    localTXInsuranceResponseExtensionEhm);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static CarPolicyQueryEhmResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            CarPolicyQueryEhmResponse object =
                new CarPolicyQueryEhmResponse();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"CarPolicyQueryEhmResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CarPolicyQueryEhmResponse) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();

                        java.util.ArrayList list1 = new java.util.ArrayList();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","carPolicyQueryList").equals(reader.getName())){



                                    // Process the array and step past its final element's end.

                                                          nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                          if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                              list1.add(null);
                                                              reader.next();
                                                          } else {
                                                        list1.add(CarPolicyQuery.Factory.parse(reader));
                                                                }
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","carPolicyQueryList").equals(reader.getName())){

                                                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                          list1.add(null);
                                                                          reader.next();
                                                                      } else {
                                                                    list1.add(CarPolicyQuery.Factory.parse(reader));
                                                                        }
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array

                                                        object.setCarPolicyQueryList((CarPolicyQuery[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                CarPolicyQuery.class,
                                                                list1));

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","requestType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setRequestType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTXInsuranceResponseEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setTXInsuranceResponseEhm(TXInsuranceResponseEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceResponseExtensionEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTXInsuranceResponseExtensionEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setTXInsuranceResponseExtensionEhm(TXInsuranceResponseExtensionEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class OInsuranceExtensionEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OInsuranceExtensionEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for MaxRecords
                        */


                                    protected String localMaxRecords ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxRecordsTracker = false ;

                           public boolean isMaxRecordsSpecified(){
                               return localMaxRecordsTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getMaxRecords(){
                               return localMaxRecords;
                           }



                            /**
                               * Auto generated setter method
                               * @param param MaxRecords
                               */
                               public void setMaxRecords(String param){
                            localMaxRecordsTracker = true;

                                            this.localMaxRecords=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":OInsuranceExtensionEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "OInsuranceExtensionEhm",
                           xmlWriter);
                   }


                   }
                if (localMaxRecordsTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "maxRecords", xmlWriter);


                                          if (localMaxRecords==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localMaxRecords);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localMaxRecordsTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "maxRecords"));

                                         elementList.add(localMaxRecords==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRecords));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static OInsuranceExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            OInsuranceExtensionEhm object =
                new OInsuranceExtensionEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"OInsuranceExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OInsuranceExtensionEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","maxRecords").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setMaxRecords(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class TransResultEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TransResultEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for ErrorNo
                        */


                                    protected String localErrorNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localErrorNoTracker = false ;

                           public boolean isErrorNoSpecified(){
                               return localErrorNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getErrorNo(){
                               return localErrorNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ErrorNo
                               */
                               public void setErrorNo(String param){
                            localErrorNoTracker = true;

                                            this.localErrorNo=param;


                               }


                        /**
                        * field for ErrorType
                        */


                                    protected String localErrorType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localErrorTypeTracker = false ;

                           public boolean isErrorTypeSpecified(){
                               return localErrorTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getErrorType(){
                               return localErrorType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ErrorType
                               */
                               public void setErrorType(String param){
                            localErrorTypeTracker = true;

                                            this.localErrorType=param;


                               }


                        /**
                        * field for ResultCode
                        */


                                    protected String localResultCode ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResultCodeTracker = false ;

                           public boolean isResultCodeSpecified(){
                               return localResultCodeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getResultCode(){
                               return localResultCode;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ResultCode
                               */
                               public void setResultCode(String param){
                            localResultCodeTracker = true;

                                            this.localResultCode=param;


                               }


                        /**
                        * field for ResultInfoDesc
                        */


                                    protected String localResultInfoDesc ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResultInfoDescTracker = false ;

                           public boolean isResultInfoDescSpecified(){
                               return localResultInfoDescTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getResultInfoDesc(){
                               return localResultInfoDesc;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ResultInfoDesc
                               */
                               public void setResultInfoDesc(String param){
                            localResultInfoDescTracker = true;

                                            this.localResultInfoDesc=param;


                               }


                        /**
                        * field for StackTrace
                        */


                                    protected String localStackTrace ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStackTraceTracker = false ;

                           public boolean isStackTraceSpecified(){
                               return localStackTraceTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getStackTrace(){
                               return localStackTrace;
                           }



                            /**
                               * Auto generated setter method
                               * @param param StackTrace
                               */
                               public void setStackTrace(String param){
                            localStackTraceTracker = true;

                                            this.localStackTrace=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TransResultEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TransResultEhm",
                           xmlWriter);
                   }


                   }
                if (localErrorNoTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "errorNo", xmlWriter);


                                          if (localErrorNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localErrorNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localErrorTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "errorType", xmlWriter);


                                          if (localErrorType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localErrorType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localResultCodeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "resultCode", xmlWriter);


                                          if (localResultCode==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localResultCode);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localResultInfoDescTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "resultInfoDesc", xmlWriter);


                                          if (localResultInfoDesc==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localResultInfoDesc);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localStackTraceTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "stackTrace", xmlWriter);


                                          if (localStackTrace==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localStackTrace);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localErrorNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "errorNo"));

                                         elementList.add(localErrorNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorNo));
                                    } if (localErrorTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "errorType"));

                                         elementList.add(localErrorType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorType));
                                    } if (localResultCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "resultCode"));

                                         elementList.add(localResultCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCode));
                                    } if (localResultInfoDescTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "resultInfoDesc"));

                                         elementList.add(localResultInfoDesc==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultInfoDesc));
                                    } if (localStackTraceTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "stackTrace"));

                                         elementList.add(localStackTrace==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStackTrace));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TransResultEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TransResultEhm object =
                new TransResultEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TransResultEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TransResultEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","errorNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setErrorNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","errorType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setErrorType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","resultCode").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setResultCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","resultInfoDesc").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setResultInfoDesc(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","stackTrace").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setStackTrace(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class TXInsuranceExtensionEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceExtensionEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for Operator
                        */


                                    protected String localOperator ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOperatorTracker = false ;

                           public boolean isOperatorSpecified(){
                               return localOperatorTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getOperator(){
                               return localOperator;
                           }



                            /**
                               * Auto generated setter method
                               * @param param Operator
                               */
                               public void setOperator(String param){
                            localOperatorTracker = true;

                                            this.localOperator=param;


                               }


                        /**
                        * field for OperatorKey
                        */


                                    protected String localOperatorKey ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOperatorKeyTracker = false ;

                           public boolean isOperatorKeySpecified(){
                               return localOperatorKeyTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getOperatorKey(){
                               return localOperatorKey;
                           }



                            /**
                               * Auto generated setter method
                               * @param param OperatorKey
                               */
                               public void setOperatorKey(String param){
                            localOperatorKeyTracker = true;

                                            this.localOperatorKey=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TXInsuranceExtensionEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TXInsuranceExtensionEhm",
                           xmlWriter);
                   }


                   }
                if (localOperatorTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operator", xmlWriter);


                                          if (localOperator==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperator);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOperatorKeyTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operatorKey", xmlWriter);


                                          if (localOperatorKey==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperatorKey);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localOperatorTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operator"));

                                         elementList.add(localOperator==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
                                    } if (localOperatorKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operatorKey"));

                                         elementList.add(localOperatorKey==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperatorKey));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TXInsuranceExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TXInsuranceExtensionEhm object =
                new TXInsuranceExtensionEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceExtensionEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperator(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operatorKey").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperatorKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class CarPolicyQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CarPolicyQuery
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for BrandName
                        */


                                    protected String localBrandName ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBrandNameTracker = false ;

                           public boolean isBrandNameSpecified(){
                               return localBrandNameTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getBrandName(){
                               return localBrandName;
                           }



                            /**
                               * Auto generated setter method
                               * @param param BrandName
                               */
                               public void setBrandName(String param){
                            localBrandNameTracker = true;

                                            this.localBrandName=param;


                               }


                        /**
                        * field for CarKindCode
                        */


                                    protected String localCarKindCode ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCarKindCodeTracker = false ;

                           public boolean isCarKindCodeSpecified(){
                               return localCarKindCodeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getCarKindCode(){
                               return localCarKindCode;
                           }



                            /**
                               * Auto generated setter method
                               * @param param CarKindCode
                               */
                               public void setCarKindCode(String param){
                            localCarKindCodeTracker = true;

                                            this.localCarKindCode=param;


                               }


                        /**
                        * field for CarOwner
                        */


                                    protected String localCarOwner ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCarOwnerTracker = false ;

                           public boolean isCarOwnerSpecified(){
                               return localCarOwnerTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getCarOwner(){
                               return localCarOwner;
                           }



                            /**
                               * Auto generated setter method
                               * @param param CarOwner
                               */
                               public void setCarOwner(String param){
                            localCarOwnerTracker = true;

                                            this.localCarOwner=param;


                               }


                        /**
                        * field for ChannelType
                        */


                                    protected String localChannelType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChannelTypeTracker = false ;

                           public boolean isChannelTypeSpecified(){
                               return localChannelTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getChannelType(){
                               return localChannelType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ChannelType
                               */
                               public void setChannelType(String param){
                            localChannelTypeTracker = true;

                                            this.localChannelType=param;


                               }


                        /**
                        * field for EndDate
                        */


                                    protected String localEndDate ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndDateTracker = false ;

                           public boolean isEndDateSpecified(){
                               return localEndDateTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getEndDate(){
                               return localEndDate;
                           }



                            /**
                               * Auto generated setter method
                               * @param param EndDate
                               */
                               public void setEndDate(String param){
                            localEndDateTracker = true;

                                            this.localEndDate=param;


                               }


                        /**
                        * field for EngineNo
                        */


                                    protected String localEngineNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEngineNoTracker = false ;

                           public boolean isEngineNoSpecified(){
                               return localEngineNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getEngineNo(){
                               return localEngineNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param EngineNo
                               */
                               public void setEngineNo(String param){
                            localEngineNoTracker = true;

                                            this.localEngineNo=param;


                               }


                        /**
                        * field for EnrollDate
                        */


                                    protected String localEnrollDate ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnrollDateTracker = false ;

                           public boolean isEnrollDateSpecified(){
                               return localEnrollDateTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getEnrollDate(){
                               return localEnrollDate;
                           }



                            /**
                               * Auto generated setter method
                               * @param param EnrollDate
                               */
                               public void setEnrollDate(String param){
                            localEnrollDateTracker = true;

                                            this.localEnrollDate=param;


                               }


                        /**
                        * field for FrameNo
                        */


                                    protected String localFrameNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFrameNoTracker = false ;

                           public boolean isFrameNoSpecified(){
                               return localFrameNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getFrameNo(){
                               return localFrameNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param FrameNo
                               */
                               public void setFrameNo(String param){
                            localFrameNoTracker = true;

                                            this.localFrameNo=param;


                               }


                        /**
                        * field for Handler1Code
                        */


                                    protected String localHandler1Code ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHandler1CodeTracker = false ;

                           public boolean isHandler1CodeSpecified(){
                               return localHandler1CodeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getHandler1Code(){
                               return localHandler1Code;
                           }



                            /**
                               * Auto generated setter method
                               * @param param Handler1Code
                               */
                               public void setHandler1Code(String param){
                            localHandler1CodeTracker = true;

                                            this.localHandler1Code=param;


                               }


                        /**
                        * field for Handler1Name
                        */


                                    protected String localHandler1Name ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHandler1NameTracker = false ;

                           public boolean isHandler1NameSpecified(){
                               return localHandler1NameTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getHandler1Name(){
                               return localHandler1Name;
                           }



                            /**
                               * Auto generated setter method
                               * @param param Handler1Name
                               */
                               public void setHandler1Name(String param){
                            localHandler1NameTracker = true;

                                            this.localHandler1Name=param;


                               }


                        /**
                        * field for HandlerCode
                        */


                                    protected String localHandlerCode ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHandlerCodeTracker = false ;

                           public boolean isHandlerCodeSpecified(){
                               return localHandlerCodeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getHandlerCode(){
                               return localHandlerCode;
                           }



                            /**
                               * Auto generated setter method
                               * @param param HandlerCode
                               */
                               public void setHandlerCode(String param){
                            localHandlerCodeTracker = true;

                                            this.localHandlerCode=param;


                               }


                        /**
                        * field for HandlerName
                        */


                                    protected String localHandlerName ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHandlerNameTracker = false ;

                           public boolean isHandlerNameSpecified(){
                               return localHandlerNameTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getHandlerName(){
                               return localHandlerName;
                           }



                            /**
                               * Auto generated setter method
                               * @param param HandlerName
                               */
                               public void setHandlerName(String param){
                            localHandlerNameTracker = true;

                                            this.localHandlerName=param;


                               }


                        /**
                        * field for LicenseNo
                        */


                                    protected String localLicenseNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLicenseNoTracker = false ;

                           public boolean isLicenseNoSpecified(){
                               return localLicenseNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getLicenseNo(){
                               return localLicenseNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param LicenseNo
                               */
                               public void setLicenseNo(String param){
                            localLicenseNoTracker = true;

                                            this.localLicenseNo=param;


                               }


                        /**
                        * field for PolicyNo
                        */


                                    protected String localPolicyNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPolicyNoTracker = false ;

                           public boolean isPolicyNoSpecified(){
                               return localPolicyNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getPolicyNo(){
                               return localPolicyNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param PolicyNo
                               */
                               public void setPolicyNo(String param){
                            localPolicyNoTracker = true;

                                            this.localPolicyNo=param;


                               }


                        /**
                        * field for RiskCode
                        */


                                    protected String localRiskCode ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRiskCodeTracker = false ;

                           public boolean isRiskCodeSpecified(){
                               return localRiskCodeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getRiskCode(){
                               return localRiskCode;
                           }



                            /**
                               * Auto generated setter method
                               * @param param RiskCode
                               */
                               public void setRiskCode(String param){
                            localRiskCodeTracker = true;

                                            this.localRiskCode=param;


                               }


                        /**
                        * field for RiskName
                        */


                                    protected String localRiskName ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRiskNameTracker = false ;

                           public boolean isRiskNameSpecified(){
                               return localRiskNameTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getRiskName(){
                               return localRiskName;
                           }



                            /**
                               * Auto generated setter method
                               * @param param RiskName
                               */
                               public void setRiskName(String param){
                            localRiskNameTracker = true;

                                            this.localRiskName=param;


                               }


                        /**
                        * field for ServiceCode
                        */


                                    protected String localServiceCode ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localServiceCodeTracker = false ;

                           public boolean isServiceCodeSpecified(){
                               return localServiceCodeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getServiceCode(){
                               return localServiceCode;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ServiceCode
                               */
                               public void setServiceCode(String param){
                            localServiceCodeTracker = true;

                                            this.localServiceCode=param;


                               }


                        /**
                        * field for ServiceName
                        */


                                    protected String localServiceName ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localServiceNameTracker = false ;

                           public boolean isServiceNameSpecified(){
                               return localServiceNameTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getServiceName(){
                               return localServiceName;
                           }



                            /**
                               * Auto generated setter method
                               * @param param ServiceName
                               */
                               public void setServiceName(String param){
                            localServiceNameTracker = true;

                                            this.localServiceName=param;


                               }


                        /**
                        * field for StartDate
                        */


                                    protected String localStartDate ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;

                           public boolean isStartDateSpecified(){
                               return localStartDateTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getStartDate(){
                               return localStartDate;
                           }



                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(String param){
                            localStartDateTracker = true;

                                            this.localStartDate=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":CarPolicyQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "CarPolicyQuery",
                           xmlWriter);
                   }


                   }
                if (localBrandNameTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "brandName", xmlWriter);


                                          if (localBrandName==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localBrandName);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localCarKindCodeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "carKindCode", xmlWriter);


                                          if (localCarKindCode==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localCarKindCode);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localCarOwnerTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "carOwner", xmlWriter);


                                          if (localCarOwner==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localCarOwner);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localChannelTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "channelType", xmlWriter);


                                          if (localChannelType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localChannelType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localEndDateTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "endDate", xmlWriter);


                                          if (localEndDate==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localEndDate);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localEngineNoTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "engineNo", xmlWriter);


                                          if (localEngineNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localEngineNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localEnrollDateTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "enrollDate", xmlWriter);


                                          if (localEnrollDate==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localEnrollDate);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localFrameNoTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "frameNo", xmlWriter);


                                          if (localFrameNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localFrameNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localHandler1CodeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "handler1Code", xmlWriter);


                                          if (localHandler1Code==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localHandler1Code);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localHandler1NameTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "handler1Name", xmlWriter);


                                          if (localHandler1Name==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localHandler1Name);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localHandlerCodeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "handlerCode", xmlWriter);


                                          if (localHandlerCode==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localHandlerCode);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localHandlerNameTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "handlerName", xmlWriter);


                                          if (localHandlerName==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localHandlerName);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localLicenseNoTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "licenseNo", xmlWriter);


                                          if (localLicenseNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localLicenseNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localPolicyNoTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "policyNo", xmlWriter);


                                          if (localPolicyNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localPolicyNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localRiskCodeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "riskCode", xmlWriter);


                                          if (localRiskCode==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localRiskCode);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localRiskNameTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "riskName", xmlWriter);


                                          if (localRiskName==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localRiskName);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localServiceCodeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "serviceCode", xmlWriter);


                                          if (localServiceCode==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localServiceCode);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localServiceNameTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "serviceName", xmlWriter);


                                          if (localServiceName==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localServiceName);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "startDate", xmlWriter);


                                          if (localStartDate==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localStartDate);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localBrandNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "brandName"));

                                         elementList.add(localBrandName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrandName));
                                    } if (localCarKindCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "carKindCode"));

                                         elementList.add(localCarKindCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCarKindCode));
                                    } if (localCarOwnerTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "carOwner"));

                                         elementList.add(localCarOwner==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCarOwner));
                                    } if (localChannelTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "channelType"));

                                         elementList.add(localChannelType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChannelType));
                                    } if (localEndDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "endDate"));

                                         elementList.add(localEndDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                    } if (localEngineNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "engineNo"));

                                         elementList.add(localEngineNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEngineNo));
                                    } if (localEnrollDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "enrollDate"));

                                         elementList.add(localEnrollDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnrollDate));
                                    } if (localFrameNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "frameNo"));

                                         elementList.add(localFrameNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrameNo));
                                    } if (localHandler1CodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "handler1Code"));

                                         elementList.add(localHandler1Code==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHandler1Code));
                                    } if (localHandler1NameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "handler1Name"));

                                         elementList.add(localHandler1Name==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHandler1Name));
                                    } if (localHandlerCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "handlerCode"));

                                         elementList.add(localHandlerCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHandlerCode));
                                    } if (localHandlerNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "handlerName"));

                                         elementList.add(localHandlerName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHandlerName));
                                    } if (localLicenseNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "licenseNo"));

                                         elementList.add(localLicenseNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseNo));
                                    } if (localPolicyNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "policyNo"));

                                         elementList.add(localPolicyNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPolicyNo));
                                    } if (localRiskCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "riskCode"));

                                         elementList.add(localRiskCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskCode));
                                    } if (localRiskNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "riskName"));

                                         elementList.add(localRiskName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRiskName));
                                    } if (localServiceCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "serviceCode"));

                                         elementList.add(localServiceCode==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServiceCode));
                                    } if (localServiceNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "serviceName"));

                                         elementList.add(localServiceName==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServiceName));
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "startDate"));

                                         elementList.add(localStartDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static CarPolicyQuery parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            CarPolicyQuery object =
                new CarPolicyQuery();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"CarPolicyQuery".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CarPolicyQuery) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","brandName").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setBrandName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","carKindCode").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setCarKindCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","carOwner").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setCarOwner(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","channelType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setChannelType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","endDate").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setEndDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","engineNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setEngineNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","enrollDate").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setEnrollDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","frameNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setFrameNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","handler1Code").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setHandler1Code(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","handler1Name").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setHandler1Name(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","handlerCode").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setHandlerCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","handlerName").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setHandlerName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","licenseNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setLicenseNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","policyNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setPolicyNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","riskCode").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setRiskCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","riskName").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setRiskName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","serviceCode").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setServiceCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","serviceName").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setServiceName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","startDate").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class TXInsuranceEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */


                        /**
                        * field for TransExeDate
                        */


                                    protected String localTransExeDate ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransExeDateTracker = false ;

                           public boolean isTransExeDateSpecified(){
                               return localTransExeDateTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransExeDate(){
                               return localTransExeDate;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransExeDate
                               */
                               public void setTransExeDate(String param){
                            localTransExeDateTracker = true;

                                            this.localTransExeDate=param;


                               }


                        /**
                        * field for TransExeTime
                        */


                                    protected String localTransExeTime ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransExeTimeTracker = false ;

                           public boolean isTransExeTimeSpecified(){
                               return localTransExeTimeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransExeTime(){
                               return localTransExeTime;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransExeTime
                               */
                               public void setTransExeTime(String param){
                            localTransExeTimeTracker = true;

                                            this.localTransExeTime=param;


                               }


                        /**
                        * field for TransRefGUID
                        */


                                    protected String localTransRefGUID ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransRefGUIDTracker = false ;

                           public boolean isTransRefGUIDSpecified(){
                               return localTransRefGUIDTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransRefGUID(){
                               return localTransRefGUID;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransRefGUID
                               */
                               public void setTransRefGUID(String param){
                            localTransRefGUIDTracker = true;

                                            this.localTransRefGUID=param;


                               }


                        /**
                        * field for TransSubType
                        */


                                    protected String localTransSubType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransSubTypeTracker = false ;

                           public boolean isTransSubTypeSpecified(){
                               return localTransSubTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransSubType(){
                               return localTransSubType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransSubType
                               */
                               public void setTransSubType(String param){
                            localTransSubTypeTracker = true;

                                            this.localTransSubType=param;


                               }


                        /**
                        * field for TransType
                        */


                                    protected String localTransType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTransTypeTracker = false ;

                           public boolean isTransTypeSpecified(){
                               return localTransTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getTransType(){
                               return localTransType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TransType
                               */
                               public void setTransType(String param){
                            localTransTypeTracker = true;

                                            this.localTransType=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TXInsuranceEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TXInsuranceEhm",
                           xmlWriter);
                   }


                   }
                if (localTransExeDateTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transExeDate", xmlWriter);


                                          if (localTransExeDate==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransExeDate);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransExeTimeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transExeTime", xmlWriter);


                                          if (localTransExeTime==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransExeTime);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransRefGUIDTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transRefGUID", xmlWriter);


                                          if (localTransRefGUID==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransRefGUID);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransSubTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transSubType", xmlWriter);


                                          if (localTransSubType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransSubType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTransTypeTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "transType", xmlWriter);


                                          if (localTransType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localTransType);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localTransExeDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transExeDate"));

                                         elementList.add(localTransExeDate==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeDate));
                                    } if (localTransExeTimeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transExeTime"));

                                         elementList.add(localTransExeTime==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransExeTime));
                                    } if (localTransRefGUIDTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transRefGUID"));

                                         elementList.add(localTransRefGUID==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransRefGUID));
                                    } if (localTransSubTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transSubType"));

                                         elementList.add(localTransSubType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransSubType));
                                    } if (localTransTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "transType"));

                                         elementList.add(localTransType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTransType));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TXInsuranceEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TXInsuranceEhm object =
                new TXInsuranceEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transExeDate").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransExeDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transExeTime").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransExeTime(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transRefGUID").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransRefGUID(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transSubType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransSubType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","transType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setTransType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class GetPolicyQueryResponse
        implements org.apache.axis2.databinding.ADBBean{

                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "http://serviceIndiv.webServiceCenter.sinosoft.com",
                "getPolicyQueryResponse",
                "ns3");



                        /**
                        * field for _return
                        */


                                    protected CarPolicyQueryEhmResponse local_return ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean local_returnTracker = false ;

                           public boolean is_returnSpecified(){
                               return local_returnTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return CarPolicyQueryEhmResponse
                           */
                           public  CarPolicyQueryEhmResponse get_return(){
                               return local_return;
                           }



                            /**
                               * Auto generated setter method
                               * @param param _return
                               */
                               public void set_return(CarPolicyQueryEhmResponse param){
                            local_returnTracker = true;

                                            this.local_return=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://serviceIndiv.webServiceCenter.sinosoft.com");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":getPolicyQueryResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "getPolicyQueryResponse",
                           xmlWriter);
                   }


                   }
                if (local_returnTracker){
                                    if (local_return==null){

                                        writeStartElement(null, "http://serviceIndiv.webServiceCenter.sinosoft.com", "return", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     local_return.serialize(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com","return"),
                                        xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://serviceIndiv.webServiceCenter.sinosoft.com")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (local_returnTracker){
                            elementList.add(new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com",
                                                                      "return"));


                                    elementList.add(local_return==null?null:
                                    local_return);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static GetPolicyQueryResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            GetPolicyQueryResponse object =
                new GetPolicyQueryResponse();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"getPolicyQueryResponse".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetPolicyQueryResponse) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://serviceIndiv.webServiceCenter.sinosoft.com","return").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.set_return(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.set_return(CarPolicyQueryEhmResponse.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class CarPolicyQueryEhmRequest
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = CarPolicyQueryEhmRequest
                Namespace URI = http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns2
                */


                        /**
                        * field for EngineNo
                        */


                                    protected String localEngineNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEngineNoTracker = false ;

                           public boolean isEngineNoSpecified(){
                               return localEngineNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getEngineNo(){
                               return localEngineNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param EngineNo
                               */
                               public void setEngineNo(String param){
                            localEngineNoTracker = true;

                                            this.localEngineNo=param;


                               }


                        /**
                        * field for FrameNo
                        */


                                    protected String localFrameNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFrameNoTracker = false ;

                           public boolean isFrameNoSpecified(){
                               return localFrameNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getFrameNo(){
                               return localFrameNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param FrameNo
                               */
                               public void setFrameNo(String param){
                            localFrameNoTracker = true;

                                            this.localFrameNo=param;


                               }


                        /**
                        * field for LicenseNo
                        */


                                    protected String localLicenseNo ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLicenseNoTracker = false ;

                           public boolean isLicenseNoSpecified(){
                               return localLicenseNoTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getLicenseNo(){
                               return localLicenseNo;
                           }



                            /**
                               * Auto generated setter method
                               * @param param LicenseNo
                               */
                               public void setLicenseNo(String param){
                            localLicenseNoTracker = true;

                                            this.localLicenseNo=param;


                               }


                        /**
                        * field for Operator
                        */


                                    protected String localOperator ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOperatorTracker = false ;

                           public boolean isOperatorSpecified(){
                               return localOperatorTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getOperator(){
                               return localOperator;
                           }



                            /**
                               * Auto generated setter method
                               * @param param Operator
                               */
                               public void setOperator(String param){
                            localOperatorTracker = true;

                                            this.localOperator=param;


                               }


                        /**
                        * field for RequestType
                        */


                                    protected String localRequestType ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRequestTypeTracker = false ;

                           public boolean isRequestTypeSpecified(){
                               return localRequestTypeTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  String getRequestType(){
                               return localRequestType;
                           }



                            /**
                               * Auto generated setter method
                               * @param param RequestType
                               */
                               public void setRequestType(String param){
                            localRequestTypeTracker = true;

                                            this.localRequestType=param;


                               }


                        /**
                        * field for TXInsuranceRequestEhm
                        */


                                    protected TXInsuranceRequestEhm localTXInsuranceRequestEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTXInsuranceRequestEhmTracker = false ;

                           public boolean isTXInsuranceRequestEhmSpecified(){
                               return localTXInsuranceRequestEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return TXInsuranceRequestEhm
                           */
                           public  TXInsuranceRequestEhm getTXInsuranceRequestEhm(){
                               return localTXInsuranceRequestEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TXInsuranceRequestEhm
                               */
                               public void setTXInsuranceRequestEhm(TXInsuranceRequestEhm param){
                            localTXInsuranceRequestEhmTracker = true;

                                            this.localTXInsuranceRequestEhm=param;


                               }


                        /**
                        * field for TXInsuranceRequestExtensionEhm
                        */


                                    protected TXInsuranceRequestExtensionEhm localTXInsuranceRequestExtensionEhm ;

                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTXInsuranceRequestExtensionEhmTracker = false ;

                           public boolean isTXInsuranceRequestExtensionEhmSpecified(){
                               return localTXInsuranceRequestExtensionEhmTracker;
                           }



                           /**
                           * Auto generated getter method
                           * @return TXInsuranceRequestExtensionEhm
                           */
                           public  TXInsuranceRequestExtensionEhm getTXInsuranceRequestExtensionEhm(){
                               return localTXInsuranceRequestExtensionEhm;
                           }



                            /**
                               * Auto generated setter method
                               * @param param TXInsuranceRequestExtensionEhm
                               */
                               public void setTXInsuranceRequestExtensionEhm(TXInsuranceRequestExtensionEhm param){
                            localTXInsuranceRequestExtensionEhmTracker = true;

                                            this.localTXInsuranceRequestExtensionEhm=param;


                               }




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

                  if (serializeType){


                   String namespacePrefix = registerPrefix(xmlWriter,"http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":CarPolicyQueryEhmRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "CarPolicyQueryEhmRequest",
                           xmlWriter);
                   }


                   }
                if (localEngineNoTracker){
                                    namespace = "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "engineNo", xmlWriter);


                                          if (localEngineNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localEngineNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localFrameNoTracker){
                                    namespace = "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "frameNo", xmlWriter);


                                          if (localFrameNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localFrameNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localLicenseNoTracker){
                                    namespace = "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "licenseNo", xmlWriter);


                                          if (localLicenseNo==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localLicenseNo);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOperatorTracker){
                                    namespace = "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operator", xmlWriter);


                                          if (localOperator==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperator);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localRequestTypeTracker){
                                    namespace = "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "requestType", xmlWriter);


                                          if (localRequestType==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localRequestType);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localTXInsuranceRequestEhmTracker){
                                    if (localTXInsuranceRequestEhm==null){

                                        writeStartElement(null, "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "tXInsuranceRequestEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTXInsuranceRequestEhm.serialize(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestEhm"),
                                        xmlWriter);
                                    }
                                } if (localTXInsuranceRequestExtensionEhmTracker){
                                    if (localTXInsuranceRequestExtensionEhm==null){

                                        writeStartElement(null, "http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd", "tXInsuranceRequestExtensionEhm", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTXInsuranceRequestExtensionEhm.serialize(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestExtensionEhm"),
                                        xmlWriter);
                                    }
                                }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localEngineNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "engineNo"));

                                         elementList.add(localEngineNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEngineNo));
                                    } if (localFrameNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "frameNo"));

                                         elementList.add(localFrameNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrameNo));
                                    } if (localLicenseNoTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "licenseNo"));

                                         elementList.add(localLicenseNo==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLicenseNo));
                                    } if (localOperatorTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operator"));

                                         elementList.add(localOperator==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
                                    } if (localRequestTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "requestType"));

                                         elementList.add(localRequestType==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestType));
                                    } if (localTXInsuranceRequestEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "tXInsuranceRequestEhm"));


                                    elementList.add(localTXInsuranceRequestEhm==null?null:
                                    localTXInsuranceRequestEhm);
                                } if (localTXInsuranceRequestExtensionEhmTracker){
                            elementList.add(new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "tXInsuranceRequestExtensionEhm"));


                                    elementList.add(localTXInsuranceRequestExtensionEhm==null?null:
                                    localTXInsuranceRequestExtensionEhm);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static CarPolicyQueryEhmRequest parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            CarPolicyQueryEhmRequest object =
                new CarPolicyQueryEhmRequest();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"CarPolicyQueryEhmRequest".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (CarPolicyQueryEhmRequest) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","engineNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setEngineNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","frameNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setFrameNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","licenseNo").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setLicenseNo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperator(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","requestType").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setRequestType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTXInsuranceRequestEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setTXInsuranceRequestEhm(TXInsuranceRequestEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","tXInsuranceRequestExtensionEhm").equals(reader.getName())){

                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTXInsuranceRequestExtensionEhm(null);
                                          reader.next();

                                            reader.next();

                                      }else{

                                                object.setTXInsuranceRequestExtensionEhm(TXInsuranceRequestExtensionEhm.Factory.parse(reader));

                                        reader.next();
                                    }
                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


        public static class TXInsuranceResponseExtensionEhm extends TXInsuranceExtensionEhm
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = TXInsuranceResponseExtensionEhm
                Namespace URI = http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd
                Namespace Prefix = ns1
                */




        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);

        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




                String prefix = null;
                String namespace = null;


                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);


                   String namespacePrefix = registerPrefix(xmlWriter,"http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":TXInsuranceResponseExtensionEhm",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "TXInsuranceResponseExtensionEhm",
                           xmlWriter);
                   }

                if (localOperatorTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operator", xmlWriter);


                                          if (localOperator==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperator);

                                          }

                                   xmlWriter.writeEndElement();
                             } if (localOperatorKeyTracker){
                                    namespace = "http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd";
                                    writeStartElement(null, namespace, "operatorKey", xmlWriter);


                                          if (localOperatorKey==null){
                                              // write the nil attribute

                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

                                          }else{


                                                   xmlWriter.writeCharacters(localOperatorKey);

                                          }

                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();


        }

        private static String generatePrefix(String namespace) {
            if(namespace.equals("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(String prefix, String namespace, String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(String prefix,String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(String namespace,String attName,
                                    String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(String namespace, String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                String attributeNamespace = qname.getNamespaceURI();
                String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                StringBuffer stringToWrite = new StringBuffer();
                String namespaceURI = null;
                String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
            String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }



        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{



                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();


                    attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
                    attribList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","TXInsuranceResponseExtensionEhm"));
                 if (localOperatorTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operator"));

                                         elementList.add(localOperator==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperator));
                                    } if (localOperatorKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd",
                                                                      "operatorKey"));

                                         elementList.add(localOperatorKey==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperatorKey));
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



        }



     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{




        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static TXInsuranceResponseExtensionEhm parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
            TXInsuranceResponseExtensionEhm object =
                new TXInsuranceResponseExtensionEhm();

            int event;
            String nillableValue = null;
            String prefix ="";
            String namespaceuri ="";
            try {

                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();


                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                            if (!"TXInsuranceResponseExtensionEhm".equals(type)){
                                //find namespace for the prefix
                                String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TXInsuranceResponseExtensionEhm) ExtensionMapper.getTypeObject(
                                        nsUri, type, reader);
                              }


                  }


                }




                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();




                    reader.next();


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operator").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperator(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }


                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://common.ehmservice.services.dto.webServiceCenter.sinosoft.com/xsd","operatorKey").equals(reader.getName())){

                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){

                                    String content = reader.getElementText();

                                              object.setOperatorKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                       } else {


                                           reader.getElementText(); // throw away text nodes if any.
                                       }

                                        reader.next();

                              }  // End of if for expected property start element

                                    else {

                                    }

                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();

                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




            } catch (javax.xml.stream.XMLStreamException e) {
                throw new Exception(e);
            }

            return object;
        }

        }//end of factory class



        }


            private  org.apache.axiom.om.OMElement  toOM(CarPolicyQueryServiceStub.GetPolicyQuery param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


                        try{
                             return param.getOMElement(CarPolicyQueryServiceStub.GetPolicyQuery.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }


            }

            private  org.apache.axiom.om.OMElement  toOM(CarPolicyQueryServiceStub.GetPolicyQueryResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {


                        try{
                             return param.getOMElement(CarPolicyQueryServiceStub.GetPolicyQueryResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }


            }


                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CarPolicyQueryServiceStub.GetPolicyQuery param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{


                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CarPolicyQueryServiceStub.GetPolicyQuery.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }


                                        }


                             /* methods to provide back word compatibility */




        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  Object fromOM(
        org.apache.axiom.om.OMElement param,
        Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {

                if (CarPolicyQueryServiceStub.GetPolicyQuery.class.equals(type)){

                           return CarPolicyQueryServiceStub.GetPolicyQuery.Factory.parse(param.getXMLStreamReaderWithoutCaching());


                }

                if (CarPolicyQueryServiceStub.GetPolicyQueryResponse.class.equals(type)){

                           return CarPolicyQueryServiceStub.GetPolicyQueryResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


                }

        } catch (Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }



    
   }
   